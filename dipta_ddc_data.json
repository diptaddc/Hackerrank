{"username":"dipta_ddc","email":"dipta.ddc@gmail.com","school":"International Institute of Information Technology, Bangalore","country":"India","name":"Dipta Das Chowdhury","city":"Bangalore","website":"http://www.linkedin.com/in/dipta-das-chowdhury-32599593","job_title":"","phone_number":"9007847306","address":"Flat -706, Ivory Court 2\nEssel Towers, MG Road Gurgaon\nIffco Chowk","resume_text_url":"https://hackerrank-resumes.s3.amazonaws.com/3074503_txt/3-lDijMruzHADG0vmzTvTg0U1xcsl3F-aoUUiWfRv_4gY-1M2yNz2xgnPIwsELF9fg/MT2018032_Dipta_pdf.txt","gh_uid":"28682763","li_uid":"L0aiIHfv5W","linkedin_url":"http://www.linkedin.com/in/dipta-das-chowdhury-32599593","jobs_consent":"true","resume_url":"https://hackerrank-resumes.s3.amazonaws.com/3074503/VvPcC26TixfhBaPdZmvn2QHcPrMdU89M0PUu40bhlm-QSO8kMjvrxzWDKjUNv53COQ/MT2018032_Dipta.pdf","personal_first_name":"Dipta Das","personal_last_name":"Chowdhury","graduation_year":"2020","college_majors":["Computer Science"],"hacker_school_additional":[{"name":"International Institute of Information Technology, Bangalore","represented":true,"options":[{"from_year":"2018","to_year":"2020","program":"Computer Science","degree":"M.Tech"}]},{"name":"HIT, Kolkata (Heritage Institute of Technology)","represented":null,"options":[{"from_year":2013,"to_year":2017,"program":"Information Technology","degree":"B.Tech"}]}],"timezone":"Asia/Calcutta","us_work_eligibility_2":false,"is_professional":false,"gender":"Man","us_citizenship_2":3,"role_number":"MT2018032","dashboard_survey_preference":5,"contest_data":{"interviewed-flag":"No","phone-no":"9007847306","interned-at":"","placed-in":"","applying-for":"Internship","availability":"2 Months","size":"Large","tpo":"","other-website":"","pincode":"122002","dob":"","phone":"9007847306","gender":"Male","semester":"1st","major":"Computer Science","course":"M.E./M.Tech/M.S.","degree":"M.Tech"},"hackos":424,"favorite_challenges":[],"challenges_created":[],"other_emails":[],"all_schools":[{"name":"HIT, Kolkata (Heritage Institute of Technology)","program":"Information Technology","degree":"B.Tech","start_date":null,"end_date":null},{"name":"International Institute of Information Technology, Bangalore","program":"Computer Science","degree":"M.Tech","start_date":null,"end_date":null}],"snippets":[{"language":"java8","title":"dipta_ddc's snippet from Bear and Steady Gene"}],"submissions":[{"contest":"Master","challenge":"Larry's Array","code":"#!/bin/python3\n\ndef rotate(a, b, c):\n    r = [a, b, c]\n    te = r\n    m = min(r)\n    while te[0] != m:\n        te = te[1:] + te[:1]\n\n    return te\n\n\nTest = int(input())\nfor t in Test:\n    n = int(input())\n    In = ([input()])\n    test = In\n    Output = []\n    i = 0\n    while n \u003e 0:\n        while i \u003c (len(In)):\n            if test[i] \u003e test[i+2]:\n                rotate(test[i], test[i+1], test[i+2])\n                i = i + 2\n            else:\n                i = i + 1\n        n = n - 1\n    if test == In.sort():\n        Output.append(\"YES\")\n    else:\n        Output.append(\"NO\")\nfor o in Output:\n    print(o)\n\n\n\n\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Larry's Array","code":"def rotate(a, b, c):\n    r = [a, b, c]\n    te = r\n    m = min(r)\n    while te[0] != m:\n        te = te[1:] + te[:1]\n\n    return te[0],te[1],te[2]\n\n\nTest = int(input())\nOutput = []\nfor t in range(Test):\n    n = int(input())\n    In = [x for x in input().split()]\n    test = In.copy()\n    i = 0\n    while n \u003e 0:\n        while i \u003c (len(In) - 2):\n            if test[i] \u003e test[i+2]:\n                test[i], test[i+1], test[i+2] = rotate(test[i], test[i+1], test[i+2])\n                i = i + 2\n            else:\n                i = i + 1\n        n = n - 1\n    In.sort()\n    if test == In:\n        Output.append(\"YES\")\n    else:\n        Output.append(\"NO\")\nfor o in Output:\n    print(o)\n\n\n\n\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Larry's Array","code":"def rotate(a, b, c):\n    r = [a, b, c]\n    te = r\n    m = min(r)\n    while te[0] != m:\n        te = te[1:] + te[:1]\n\n    return te[0],te[1],te[2]\n\n\nTest = int(input())\nOutput = []\nfor t in range(Test):\n    n = int(input())\n    In = [x for x in input().split()]\n    test = In.copy()\n    i = 0\n    while n \u003e 0:\n        while i \u003c (len(In) - 2):\n            if test[i] \u003e test[i+2]:\n                test[i], test[i+1], test[i+2] = rotate(test[i], test[i+1], test[i+2])\n                i = i + 2\n            else:\n                i = i + 1\n        n = n - 1\n    In.sort()\n    if test == In:\n        Output.append(\"YES\")\n    else:\n        Output.append(\"NO\")\nfor o in Output:\n    print(o)\n\n\n\n\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Larry's Array","code":"def rotate(a, b, c):\n    r = [a, b, c]\n    te = r\n    m = min(r)\n    while te[0] != m:\n        te = te[1:] + te[:1]\n\n    return te[0],te[1],te[2]\n\n\nTest = int(input())\nOutput = []\nfor t in range(Test):\n    n = int(input())\n    In = [x for x in input().split()]\n    test = In.copy()\n\n    while n \u003e 0:\n        i = 0\n        while i \u003c (len(In) - 2):\n            if test[i] \u003e test[i+2]:\n                test[i], test[i+1], test[i+2] = rotate(test[i], test[i+1], test[i+2])\n                i = i + 2\n            else:\n                i = i + 1\n        n = n - 1\n    In.sort()\n    if test == In:\n        Output.append(\"YES\")\n    else:\n        Output.append(\"NO\")\nfor o in Output:\n    print(o)\n\n\n\n\n","score":0.05,"language":"python3"},{"contest":"Master","challenge":"Larry's Array","code":"def rotate(a, b, c):\n    r = [int(a), int(b), int(c)]\n    te = r\n    m = min(r)\n    while te[0] != m:\n        te = te[1:] + te[:1]\n\n    return te[0],te[1],te[2]\n\n\nTest = int(input())\nOutput = []\nfor t in range(Test):\n    n = int(input())\n    In = [int(x) for x in input().split()]\n    test = In.copy()\n\n    while n \u003e 0:\n        i = 0\n        while i \u003c (len(In) - 2):\n            a = int(test[i])\n            b = int(test[i+2])\n            if a \u003e b:\n                test[i], test[i+1], test[i+2] = rotate(test[i], test[i+1], test[i+2])\n                i = i + 2\n            else:\n                i = i + 1\n        n = n - 1\n    In.sort()\n    if test == In:\n        Output.append(\"YES\")\n    else:\n        Output.append(\"NO\")\nfor o in Output:\n    print(o)\n\n\n\n\n","score":0.05,"language":"python3"},{"contest":"Master","challenge":"Larry's Array","code":"def rotate(a, b, c):\n    r = [int(a), int(b), int(c)]\n    te = r\n    m = min(r)\n    while te[0] != m:\n        te = te[1:] + te[:1]\n\n    return te[0],te[1],te[2]\n\n\nTest = int(input())\nOutput = []\nfor t in range(Test):\n    n = int(input())\n    In = [int(x) for x in input().split()]\n    test = In.copy()\n\n    while n \u003e 0:\n        i = 0\n        while i \u003c (len(In) - 2):\n            a = int(test[i])\n            b = int(test[i+2])\n            if a \u003e b:\n                test[i], test[i+1], test[i+2] = rotate(test[i], test[i+1], test[i+2])\n                i = i + 2\n            else:\n                i = i + 1\n        n = n - 1\n    In.sort()\n    if test == In:\n        Output.append(\"YES\")\n    else:\n        Output.append(\"NO\")\nfor o in Output:\n    print(o)\n\n\n\n\n","score":0.05,"language":"python3"},{"contest":"Master","challenge":"Larry's Array","code":"def rotate(a, b, c):\n    r = [int(a), int(b), int(c)]\n    te = r\n    m = min(r)\n    while te[0] != m:\n        te = te[1:] + te[:1]\n\n    return te[0],te[1],te[2]\n\n\nTest = int(input())\nOutput = []\nfor t in range(Test):\n    n = int(input())\n    In = [int(x) for x in input().split()]\n    test = In.copy()\n\n    while n \u003e 0:\n        i = 0\n        while i \u003c (len(In) - 2):\n            a = int(test[i])\n            b = int(test[i+2])\n            if a \u003e b:\n                test[i], test[i+1], test[i+2] = rotate(test[i], test[i+1], test[i+2])\n                i = i + 2\n            else:\n                i = i + 1\n        n = n - 1\n    In.sort()\n    if test == In:\n        Output.append(\"YES\")\n    else:\n        Output.append(\"NO\")\nfor o in Output:\n    print(o)\n\n\n\n\n","score":0.05,"language":"python3"},{"contest":"Master","challenge":"Larry's Array","code":"def rotate(a1, b1, c):\n    r = [int(a1), int(b1), int(c)]\n    te = r\n    m = min(r)\n    while te[0] != m:\n        te = te[1:] + te[:1]\n\n    return te[0], te[1], te[2]\n\n\nTest = int(input())\nOutput = []\nfor t in range(Test):\n    n = int(input())\n    In = [int(x) for x in input().split()]\n    test = In.copy()\n\n    while n \u003e 0:\n        i = 0\n        while i \u003c (len(In) - 2):\n            test[i], test[i+1], test[i+2] = rotate(test[i], test[i+1], test[i+2])\n            i = i + 1\n        n = n - 1\n    In.sort()\n    if test == In:\n        Output.append(\"YES\")\n    else:\n        Output.append(\"NO\")\n    print(test)\nfor o in Output:\n    print(o)\n\n\n\n\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Larry's Array","code":"def rotate(a1, b1, c):\n    r = [int(a1), int(b1), int(c)]\n    te = r\n    m = min(r)\n    while te[0] != m:\n        te = te[1:] + te[:1]\n\n    return te[0], te[1], te[2]\n\n\nTest = int(input())\nOutput = []\nfor t in range(Test):\n    n = int(input())\n    In = [int(x) for x in input().split()]\n    test = In.copy()\n\n    while n \u003e 0:\n        i = 0\n        while i \u003c (len(In) - 2):\n            test[i], test[i+1], test[i+2] = rotate(test[i], test[i+1], test[i+2])\n            i = i + 1\n        n = n - 1\n    In.sort()\n    if test == In:\n        Output.append(\"YES\")\n    else:\n        Output.append(\"NO\")\nfor o in Output:\n    print(o)\n\n\n\n\n","score":0.55,"language":"python3"},{"contest":"Master","challenge":"Larry's Array","code":"def rotate(a1, b1, c):\n    r = [int(a1), int(b1), int(c)]\n    te = r\n    m = min(r)\n    while te[0] != m:\n        te = te[1:] + te[:1]\n\n    return te[0], te[1], te[2]\n\n\nTest = int(input())\nOutput = []\nfor t in range(Test):\n    n = int(input())\n    In = [int(x) for x in input().split()]\n    test = In.copy()\n\n    while n \u003e 0 or flag == 1:\n        i = 0\n        flag = 0\n        while i \u003c (len(In) - 2):\n            a, b, c = rotate(test[i], test[i+1], test[i+2])\n            if test[i] != a and test[i+1] != b and test[i+2] != c:\n                test[i], test[i+1], test[i+2] = a, b, c\n                flag = 1\n            i = i + 1\n        n = n - 1\n    In.sort()\n    if test == In:\n        Output.append(\"YES\")\n    else:\n        Output.append(\"NO\")\nfor o in Output:\n    print(o)\n\n\n\n\n","score":0.55,"language":"python3"},{"contest":"Master","challenge":"Larry's Array","code":"def rotate(a1, b1, c):\n    r = [int(a1), int(b1), int(c)]\n    te = r\n    m = min(r)\n    while te[0] != m:\n        te = te[1:] + te[:1]\n\n    return te[0], te[1], te[2]\n\n\nTest = int(input())\nOutput = []\nfor t in range(Test):\n    n = int(input())\n    In = [int(x) for x in input().split()]\n    test = In.copy()\n    flag = 1\n    while n \u003e 0 and flag == 1:\n        i = 0\n        flag = 0\n        while i \u003c (len(In) - 2):\n            a, b, c = rotate(test[i], test[i+1], test[i+2])\n            if test[i] != a and test[i+1] != b and test[i+2] != c:\n                test[i], test[i+1], test[i+2] = a, b, c\n                flag = 1\n            i = i + 1\n        n = n - 1\n    In.sort()\n    if test == In:\n        Output.append(\"YES\")\n    else:\n        Output.append(\"NO\")\nfor o in Output:\n    print(o)\n\n\n\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Extra Long Factorials","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the extraLongFactorials function below.\n    static void extraLongFactorials(int n) {\n        BigInteger Fact = BigInteger.valueOf(1);\n        while(n\u003e1){\n            Fact = Fact.multiply(BigInteger.valueOf(n));\n            n--;\n        }\n        String result = Fact.toString();\n        System.out.println(result);\n\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        extraLongFactorials(n);\n\n        scanner.close();\n    }\n}\n","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Bigger is Greater","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the biggerIsGreater function below.\n    static String biggerIsGreater(String w) {\n        int i,check = 99;\n        String result = \"lol\";\n        char testArray[] = w.toCharArray();\n        Arrays.sort(testArray);\n        String sortW = new String(testArray);\n        StringBuilder sb = new StringBuilder(sortW);\n        sortW = sb.reverse().toString();\n        check = sortW.compareTo(w);\n        if(check == 0 ){\n            result = \"no answer\";\n            return result;\n        }\n        else{\n            \n        }\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int T = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int TItr = 0; TItr \u003c T; TItr++) {\n            String w = scanner.nextLine();\n\n            String result = biggerIsGreater(w);\n\n            bufferedWriter.write(result);\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java8"},{"contest":"Master","challenge":"Bigger is Greater","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the biggerIsGreater function below.\n    static String biggerIsGreater(String w) {\n        int i,check = 99,j;\n        String result = \"lol\";\n        char testArray[] = w.toCharArray();\n        Arrays.sort(testArray);\n        String sortW = new String(testArray);\n        StringBuilder sb = new StringBuilder(sortW);\n        sortW = sb.reverse().toString();\n        check = sortW.compareTo(w);\n        if(check == 0 ){\n            result = \"no answer\";\n            \n        }\n        else{\n            //for making greater\n            int changeIndex = -1;\n            for(i = w.length() ; i\u003e0;i--){\n                for(j = i-1 ; j\u003e=0;j--){\n                    if (testArray[i] \u003e testArray[j] ){\n                        char temp = testArray[i];\n                        testArray[i] = testArray[j];\n                        testArray[j] = temp;\n                        changeIndex = j;\n                    }\n                        \n                }\n            //for making smallest greater\n                for(i = changeIndex+1 ; i\u003cw.length()-1; i++){\n                    for(j = i + 1; j\u003cw.length(); j ++){\n                        if(testArray[i] \u003e testArray[j]){\n                            char temp = testArray[i];\n                            testArray[i] = testArray[j];\n                            testArray[j] = temp;\n                        }\n                    }\n                }\n            }\n            String nResult = new String(testArray);\n            result = nResult;\n        }\n        return result;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int T = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int TItr = 0; TItr \u003c T; TItr++) {\n            String w = scanner.nextLine();\n\n            String result = biggerIsGreater(w);\n\n            bufferedWriter.write(result);\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java8"},{"contest":"Master","challenge":"Bigger is Greater","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the biggerIsGreater function below.\n    static String biggerIsGreater(String w) {\n        int i=0,check = 99,j=0;\n        String result = \"lol\";\n        char testarray[] = w.toCharArray();\n        Arrays.sort(testarray);\n        String sortW = new String(testarray);\n        StringBuilder sb = new StringBuilder(sortW);\n        sortW = sb.reverse().toString();\n        check = sortW.compareTo(w);\n        if(check == 0 ){\n            result = \"no answer\";\n            \n        }\n        else{\n            //for making greater\n            int changeIndex = -1;\n            int count = 0;\n            char testArray[] = w.toCharArray();\n            for(i = w.length()-1 ; i\u003e0;i--){ \n                for(j = i-1 ; j\u003e=0;j--)\n                {\n                    if (testArray[i] \u003e testArray[j] )\n                    {\n                        \n                        char temp = testArray[i];\n                        testArray[i] = testArray[j];\n                        testArray[j] = temp;\n                        changeIndex = j;\n                        i = 0;\n                        break;\n                    }\n                        \n                }\n            }\n            //for making smallest greater\n                int min = changeIndex + 1;\n                for(i=changeIndex+1;i\u003cw.length()-1;i++)\n                {\n                    for(j=i+1;j\u003cw.length();j++)\n                    {\n                        if(testArray[i] \u003e testArray[j]){\n                           char temp = testArray[j];\n                           testArray[j] = testArray[i];\n                           testArray[i] = temp;\n                        }\n                    }\n                }\n                \n            String nResult = new String(testArray);\n            result = nResult;\n        }\n        return result;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int T = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int TItr = 0; TItr \u003c T; TItr++) {\n            String w = scanner.nextLine();\n\n            String result = biggerIsGreater(w);\n\n            bufferedWriter.write(result);\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java8"},{"contest":"Master","challenge":"Bigger is Greater","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the biggerIsGreater function below.\n    static String biggerIsGreater(String w) {\n        int i=0,check = 99,j=0;\n        String result = \"lol\";\n        char testarray[] = w.toCharArray();\n        Arrays.sort(testarray);\n        String sortW = new String(testarray);\n        StringBuilder sb = new StringBuilder(sortW);\n        sortW = sb.reverse().toString();\n        check = sortW.compareTo(w);\n        if(check == 0 ){\n            result = \"no answer\";\n            \n        }\n        else{\n            //for making greater\n            int changeIndex = -1;\n            int count = 0;\n            char testArray[] = w.toCharArray();\n            for(i = w.length()-1 ; i\u003e0;i--){ \n                for(j = i-1 ; j\u003e=0;j--)\n                {\n                    if (testArray[i] \u003e testArray[j] )\n                    {\n                        \n                        char temp = testArray[i];\n                        testArray[i] = testArray[j];\n                        testArray[j] = temp;\n                        changeIndex = j;\n                        i = 0;\n                        break;\n                    }\n                        \n                }\n            }\n            //for making smallest greater\n                int min = changeIndex + 1;\n                for(i=changeIndex+1;i\u003cw.length()-1;i++)\n                {\n                    for(j=i+1;j\u003cw.length();j++)\n                    {\n                        if(testArray[i] \u003e testArray[j]){\n                           char temp = testArray[j];\n                           testArray[j] = testArray[i];\n                           testArray[i] = temp;\n                        }\n                    }\n                }\n                \n            String nResult = new String(testArray);\n            result = nResult;\n        }\n        return result;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int T = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int TItr = 0; TItr \u003c T; TItr++) {\n            String w = scanner.nextLine();\n\n            String result = biggerIsGreater(w);\n\n            bufferedWriter.write(result);\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java8"},{"contest":"Master","challenge":"Bigger is Greater","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the biggerIsGreater function below.\n    static String biggerIsGreater(String w) {\n        int i=0,check = 99,j=0;\n        String result = \"lol\";\n        char testarray[] = w.toCharArray();\n        Arrays.sort(testarray);\n        String sortW = new String(testarray);\n        StringBuilder sb = new StringBuilder(sortW);\n        sortW = sb.reverse().toString();\n        check = sortW.compareTo(w);\n        if(check == 0 ){\n            result = \"no answer\";\n            \n        }\n        else{\n            //for making greater\n            int changeIndex = -1;\n            int count = 0;\n            char testArray[] = w.toCharArray();\n            for(i = w.length()-1 ; i\u003e0;i--){ \n                for(j = i-1 ; j\u003e=0;j--)\n                {\n                    if (testArray[i] \u003e testArray[j] )\n                    {\n                        \n                        char temp = testArray[i];\n                        testArray[i] = testArray[j];\n                        testArray[j] = temp;\n                        changeIndex = j;\n                        i = 0;\n                        break;\n                    }\n                        \n                }\n            }\n            //for making smallest greater\n                int min = changeIndex + 1;\n                for(i=changeIndex+1;i\u003cw.length()-1;i++)\n                {\n                    for(j=i+1;j\u003cw.length();j++)\n                    {\n                        if(testArray[i] \u003e testArray[j]){\n                           char temp = testArray[j];\n                           testArray[j] = testArray[i];\n                           testArray[i] = temp;\n                        }\n                    }\n                }\n                \n            String nResult = new String(testArray);\n            result = nResult;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int T = Integer.parseInt(br.readLine());\n        for (int TItr = 0; TItr \u003c T; TItr++) {\n            String w = br.readLine();\n\n            String result = biggerIsGreater(w);\n\n            bufferedWriter.write(result);\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        br.close();\n    }\n}\n","score":0.0,"language":"java8"},{"contest":"Master","challenge":"Bigger is Greater","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the biggerIsGreater function below.\n    static String biggerIsGreater(String w) {\n        int i=0,check = 99,j=0;\n        String result = \"lol\";\n        char testarray[] = w.toCharArray();\n        Arrays.sort(testarray);\n        String sortW = new String(testarray);\n        StringBuilder sb = new StringBuilder(sortW);\n        sortW = sb.reverse().toString();\n        check = sortW.compareTo(w);\n        if(check == 0 ){\n            result = \"no answer\";\n            \n        }\n        else{\n            //for making greater\n            int changeIndex = -1;\n            int count = 0;\n            char testArray[] = w.toCharArray();\n            for(i = w.length()-1 ; i\u003e0;i--){ \n                for(j = i-1 ; j\u003e=0;j--)\n                {\n                    if (testArray[i] \u003e testArray[j] )\n                    {\n                        \n                        char temp = testArray[i];\n                        testArray[i] = testArray[j];\n                        testArray[j] = temp;\n                        changeIndex = j;\n                        i = 0;\n                        break;\n                    }\n                        \n                }\n            }\n            //for making smallest greater\n                int min = changeIndex + 1;\n                for(i=changeIndex+1;i\u003cw.length()-1;i++)\n                {\n                    for(j=i+1;j\u003cw.length();j++)\n                    {\n                        if(testArray[i] \u003e testArray[j]){\n                           char temp = testArray[j];\n                           testArray[j] = testArray[i];\n                           testArray[i] = temp;\n                        }\n                    }\n                }\n                \n            String nResult = new String(testArray);\n            result = nResult;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int T = Integer.parseInt(br.readLine());\n        for (int TItr = 0; TItr \u003c T; TItr++) {\n            String w = br.readLine();\n\n            String result = biggerIsGreater(w);\n\n            bufferedWriter.write(result);\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        br.close();\n    }\n}\n","score":0.0,"language":"java8"},{"contest":"Master","challenge":"Bigger is Greater","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the biggerIsGreater function below.\n    static String biggerIsGreater(String w) {\n        int i=0,check = 99,j=0;\n        String result = \"lol\";\n        char testarray[] = w.toCharArray();\n        Arrays.sort(testarray);\n        String sortW = new String(testarray);\n        StringBuilder sb = new StringBuilder(sortW);\n        sortW = sb.reverse().toString();\n        check = sortW.compareTo(w);\n        if(check == 0 ){\n            result = \"no answer\";\n            \n        }\n        else{\n            //for making greater\n            int changeIndex = -1;\n            int count = 0;\n            char testArray[] = w.toCharArray();\n            for(i = w.length()-1 ; i\u003e0;i--){ \n                for(j = i-1 ; j\u003e=0;j--)\n                {\n                    if (testArray[i] \u003e testArray[j] )\n                    {\n                        \n                        char temp = testArray[i];\n                        testArray[i] = testArray[j];\n                        testArray[j] = temp;\n                        changeIndex = j;\n                        i = 0;\n                        break;\n                    }\n                        \n                }\n            }\n            //for making smallest greater\n                int min = changeIndex + 1;\n                for(i=changeIndex+1;i\u003cw.length()-1;i++)\n                {\n                    for(j=i+1;j\u003cw.length();j++)\n                    {\n                        if(testArray[i] \u003e testArray[j]){\n                           char temp = testArray[j];\n                           testArray[j] = testArray[i];\n                           testArray[i] = temp;\n                        }\n                    }\n                }\n                \n            String nResult = new String(testArray);\n            result = nResult;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int T = Integer.parseInt(br.readLine());\n        for (int TItr = 0; TItr \u003c T; TItr++) {\n            String w = br.readLine();\n\n            String result = biggerIsGreater(w);\n\n            bufferedWriter.write(result);\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        br.close();\n    }\n}\n","score":0.0,"language":"java8"},{"contest":"Master","challenge":"Bigger is Greater","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the biggerIsGreater function below.\n    static String biggerIsGreater(String w) {\n        int i=0,check = 99,j=0;\n        String result = \"lol\";\n        char testarray[] = w.toCharArray();\n        Arrays.sort(testarray);\n        String sortW = new String(testarray);\n        StringBuilder sb = new StringBuilder(sortW);\n        sortW = sb.reverse().toString();\n        check = sortW.compareTo(w);\n        if(check == 0 ){\n            result = \"no answer\";\n            \n        }\n        else{\n            //for making greater\n            int changeIndex = -1;\n            int count = 0;\n            char testArray[] = w.toCharArray();\n            for(i = 1 ; i\u003cw.length();i++){ \n                for(j = w.length()-1 ; j\u003e=0;j--)\n                {\n                    if(j-i \u003e= 0){\n                        if (testArray[j] \u003e testArray[j-i] )\n                        {\n                        \n                            char temp = testArray[j];\n                            testArray[j] = testArray[j-i];\n                            testArray[j-i] = temp;\n                            changeIndex = j-i;\n                            i = w.length() + 5;\n                            break;\n                        }\n                        \n                    }\n                        \n                }\n            }\n            //for making smallest greater\n                int min = changeIndex + 1;\n                for(i=changeIndex+1;i\u003cw.length()-1;i++)\n                {\n                    for(j=i+1;j\u003cw.length();j++)\n                    {\n                        if(testArray[i] \u003e testArray[j]){\n                           char temp = testArray[j];\n                           testArray[j] = testArray[i];\n                           testArray[i] = temp;\n                        }\n                    }\n                }            \n            String nResult = new String(testArray);\n            result = nResult;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int T = Integer.parseInt(br.readLine());\n        for (int TItr = 0; TItr \u003c T; TItr++) {\n            String w = br.readLine();\n\n            String result = biggerIsGreater(w);\n\n            bufferedWriter.write(result);\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        br.close();\n    }\n}\n","score":0.0,"language":"java8"},{"contest":"Master","challenge":"Bigger is Greater","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the biggerIsGreater function below.\n    static String biggerIsGreater(String w) {\n        int i=0,check = 99,j=0;\n        String result = \"lol\";\n        char testarray[] = w.toCharArray();\n        Arrays.sort(testarray);\n        String sortW = new String(testarray);\n        StringBuilder sb = new StringBuilder(sortW);\n        sortW = sb.reverse().toString();\n        check = sortW.compareTo(w);\n        if(check == 0 ){\n            result = \"no answer\";\n            \n        }\n        else{\n            char[] testArray = w.toCharArray();\n            int length = w.length();\n            int lastIndex = w.length() - 1;\n            int changeIndex = -1;\n            for(i=1;i\u003clength;i++)\n            {\n                    char[] ar = w.substring(w.length()-1-i,w.length()).toCharArray();\n                    //try to minimally maximize this sub array\n                    int min = 100;\n                    for(j=length-i;j\u003clength;j++)\n                    {\n                        int change = testArray[j] - testArray[length-i-1];  \n                        if(change\u003cmin \u0026\u0026 change \u003e 0)\n                        {\n                            min = change;\n                            changeIndex = j;\n                        }\n                    }\n                    if(changeIndex != -1){\n                        char temp = testArray[changeIndex];\n                        testArray[changeIndex] = testArray[length-i-1];\n                        testArray[length-i-1] = temp;\n                    }\n                    \n            }\n            String nResult = new String(testArray);\n            result = nResult;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int T = Integer.parseInt(br.readLine());\n        for (int TItr = 0; TItr \u003c T; TItr++) {\n            String w = br.readLine();\n\n            String result = biggerIsGreater(w);\n\n            bufferedWriter.write(result);\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        br.close();\n    }\n}\n","score":0.0,"language":"java8"},{"contest":"Master","challenge":"Bigger is Greater","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the biggerIsGreater function below.\n    static String biggerIsGreater(String w) {\n        int i=0,check = 99,j=0;\n        String result = \"lol\";\n        char testarray[] = w.toCharArray();\n        Arrays.sort(testarray);\n        String sortW = new String(testarray);\n        StringBuilder sb = new StringBuilder(sortW);\n        sortW = sb.reverse().toString();\n        check = sortW.compareTo(w);\n        if(check == 0 ){\n            result = \"no answer\";\n            \n        }\n        else{\n            char[] testArray = w.toCharArray();\n            int length = w.length();\n            int lastIndex = w.length() - 1;\n            int changeIndex = -1;\n            for(i=1;i\u003clength;i++)\n            {\n                    char[] ar = w.substring(w.length()-1-i,w.length()).toCharArray();\n                    //try to minimally maximize this sub array\n                    int min = 100;\n                    for(j=length-i;j\u003clength;j++)\n                    {\n                        int change = testArray[j] - testArray[length-i-1];  \n                        if(change\u003cmin \u0026\u0026 change \u003e 0)\n                        {\n                            min = change;\n                            changeIndex = j;\n                        }\n                    }\n                    if(changeIndex != -1){\n                        char temp = testArray[changeIndex];\n                        testArray[changeIndex] = testArray[length-i-1];\n                        testArray[length-i-1] = temp;\n                        changeIndex = length-i-1;\n                        break;\n                    }\n                    \n            }\n            System.out.println(changeIndex);\n            //reducing\n            int min = changeIndex + 1;\n                for(i=changeIndex+1;i\u003cw.length()-1;i++)\n                {\n                    for(j=i+1;j\u003cw.length();j++)\n                    {\n                        if(testArray[i] \u003e testArray[j]){\n                           char temp = testArray[j];\n                           testArray[j] = testArray[i];\n                           testArray[i] = temp;\n                        }\n                    }\n                } \n            String nResult = new String(testArray);\n            result = nResult;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int T = Integer.parseInt(br.readLine());\n        for (int TItr = 0; TItr \u003c T; TItr++) {\n            String w = br.readLine();\n\n            String result = biggerIsGreater(w);\n\n            bufferedWriter.write(result);\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        br.close();\n    }\n}\n","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Almost Sorted","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the almostSorted function below.\n    static void almostSorted(int[] arr) {\n        int i,length,stretch = 0,start = -1,finish = 0;\n        length = arr.length - 1; \n        int [] testArray = arr.clone();\n        Arrays.sort(testArray);\n        if(Arrays.equals(arr,testArray))\n        {\n            System.out.println(\"yes\");\n            return;\n        }\n        else\n        {\n            for(i = 0; i \u003c= length; i++ )\n            {\n                if(testArray[i] != arr[i])\n                {\n                \n                    if(finish ==1)\n                    {\n                        System.out.println(\"no\");\n                        return;\n                    }\n                    else if(stretch == 0)\n                    {\n                        start = i;\n                        stretch++;\n                    }\n                    else if(stretch \u003e 0 \u0026\u0026 finish == 0)\n                    {\n                        stretch++;\n                       \n                    }\n                        \n                }\n                else if(testArray[i] == arr[i] \u0026\u0026 stretch\u003e0)\n                {\n                    finish = 1;\n                }\n            }\n            if(stretch == 2)\n            {\n                System.out.println(\"yes\");\n                System.out.println(\"swap \" + (start+1) + \" \" + (start+stretch));\n            }\n            else if(stretch \u003e 2){\n                int [] test = new int [stretch];\n                int check = 0;\n                System.arraycopy(arr, start, test, 0, stretch);\n                for(i=0;i\u003cstretch-1;i++)\n                {\n                    if(test[i] \u003c test[i+1])\n                    {\n                        check = 1;\n                        break;\n                    }\n                }\n                if(check == 0)\n                {\n                    System.out.println(\"yes\");\n                    System.out.println(\"reverse \" + (start+1) + \" \" + (start+stretch));\n                    return;\n                        \n                }\n                else\n                {\n                    System.out.println(\"no\");\n                    return;\n                }\n                    \n            }\n            \n        }\n\n\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        int[] arr = new int[n];\n\n        String[] arrItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c n; i++) {\n            int arrItem = Integer.parseInt(arrItems[i]);\n            arr[i] = arrItem;\n        }\n\n        almostSorted(arr);\n\n        scanner.close();\n    }\n}\n","score":0.409090909091,"language":"java8"},{"contest":"Master","challenge":"Forming a Magic Square","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\nimport java.lang.*;\n\npublic class Solution {\n\n    // Complete the formingMagicSquare function below.\n     static int sumRow(int [][] s, int i,int j)\n    {\n        int c;\n        int sum = 15 - s[i][j];\n        for(c=j+1;c\u003c3;c++)\n            sum = sum -s[i][c];\n        for(c=j-1;c\u003e=0;c--)\n            sum = sum - s[i][c];\n        return sum;\n    }\n    static int checkCol(int [][] s, int i,int j)\n    {\n        int r;\n        int sum = 15 - s[i][j];\n        for(r=i+1;r\u003c3;r++)\n            sum = sum -s[r][j];\n        for(r=i-1;r\u003e=0;r--)\n            sum = sum - s[r][j];\n        if(sum == 0)\n            return 1;\n        else\n            return 0;\n    }\n     static int checkRow(int [][] s, int i,int j)\n    {\n        int c;\n        int sum = 15 - s[i][j];\n        for(c=j+1;c\u003c3;c++)\n            sum = sum -s[i][c];\n        for(c=j-1;c\u003e=0;c--)\n            sum = sum - s[i][c];\n        if(sum == 0)\n            return 1;\n        else\n            return 0;\n    }\n     static int checkDia(int [][] s, int i,int j)\n    {\n        int r,c;\n        if(i==j)\n        {\n            int sum = 15 - s[i][j];\n            for(r =i+1 , c=j+1;r\u003c3 \u0026\u0026 c\u003c3;r++ , c++)\n            sum = sum -s[r][c];\n            for(r=i-1 , c=j-1;r\u003e=0 \u0026\u0026 c\u003e=0;r-- , c--)\n                sum = sum - s[r][c];\n            if(sum == 0)\n                return 1;\n            else\n                return 0;    \n        }\n        else\n            return 0;\n    }\n    \n    static int formingMagicSquare(int[][] s) {\n            int i ,j,dif,count=0;\n            for(i=0;i\u003c3;i++)\n            {\n                for(j=0;j\u003c3;j++)\n                {\n                    if(checkRow(s,i,j)==1)\n                        break;\n                    else if(checkCol(s,i,j)==1)\n                        continue;\n                    else if(checkDia(s,i,j)==1)\n                        continue;\n                    else\n                    {\n                        dif = sumRow(s,i,j);\n                        s[i][j] += dif;\n                        count += Math.abs(dif);\n                    }\n                        \n                }\n            }\n           /* for(i=0;i\u003c3;i++)\n            {\n                for(j=0;j\u003c3;j++)\n                {\n                    System.out.print(s[i][j] + \" \");\n                }\n                System.out.println();\n            }*/\n            return count;\n\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int[][] s = new int[3][3];\n\n        for (int i = 0; i \u003c 3; i++) {\n            String[] sRowItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int j = 0; j \u003c 3; j++) {\n                int sItem = Integer.parseInt(sRowItems[j]);\n                s[i][j] = sItem;\n            }\n        }\n\n        int result = formingMagicSquare(s);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.142857142857,"language":"java8"},{"contest":"Master","challenge":"Forming a Magic Square","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\nimport java.lang.*;\n\npublic class Solution {\n\n    // Complete the formingMagicSquare function below.\n     static int sumRow(int [][] s, int i,int j)\n    {\n        int c;\n        int sum = 15 - s[i][j];\n        for(c=j+1;c\u003c3;c++)\n            sum = sum -s[i][c];\n        for(c=j-1;c\u003e=0;c--)\n            sum = sum - s[i][c];\n        return sum;\n    }\n    static int checkCol(int [][] s, int i,int j)\n    {\n        int r;\n        int sum = 15 - s[i][j];\n        for(r=i+1;r\u003c3;r++)\n            sum = sum -s[r][j];\n        for(r=i-1;r\u003e=0;r--)\n            sum = sum - s[r][j];\n        if(sum == 0)\n            return 1;\n        else\n            return 0;\n    }\n     static int checkRow(int [][] s, int i,int j)\n    {\n        int c;\n        int sum = 15 - s[i][j];\n        for(c=j+1;c\u003c3;c++)\n            sum = sum -s[i][c];\n        for(c=j-1;c\u003e=0;c--)\n            sum = sum - s[i][c];\n        if(sum == 0)\n            return 1;\n        else\n            return 0;\n    }\n     static int checkDia(int [][] s, int i,int j)\n    {\n        int r,c;\n        if(i==j)\n        {\n            int sum = 15 - s[i][j];\n            for(r =i+1 , c=j+1;r\u003c3 \u0026\u0026 c\u003c3;r++ , c++)\n            sum = sum -s[r][c];\n            for(r=i-1 , c=j-1;r\u003e=0 \u0026\u0026 c\u003e=0;r-- , c--)\n                sum = sum - s[r][c];\n            if(sum == 0)\n                return 1;\n            else\n                return 0;    \n        }\n        else\n            return 0;\n    }\n    \n    static int formingMagicSquare(int[][] s) {\n            int i ,j,dif,count=0;\n            for(i=0;i\u003c3;i++)\n            {\n                for(j=0;j\u003c3;j++)\n                {\n                    if(checkRow(s,i,j)==1)\n                        break;\n                    else if(checkCol(s,i,j)==1)\n                        continue;\n                    else if(checkDia(s,i,j)==1)\n                        continue;\n                    else\n                    {\n                        dif = sumRow(s,i,j);\n                        if((s[i][j]+dif)\u003c10 \u0026\u0026 (s[i][j]+dif) \u003e0 )\n                        {\n                            s[i][j] += dif;\n                            count += Math.abs(dif);   \n                        }\n                    }\n                        \n                }\n            }\n            for(i=0;i\u003c3;i++)\n            {\n                for(j=0;j\u003c3;j++)\n                {\n                    System.out.print(s[i][j] + \" \");\n                }\n                System.out.println();\n            }\n            return count;\n\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int[][] s = new int[3][3];\n\n        for (int i = 0; i \u003c 3; i++) {\n            String[] sRowItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int j = 0; j \u003c 3; j++) {\n                int sItem = Integer.parseInt(sRowItems[j]);\n                s[i][j] = sItem;\n            }\n        }\n\n        int result = formingMagicSquare(s);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.095238095238,"language":"java8"},{"contest":"Master","challenge":"Forming a Magic Square","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\nimport java.lang.*;\n\npublic class Solution {\n\n    // Complete the formingMagicSquare function below.\n     static int sumRow(int [][] s, int i,int j)\n    {\n        int c;\n        int sum = 15 - s[i][j];\n        for(c=j+1;c\u003c3;c++)\n            sum = sum -s[i][c];\n        for(c=j-1;c\u003e=0;c--)\n            sum = sum - s[i][c];\n        return sum;\n    }\n    static int checkCol(int [][] s, int i,int j)\n    {\n        int r;\n        int sum = 15 - s[i][j];\n        for(r=i+1;r\u003c3;r++)\n            sum = sum -s[r][j];\n        for(r=i-1;r\u003e=0;r--)\n            sum = sum - s[r][j];\n        if(sum == 0)\n            return 1;\n        else\n            return 0;\n    }\n     static int checkRow(int [][] s, int i,int j)\n    {\n        int c;\n        int sum = 15 - s[i][j];\n        for(c=j+1;c\u003c3;c++)\n            sum = sum -s[i][c];\n        for(c=j-1;c\u003e=0;c--)\n            sum = sum - s[i][c];\n        if(sum == 0)\n            return 1;\n        else\n            return 0;\n    }\n     static int checkDia(int [][] s, int i,int j)\n    {\n        int r,c;\n        if(i==j)\n        {\n            int sum = 15 - s[i][j];\n            for(r =i+1 , c=j+1;r\u003c3 \u0026\u0026 c\u003c3;r++ , c++)\n            sum = sum -s[r][c];\n            for(r=i-1 , c=j-1;r\u003e=0 \u0026\u0026 c\u003e=0;r-- , c--)\n                sum = sum - s[r][c];\n            if(sum == 0)\n                return 1;\n            else\n                return 0;    \n        }\n        else\n            return 0;\n    }\n    \n    static int formingMagicSquare(int[][] s)\n    {\n            int i ,j,dif,count=0;\n            for(i=0;i\u003c3;i++)\n            {\n                for(j=0;j\u003c3;j++)\n                {\n                    if(checkRow(s,i,j)==1)\n                        break;\n                    else if(checkCol(s,i,j)==1)\n                        continue;\n                    else if(checkDia(s,i,j)==1)\n                        continue;\n                    else\n                    {\n                        dif = sumRow(s,i,j);\n                        if((s[i][j]+dif)\u003e9)\n                        {\n                            s[i][j] += 9 - s[i][j];\n                            count += Math.abs(9 - s[i][j]);   \n                        }\n                        else if((s[i][j]+dif) \u003c 1 )\n                        {\n                            s[i][j] += 1 + s[i][j];\n                            count += Math.abs(1 + s[i][j]);\n                        }\n                        else\n                        {\n                            s[i][j] += dif;\n                            count+= Math.abs(dif);\n                        }\n                    }\n                }\n            }\n        for(i=0;i\u003c3;i++)\n            {\n                for(j=0;j\u003c3;j++)\n                {\n                    System.out.print(s[i][j] + \" \");\n                }\n                System.out.println();\n            }\n            return count;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int[][] s = new int[3][3];\n\n        for (int i = 0; i \u003c 3; i++) {\n            String[] sRowItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int j = 0; j \u003c 3; j++) {\n                int sItem = Integer.parseInt(sRowItems[j]);\n                s[i][j] = sItem;\n            }\n        }\n\n        int result = formingMagicSquare(s);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.047619047619,"language":"java8"},{"contest":"Master","challenge":"Forming a Magic Square","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\nimport java.lang.*;\n\npublic class Solution {\n\n    // Complete the formingMagicSquare function below.\n     static int sumRow(int [][] s, int i,int j)\n    {\n        int c;\n        int sum = 15 - s[i][j];\n        for(c=j+1;c\u003c3;c++)\n            sum = sum -s[i][c];\n        for(c=j-1;c\u003e=0;c--)\n            sum = sum - s[i][c];\n        return sum;\n    }\n    static int checkCol(int [][] s, int i,int j)\n    {\n        int r;\n        int sum = 15 - s[i][j];\n        for(r=i+1;r\u003c3;r++)\n            sum = sum -s[r][j];\n        for(r=i-1;r\u003e=0;r--)\n            sum = sum - s[r][j];\n        if(sum == 0)\n            return 1;\n        else\n            return 0;\n    }\n     static int checkRow(int [][] s, int i,int j)\n    {\n        int c;\n        int sum = 15 - s[i][j];\n        for(c=j+1;c\u003c3;c++)\n            sum = sum -s[i][c];\n        for(c=j-1;c\u003e=0;c--)\n            sum = sum - s[i][c];\n        if(sum == 0)\n            return 1;\n        else\n            return 0;\n    }\n     static int checkDia(int [][] s, int i,int j)\n    {\n        int r,c;\n        if(i==j)\n        {\n            int sum = 15 - s[i][j];\n            for(r =i+1 , c=j+1;r\u003c3 \u0026\u0026 c\u003c3;r++ , c++)\n            sum = sum -s[r][c];\n            for(r=i-1 , c=j-1;r\u003e=0 \u0026\u0026 c\u003e=0;r-- , c--)\n                sum = sum - s[r][c];\n            if(sum == 0)\n                return 1;\n            else\n                return 0;    \n        }\n        else\n            return 0;\n    }\n    \n    static int formingMagicSquare(int[][] s)\n    {\n            int i ,j,dif,count=0;\n            for(i=0;i\u003c3;i++)\n            {\n                for(j=0;j\u003c3;j++)\n                {\n                    if(checkRow(s,i,j)==1)\n                        break;\n                    else if(checkCol(s,i,j)==1)\n                        continue;\n                    else if(checkDia(s,i,j)==1)\n                        continue;\n                    else\n                    {\n                        dif = sumRow(s,i,j);\n                        if((s[i][j]+dif)\u003e9)\n                        {\n                            s[i][j] += 9 - s[i][j];\n                            count += Math.abs(9 - s[i][j]);   \n                        }\n                        else if((s[i][j]+dif) \u003c 1 )\n                        {\n                            s[i][j] += 1 + s[i][j];\n                            count += Math.abs(1 + s[i][j]);\n                        }\n                        else\n                        {\n                            s[i][j] += dif;\n                            count+= Math.abs(dif);\n                        }\n                    }\n                }\n            }\n        for(i=0;i\u003c3;i++)\n            {\n                for(j=0;j\u003c3;j++)\n                {\n                    System.out.print(s[i][j] + \" \");\n                }\n                System.out.println();\n            }\n            return count;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int[][] s = new int[3][3];\n\n        for (int i = 0; i \u003c 3; i++) {\n            String[] sRowItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int j = 0; j \u003c 3; j++) {\n                int sItem = Integer.parseInt(sRowItems[j]);\n                s[i][j] = sItem;\n            }\n        }\n\n        int result = formingMagicSquare(s);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.047619047619,"language":"java8"},{"contest":"Master","challenge":"Forming a Magic Square","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\nimport java.lang.*;\n\npublic class Solution {\n\n    // Complete the formingMagicSquare function below.\n    static int formingMagicSquare(int[][] s)\n    {\n            int count = 0,sum=0,min=9999;\n            int[][] check = {{8,1,6,3,5,7,4,9,2},{6,1,8,7,5,3,2,9,4},{4,9,2,3,5,7,8,1,6},{2,9,4,7,5,3,6,1,8},{8,3,4,1,5,9,6,7,2},{4,3,8,9,5,1,2,7,6},{6,7,2,1,5,9,8,3,4},{2,7,6,9,5,1,4,3,8}};\n            int [] test = new int [9];\n            for(int i =0;i\u003c3;i++)\n                for(int j =0;j\u003c3;j++)\n                {\n                    test[count] = s[i][j];\n                    count++;\n                }\n            for(int i=0;i\u003c8;i++)\n            {\n                sum =0 ;\n                for(int j=0;j\u003c9;j++)\n                {\n                    if(check[i][j] != test[j])\n                    {\n                        sum += Math.abs(check[i][j] - test[j]);\n                    }\n                }\n                if(sum\u003cmin)\n                {\n                    min = sum;\n                }\n            }\n            return min;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int[][] s = new int[3][3];\n\n        for (int i = 0; i \u003c 3; i++) {\n            String[] sRowItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int j = 0; j \u003c 3; j++) {\n                int sItem = Integer.parseInt(sRowItems[j]);\n                s[i][j] = sItem;\n            }\n        }\n\n        int result = formingMagicSquare(s);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Arrays: Left Rotation","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the rotLeft function below.\ndef rotLeft(a, d):\n    while d \u003e 0:\n        x = a[0]\n        a.remove(x)\n        a.append(x)\n        d = d - 1\n    return a\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nd = input().split()\n\n    n = int(nd[0])\n\n    d = int(nd[1])\n\n    a = list(map(int, input().rstrip().split()))\n\n    result = rotLeft(a, d)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Arrays: Left Rotation","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the rotLeft function below.\n    static int[] rotLeft(int[] a, int d) {\n        List\u003cInteger\u003e test = new ArrayList\u003cInteger\u003e();\n        for(int i =0;i\u003ca.length;i++)\n        {\n            test.add(a[i]);\n        }\n        while(d\u003e0)\n        {\n            int x = test.get(0);\n            test.remove(new Integer(x));\n            test.add(x);\n            d--;\n        }\n        for(int i =0;i\u003ca.length;i++)\n        {\n            a[i] = test.get(i);\n            //System.out.println(test.get(i));\n        }\n        return a;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        String[] nd = scanner.nextLine().split(\" \");\n\n        int n = Integer.parseInt(nd[0]);\n\n        int d = Integer.parseInt(nd[1]);\n\n        int[] a = new int[n];\n\n        String[] aItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c n; i++) {\n            int aItem = Integer.parseInt(aItems[i]);\n            a[i] = aItem;\n        }\n\n        int[] result = rotLeft(a, d);\n\n        for (int i = 0; i \u003c result.length; i++) {\n            bufferedWriter.write(String.valueOf(result[i]));\n\n            if (i != result.length - 1) {\n                bufferedWriter.write(\" \");\n            }\n        }\n\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":1.0,"language":"java8"},{"contest":"Master","challenge":"New Year Chaos","code":"import java.io.*;\nimport java.lang.Math;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the minimumBribes function below.\n    static void minimumBribes(int[] q) {\n        int sum=0;\n        int [] distance = new int [q.length];\n        for(int i =0;i\u003cdistance.length;i++)\n        {\n            distance[q[i]-1] = Math.abs(q[i] -i-1);\n        }\n        /* for(int i =0;i\u003cdistance.length;i++)\n        {\n            System.out.println(distance[i]);\n        }*/\n        for(int i =0;i\u003cdistance.length;i++)\n        {\n            if(distance[i] \u003e 2)\n            {\n                System.out.println(\"Too chaotic\");\n                return;\n            }\n            else\n                sum += distance[i];\n        }\n        sum = sum/2;\n        System.out.println(sum);\n        return;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int t = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int tItr = 0; tItr \u003c t; tItr++) {\n            int n = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            int[] q = new int[n];\n\n            String[] qItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int i = 0; i \u003c n; i++) {\n                int qItem = Integer.parseInt(qItems[i]);\n                q[i] = qItem;\n            }\n\n            minimumBribes(q);\n        }\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java8"},{"contest":"Master","challenge":"New Year Chaos","code":"import java.io.*;\nimport java.lang.Math;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the minimumBribes function below.\n    static void minimumBribes(int[] q) {\n        int sum=0;\n        int [] distance = new int [q.length];\n        for(int i =0;i\u003cdistance.length;i++)\n        {\n            distance[q[i]-1] = (q[i] -i-1);\n        }\n       /*for(int i =0;i\u003cdistance.length;i++)\n        {\n            System.out.println(distance[i]);\n        }*/\n        for(int i =0;i\u003cdistance.length;i++)\n        {\n            if(distance[i] \u003e 2)\n            {\n                System.out.println(\"Too chaotic\");\n                return;\n            }\n            else\n                sum += Math.abs(distance[i]);\n        }\n        sum = sum/2;\n        System.out.println(sum);\n        return;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int t = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int tItr = 0; tItr \u003c t; tItr++) {\n            int n = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            int[] q = new int[n];\n\n            String[] qItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int i = 0; i \u003c n; i++) {\n                int qItem = Integer.parseInt(qItems[i]);\n                q[i] = qItem;\n            }\n\n            minimumBribes(q);\n        }\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java8"},{"contest":"Master","challenge":"New Year Chaos","code":"import java.io.*;\nimport java.lang.Math;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n    public static int checkMin(int [] a,int i)\n    {\n        int count = 0;\n        for(int x = i+1;x\u003ca.length;x++)\n        {\n            if(a[x]\u003ca[i])\n                count++;\n        }\n        return count;\n    }\n    // Complete the minimumBribes function below.\n    static void minimumBribes(int[] q) {\n        int sum=0;\n        int [] distance = new int [q.length];\n        for(int i = 0;i\u003cq.length;i++)\n        {   \n            int bribe = checkMin(q,i);\n            if(bribe \u003e 2)\n            {\n                System.out.println(\"Too chaotic\");\n                return;\n            }\n            else\n                sum += bribe;\n        }\n        System.out.println(sum);\n        return;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int t = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int tItr = 0; tItr \u003c t; tItr++) {\n            int n = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            int[] q = new int[n];\n\n            String[] qItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int i = 0; i \u003c n; i++) {\n                int qItem = Integer.parseInt(qItems[i]);\n                q[i] = qItem;\n            }\n\n            minimumBribes(q);\n        }\n\n        scanner.close();\n    }\n}\n","score":0.55,"language":"java8"},{"contest":"Master","challenge":"New Year Chaos","code":"import java.io.*;\nimport java.lang.Math;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n    public static int checkMin(int [] a,int i)\n    {\n        int count = 0;\n        for(int x = i+1;x\u003ca.length;x++)\n        {\n            if(a[x]\u003ca[i])\n                count++;\n        }\n        return count;\n    }\n    // Complete the minimumBribes function below.\n    static void minimumBribes(int[] q) {\n        int sum=0;\n        int [] distance = new int [q.length];\n        for(int i = 0;i\u003cq.length;i++)\n        {   \n            int bribe = checkMin(q,i);\n            if(bribe \u003e 2)\n            {\n                System.out.println(\"Too chaotic\");\n                return;\n            }\n            else\n                sum += bribe;\n        }\n        System.out.println(sum);\n        return;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int t = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int tItr = 0; tItr \u003c t; tItr++) {\n            int n = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            int[] q = new int[n];\n\n            String[] qItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int i = 0; i \u003c n; i++) {\n                int qItem = Integer.parseInt(qItems[i]);\n                q[i] = qItem;\n            }\n\n            minimumBribes(q);\n        }\n\n        scanner.close();\n    }\n}\n","score":0.55,"language":"java8"},{"contest":"Master","challenge":"New Year Chaos","code":"import java.io.*;\nimport java.lang.Math;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n    public static int checkMin(int [] a,int i)\n    {\n        int count = 0;\n        for(int x = i+1;x\u003ca.length;x++)\n        {\n            if(a[x]\u003ca[i])\n                count++;\n        }\n        return count;\n    }\n    // Complete the minimumBribes function below.\n    static void minimumBribes(int[] q) {\n        int sum=0;\n        int [] distance = new int [q.length];\n        for(int i =0;i\u003cdistance.length;i++)\n        {\n            distance[q[i]-1] = (q[i] -i-1);\n        }\n        \n        for(int i = 0;i\u003cq.length;i++)\n        {   \n            if(distances[q[i]]!=0)\n            {   \n                int bribe = checkMin(q,i);\n                if(bribe \u003e 2)\n                {\n                    System.out.println(\"Too chaotic\");\n                    return;\n                }\n                else\n                    sum += bribe;\n            }\n        }\n        System.out.println(sum);\n        return;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int t = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int tItr = 0; tItr \u003c t; tItr++) {\n            int n = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            int[] q = new int[n];\n\n            String[] qItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int i = 0; i \u003c n; i++) {\n                int qItem = Integer.parseInt(qItems[i]);\n                q[i] = qItem;\n            }\n\n            minimumBribes(q);\n        }\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java8"},{"contest":"Master","challenge":"New Year Chaos","code":"import java.io.*;\nimport java.lang.Math;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n    public static int checkMin(int [] a,int i)\n    {\n        int count = 0;\n        for(int x = i+1;x\u003ca.length;x++)\n        {\n            if(a[x]\u003ca[i])\n                count++;\n        }\n        return count;\n    }\n    // Complete the minimumBribes function below.\n    static void minimumBribes(int[] q) {\n        int sum=0;\n        int [] distance = new int [q.length];\n        for(int i =0;i\u003cdistance.length;i++)\n        {\n            distance[q[i]-1] = (q[i] -i-1);\n        }\n        \n        for(int i = 0;i\u003cq.length;i++)\n        {   \n            if(distance[q[i]-1]!=0)\n            {   \n                int bribe = checkMin(q,i);\n                if(bribe \u003e 2)\n                {\n                    System.out.println(\"Too chaotic\");\n                    return;\n                }\n                else\n                    sum += bribe;\n            }\n        }\n        System.out.println(sum);\n        return;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int t = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int tItr = 0; tItr \u003c t; tItr++) {\n            int n = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            int[] q = new int[n];\n\n            String[] qItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int i = 0; i \u003c n; i++) {\n                int qItem = Integer.parseInt(qItems[i]);\n                q[i] = qItem;\n            }\n\n            minimumBribes(q);\n        }\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java8"},{"contest":"Master","challenge":"New Year Chaos","code":"import java.io.*;\nimport java.lang.Math;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n    // Complete the minimumBribes function below.\n    static void minimumBribes(int[] q) {\n        int sum=0;\n        int [] distance = new int [q.length];\n        for(int i =0;i\u003cdistance.length;i++)\n        {\n            distance[q[i]-1] = (q[i] -i-1);\n        }\n        for(int i =0;i\u003cq.length;i++)\n        {\n            if(distance[i]!=0)\n            {\n                \n            }\n        }\n        System.out.println(sum);\n        return;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int t = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int tItr = 0; tItr \u003c t; tItr++) {\n            int n = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            int[] q = new int[n];\n\n            String[] qItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int i = 0; i \u003c n; i++) {\n                int qItem = Integer.parseInt(qItems[i]);\n                q[i] = qItem;\n            }\n\n            minimumBribes(q);\n        }\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java8"},{"contest":"Master","challenge":"Array Manipulation","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the arrayManipulation function below.\n    static long arrayManipulation(int n, int[][] queries) {\n\n\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        String[] nm = scanner.nextLine().split(\" \");\n\n        int n = Integer.parseInt(nm[0]);\n\n        int m = Integer.parseInt(nm[1]);\n\n        int[][] queries = new int[m][3];\n\n        for (int i = 0; i \u003c m; i++) {\n            String[] queriesRowItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int j = 0; j \u003c 3; j++) {\n                int queriesItem = Integer.parseInt(queriesRowItems[j]);\n                queries[i][j] = queriesItem;\n            }\n        }\n\n        long result = arrayManipulation(n, queries);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java8"},{"contest":"Master","challenge":"New Year Chaos","code":"import java.io.*;\nimport java.lang.Math;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n    public static int checkMin(int [] a,int i)\n    {\n        int count = 0;\n        for(int x = i+1;x\u003ca.length;x++)\n        {\n            if(a[x]\u003ca[i])\n                count++;\n        }\n        return count;\n    }\n    // Complete the minimumBribes function below.\n    static void minimumBribes(int[] q) {\n        int sum=0;\n        int [] distance = new int [q.length];\n        for(int i = 0;i\u003cq.length;i++)\n        {   \n            int bribe = checkMin(q,i);\n            if(bribe \u003e 2)\n            {\n                System.out.println(\"Too chaotic\");\n                return;\n            }\n            else\n                sum += bribe;\n        }\n        System.out.println(sum);\n        return;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int t = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int tItr = 0; tItr \u003c t; tItr++) {\n            int n = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            int[] q = new int[n];\n\n            String[] qItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int i = 0; i \u003c n; i++) {\n                int qItem = Integer.parseInt(qItems[i]);\n                q[i] = qItem;\n            }\n\n            minimumBribes(q);\n        }\n\n        scanner.close();\n    }\n}\n","score":0.55,"language":"java8"},{"contest":"Master","challenge":"New Year Chaos","code":"import java.io.*;\nimport java.lang.Math;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n    public static int checkMin(int [] a,int i)\n    {\n        int count = 0;\n        for(int x = i+1;x\u003ca.length;x++)\n        {\n            if(a[x]\u003ca[i])\n                count++;\n        }\n        return count;\n    }\n    // Complete the minimumBribes function below.\n    static void minimumBribes(int[] q) {\n        int sum=0;\n        int [] distance = new int [q.length];\n        for(int i = 0;i\u003cq.length;i++)\n        {   \n            int count = 0;\n            for(int x = i+1;x\u003cq.length;x++)\n            {\n                if(count\u003e2)\n                {\n                    System.out.println(\"Too chaotic\");\n                    return;\n                }\n                else if(q[x]\u003cq[i])\n                    count++;\n            }\n            if(count\u003e2)\n            {\n                System.out.println(\"Too chaotic\");\n                return;\n            }\n            else\n                sum += count;\n        }\n        System.out.println(sum);\n        return;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int t = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int tItr = 0; tItr \u003c t; tItr++) {\n            int n = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            int[] q = new int[n];\n\n            String[] qItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int i = 0; i \u003c n; i++) {\n                int qItem = Integer.parseInt(qItems[i]);\n                q[i] = qItem;\n            }\n\n            minimumBribes(q);\n        }\n\n        scanner.close();\n    }\n}\n","score":0.55,"language":"java8"},{"contest":"Master","challenge":"New Year Chaos","code":"import java.io.*;\nimport java.lang.Math;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n    public static int checkMin(int [] a,int i)\n    {\n        int count = 0;\n        for(int x = i+1;x\u003ca.length;x++)\n        {\n            if(a[x]\u003ca[i])\n                count++;\n        }\n        return count;\n    }\n    // Complete the minimumBribes function below.\n    static void minimumBribes(int[] q) {\n        int sum=0;\n        int [] distance = new int [q.length];\n        for(int i = 0;i\u003cq.length;i++)\n        {   \n            if(q[i]!= i+1)\n            {   int bribe = checkMin(q,i);\n                if(bribe \u003e 2)\n                {\n                    System.out.println(\"Too chaotic\");\n                    return;\n                }\n                else\n                    sum += bribe;\n            }\n        }\n        System.out.println(sum);\n        return;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int t = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int tItr = 0; tItr \u003c t; tItr++) {\n            int n = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            int[] q = new int[n];\n\n            String[] qItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int i = 0; i \u003c n; i++) {\n                int qItem = Integer.parseInt(qItems[i]);\n                q[i] = qItem;\n            }\n\n            minimumBribes(q);\n        }\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java8"},{"contest":"Master","challenge":"New Year Chaos","code":"import java.io.*;\nimport java.lang.Math;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n    public static int checkMin(int [] a,int i)\n    {\n        int count = 0;\n        for(int x = i+1;x\u003ca.length;x++)\n        {\n            if(a[x]\u003ca[i])\n                count++;\n        }\n        return count;\n    }\n    // Complete the minimumBribes function below.\n    static void minimumBribes(int[] q) {\n        int sum=0;\n        int check=0;\n        int [] distance = new int [q.length];\n        for(int i = 0;i\u003cq.length;i++)\n        {   \n            if(q[i]!= i+1 \u0026\u0026 check==0)\n            {   \n                check=1;\n                int bribe = checkMin(q,i);\n                if(bribe \u003e 2)\n                {\n                    System.out.println(\"Too chaotic\");\n                    return;\n                }\n                else\n                {\n                    sum += bribe;\n                    check =0;\n                }\n                    \n             \n            }\n        }\n        System.out.println(sum);\n        return;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int t = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int tItr = 0; tItr \u003c t; tItr++) {\n            int n = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            int[] q = new int[n];\n\n            String[] qItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int i = 0; i \u003c n; i++) {\n                int qItem = Integer.parseInt(qItems[i]);\n                q[i] = qItem;\n            }\n\n            minimumBribes(q);\n        }\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java8"},{"contest":"Master","challenge":"New Year Chaos","code":"import java.io.*;\nimport java.lang.Math;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n    public static int checkMin(int [] a,int i)\n    {\n        int count = 0;\n        for(int x = i+1;x\u003ca.length;x++)\n        {\n            if(a[x]\u003ca[i])\n                count++;\n        }\n        return count;\n    }\n    // Complete the minimumBribes function below.\n    static void minimumBribes(int[] q) {\n        int sum=0;\n        int [] distance = new int [q.length];\n        for(int i = 0;i\u003cq.length;i++)\n        {   \n            \n                int bribe = checkMin(q,i);\n                if(bribe \u003e 2)\n                {\n                    System.out.println(\"Too chaotic\");\n                    return;\n                }\n                else\n                {\n                    sum += bribe;\n        \n                }\n                    \n             \n            \n        }\n        System.out.println(sum);\n        return;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int t = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int tItr = 0; tItr \u003c t; tItr++) {\n            int n = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            int[] q = new int[n];\n\n            String[] qItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int i = 0; i \u003c n; i++) {\n                int qItem = Integer.parseInt(qItems[i]);\n                q[i] = qItem;\n            }\n\n            minimumBribes(q);\n        }\n\n        scanner.close();\n    }\n}\n","score":0.55,"language":"java8"},{"contest":"Master","challenge":"New Year Chaos","code":"import java.io.*;\nimport java.lang.Math;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n   public static int Merge(int[] a, int i, int mid ,int j)\n    {\n        int [] temp = new int[j-i+1];\n        int count = 0;\n        int left = i;\n        int right = mid +1;\n        int bribes = 0,dif;\n        while(left\u003c=mid \u0026\u0026 right\u003c=j)\n        {\n            if(a[left] \u003c= a[right])\n                temp[count++] = a[left++];\n            else\n            {\n                temp[count++] = a[right++];\n                dif = mid-left+1;\n                bribes = bribes + dif;\n            }\n        }\n        while(left\u003c=mid)\n            temp[count++] = a[left++];\n        while(right\u003c=j)\n            temp[count++] = a[right++];\n        \n        for(int x = 0;x\u003ctemp.length; x++)\n        {\n            a[i++] = temp[x];\n        }\n        return bribes;\n        \n    }\n    public static int MergeSort(int [] a,int i,int j)\n    {\n        int bribes =0,dif;\n        if(i\u003cj)\n        {\n            int mid = (i+j)/2;\n            bribes = MergeSort(a,i,mid);\n            bribes+= MergeSort(a,mid+1,j);\n            bribes+= Merge(a,i,mid,j);\n        }\n        return bribes;\n        \n    }\n    // Complete the minimumBribes function below.\n    static void minimumBribes(int[] q) {\n        int [] distance = new int[q.length];\n        for(int i =0;i\u003cdistance.length;i++)\n        {\n            distance[q[i]-1] = (q[i] -i-1);\n        }\n        for(int i =0;i\u003cdistance.length;i++)\n        {\n            if(distance[i] \u003e 2)\n            {\n                System.out.println(\"Too chaotic\");\n                return;\n            }\n        }\n        int bribe = MergeSort(q,0,q.length-1);\n        System.out.println(bribe);\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int t = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int tItr = 0; tItr \u003c t; tItr++) {\n            int n = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            int[] q = new int[n];\n\n            String[] qItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int i = 0; i \u003c n; i++) {\n                int qItem = Integer.parseInt(qItems[i]);\n                q[i] = qItem;\n            }\n\n            minimumBribes(q);\n        }\n\n        scanner.close();\n    }\n}\n","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Array Manipulation","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the arrayManipulation function below.\n    static long arrayManipulation(int n, int[][] queries,int m) {\n        long l = 0;\n        long [] array = new long[n];\n        for(int i = 0;i\u003cm;i++)\n        {\n            array[queries[i][0]-1] += queries[i][2];\n            if(queries[i][1] \u003c n)\n                array[queries[i][1]] -= queries[i][2];\n        }\n        l =array[0] ;\n        for(int i =1;i\u003cn;i++)\n        {\n            array[i] += array[i-1];\n            if(array[i] \u003e l)\n                l = array[i];\n        }\n        \n        return l;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        String[] nm = scanner.nextLine().split(\" \");\n\n        int n = Integer.parseInt(nm[0]);\n\n        int m = Integer.parseInt(nm[1]);\n\n        int[][] queries = new int[m][3];\n\n        for (int i = 0; i \u003c m; i++) {\n            String[] queriesRowItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int j = 0; j \u003c 3; j++) {\n                int queriesItem = Integer.parseInt(queriesRowItems[j]);\n                queries[i][j] = queriesItem;\n            }\n        }\n\n        long result = arrayManipulation(n, queries,m);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Minimum Swaps 2","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\nimport org.apache.commons.lang3.ArrayUtils;\n\npublic class Solution {\n\n    // Complete the minimumSwaps function below.\n    static int minimumSwaps(int[] arr)\n    {\n        int swap =0,start,next,count=0,current;\n        int [] sortedArr = new int[arr.length];\n        int [] visit = new int[arr.length];\n        sortedArr = arr.clone();\n        Arrays.sort(sortedArr);\n        for(int i =0;i\u003carr.length;i++)\n        {\n            \n            if(visit[i] == 0)\n            {\n                count =0;\n                start = arr[i];\n                current = start;\n                visit[ArrayUtils.indexOf(sortedArr,current)] = 1;\n                while(current!=start || count==0)\n                {\n                    //System.out.println(current);\n                    \n                    next = ArrayUtils.indexOf(sortedArr,current);\n                    visit[next] =1;\n                    current = arr[next];\n                    count++;\n                    //System.out.println(count);\n                }\n                swap+= count-1;\n            }\n            \n        }\n    \n        return swap;\n\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        int[] arr = new int[n];\n\n        String[] arrItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c n; i++) {\n            int arrItem = Integer.parseInt(arrItems[i]);\n            arr[i] = arrItem;\n        }\n\n        int res = minimumSwaps(arr);\n\n        bufferedWriter.write(String.valueOf(res));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.8,"language":"java8"},{"contest":"Master","challenge":"Minimum Swaps 2","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.Collections;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\nimport org.apache.commons.lang3.ArrayUtils;\n\npublic class Solution {\n\n    // Complete the minimumSwaps function below.\n    static int minimumSwaps(Integer[] arr)\n    {\n        int swap =0,start,next,count=0,current;\n        int [] sortedArr = new int[arr.length];\n        int [] visit = new int[arr.length];\n        //sortedArr = arr.clone();\n        for(int i =0;i\u003carr.length;i++)\n        {\n            sortedArr[i] = arr[i];\n        }\n        Arrays.sort(sortedArr);\n        int [] position = new int [Collections.max(Arrays.asList(arr))];\n        for(int i =0;i\u003carr.length;i++)\n        {\n            position[arr[i]-1] = Arrays.binarySearch(sortedArr,arr[i]);\n        }\n        for(int i =0;i\u003carr.length;i++)\n        {\n            \n            if(visit[i] == 0)\n            {\n                count =0;\n                start = arr[i];\n                current = start;\n                visit[position[current-1]] = 1;\n                while(current!=start || count==0)\n                {\n                    //System.out.println(current);\n                    \n                    next = position[current-1];\n                    visit[next] =1;\n                    current = arr[next];\n                    count++;\n                    //System.out.println(count);\n                }\n                swap+= count-1;\n            }\n            \n        }\n    \n        return swap;\n\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        Integer[] arr = new Integer[n];\n\n        String[] arrItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c n; i++) {\n            int arrItem = Integer.parseInt(arrItems[i]);\n            arr[i] = arrItem;\n        }\n\n        int res = minimumSwaps(arr);\n\n        bufferedWriter.write(String.valueOf(res));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":1.0,"language":"java8"},{"contest":"Master","challenge":"2D Array - DS","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the hourglassSum function below.\n    static int calcSum(int i,int j,int[][]arr)\n    {\n        int sum = 0;\n        sum = arr[i][j] + arr[i][j+1] + arr[i][j+2] + arr[i+1][j+1] + arr[i+2][j] + arr[i+2][j+1] +arr[i+2][j+2]; \n        return sum;\n    }\n    static int hourglassSum(int[][] arr) {\n        int max = 0,maxi=0,maxj=0;\n        for(int i = 0;i\u003c4;i++)\n        {\n            for(int j = 0;j\u003c4;j++)\n            {\n                int sum = calcSum(i,j,arr);\n                if(max\u003csum)\n                {\n                    max = sum;\n                }\n                    \n            }\n        }\n        return max;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int[][] arr = new int[6][6];\n\n        for (int i = 0; i \u003c 6; i++) {\n            String[] arrRowItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int j = 0; j \u003c 6; j++) {\n                int arrItem = Integer.parseInt(arrRowItems[j]);\n                arr[i][j] = arrItem;\n            }\n        }\n\n        int result = hourglassSum(arr);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.666666666667,"language":"java8"},{"contest":"Master","challenge":"2D Array - DS","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the hourglassSum function below.\n    static int calcSum(int i,int j,int[][]arr)\n    {\n        int sum = -99999999;\n        sum = arr[i][j] + arr[i][j+1] + arr[i][j+2] + arr[i+1][j+1] + arr[i+2][j] + arr[i+2][j+1] +arr[i+2][j+2]; \n        return sum;\n    }\n    static int hourglassSum(int[][] arr) {\n        int max = 0,maxi=0,maxj=0;\n        for(int i = 0;i\u003c4;i++)\n        {\n            for(int j = 0;j\u003c4;j++)\n            {\n                int sum = calcSum(i,j,arr);\n                if(max\u003csum)\n                {\n                    max = sum;\n                }\n                    \n            }\n        }\n        return max;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int[][] arr = new int[6][6];\n\n        for (int i = 0; i \u003c 6; i++) {\n            String[] arrRowItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int j = 0; j \u003c 6; j++) {\n                int arrItem = Integer.parseInt(arrRowItems[j]);\n                arr[i][j] = arrItem;\n            }\n        }\n\n        int result = hourglassSum(arr);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.666666666667,"language":"java8"},{"contest":"Master","challenge":"2D Array - DS","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the hourglassSum function below.\n    static int calcSum(int i,int j,int[][]arr)\n    {\n        int sum =0;\n        sum = arr[i][j] + arr[i][j+1] + arr[i][j+2] + arr[i+1][j+1] + arr[i+2][j] + arr[i+2][j+1] +arr[i+2][j+2]; \n        return sum;\n    }\n    static int hourglassSum(int[][] arr) {\n        int max = -99999999;\n        for(int i = 0;i\u003c4;i++)\n        {\n            for(int j = 0;j\u003c4;j++)\n            {\n                int sum = calcSum(i,j,arr);\n                if(max\u003csum)\n                {\n                    max = sum;\n                }\n                    \n            }\n        }\n        return max;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int[][] arr = new int[6][6];\n\n        for (int i = 0; i \u003c 6; i++) {\n            String[] arrRowItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int j = 0; j \u003c 6; j++) {\n                int arrItem = Integer.parseInt(arrRowItems[j]);\n                arr[i][j] = arrItem;\n            }\n        }\n\n        int result = hourglassSum(arr);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Palindrome Index","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the palindromeIndex function below.\n    static int checkPalindrome(String s)\n    {\n        StringBuffer sb  = new StringBuffer(s);\n        String a = sb.reverse().toString();\n        if(a.equals(s))\n            return 1;\n        else\n            return 0;\n    }\n    \n    static int palindromeIndex(String s) {\n        if(checkPalindrome(s)==1)\n            return -1;\n        else\n        {\n            for(int i =0;i\u003cs.length();i++)\n            {\n                StringBuilder sB = new StringBuilder(s);\n                sB.deleteCharAt(i);\n                String test = sB.toString();\n                if(checkPalindrome(test)==1)\n                    return i;\n            }\n            return -1;\n        }\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int q = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int qItr = 0; qItr \u003c q; qItr++) {\n            String s = scanner.nextLine();\n\n            int result = palindromeIndex(s);\n\n            bufferedWriter.write(String.valueOf(result));\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.5238,"language":"java8"},{"contest":"Master","challenge":"Palindrome Index","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the palindromeIndex function below.\n    static int checkPalindrome(String s)\n    {\n        char [] testArray = s.toCharArray();\n        int low =0;\n        int high = s.length()-1;\n        while(low\u003chigh)\n        {\n            if(testArray[low]!=testArray[high])\n                return 0;\n            else\n            {\n                low++;\n                high--;\n            }\n        }\n        return 1;\n    }\n    \n    static int palindromeIndex(String s) {\n        if(checkPalindrome(s)==1)\n            return -1;\n        else\n        {\n            for(int i =0;i\u003cs.length();i++)\n            {\n                StringBuilder sB = new StringBuilder(s);\n                sB.deleteCharAt(i);\n                String test = sB.toString();\n                if(checkPalindrome(test)==1)\n                    return i;\n            }\n            return -1;\n        }\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int q = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int qItr = 0; qItr \u003c q; qItr++) {\n            String s = scanner.nextLine();\n\n            int result = palindromeIndex(s);\n\n            bufferedWriter.write(String.valueOf(result));\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.5238,"language":"java8"},{"contest":"Master","challenge":"Palindrome Index","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the palindromeIndex function below.\n    static int checkPalindrome(String s)\n    {\n        char [] testArray = s.toCharArray();\n        int low =0;\n        int high = s.length()-1;\n        while(low\u003chigh)\n        {\n            if(testArray[low]!=testArray[high])\n                return 0;\n            else\n            {\n                low++;\n                high--;\n            }\n        }\n        return 1;\n    }\n    static int countPalindrome(char [] test,int low,int high, int delete,int ans)\n    {\n        \n        while(low\u003chigh)\n        {\n            if(test[low]!=test[high])\n            {\n                if(delete\u003c2)\n                {\n                    delete++;\n                    ans = low;            \n                    int t = countPalindrome(test,++low,high,delete,ans);\n                    if(t==-1)\n                    {\n                        ans = high;\n                        t = countPalindrome(test,low,--high,delete,ans);\n                    }   \n                    if(t==-1)\n                        return -1;\n                }\n                else\n                    return -1;\n            }\n            else\n            {\n                low++;\n                high--;\n            }\n        }\n        return ans;\n    }\n    \n    static int palindromeIndex(String s) {\n        if(checkPalindrome(s)==1)\n            return -1;\n        else\n        {\n            char [] test = s.toCharArray();\n            return countPalindrome(test,0,test.length-1,0,0);\n        }\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int q = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int qItr = 0; qItr \u003c q; qItr++) {\n            String s = scanner.nextLine();\n\n            int result = palindromeIndex(s);\n\n            bufferedWriter.write(String.valueOf(result));\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.619,"language":"java8"},{"contest":"Master","challenge":"Palindrome Index","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the palindromeIndex function below.\n    static int checkPalindrome(String s)\n    {\n        char [] testArray = s.toCharArray();\n        int low =0;\n        int high = s.length()-1;\n        while(low\u003chigh)\n        {\n            if(testArray[low]!=testArray[high])\n                return 0;\n            else\n            {\n                low++;\n                high--;\n            }\n        }\n        return 1;\n    }\n    static int countPalindrome(char [] test,int low,int high, int delete,int ans)\n    {\n        \n        while(low\u003chigh)\n        {\n            if(test[low]!=test[high])\n            {\n                if(delete\u003c2)\n                {\n                    delete++;\n                    ans = low;            \n                    int t = countPalindrome(test,++low,high,delete,ans);\n                    if(t==-1)\n                    {\n                        ans = high;\n                        t = countPalindrome(test,low,--high,delete,ans);\n                    }   \n                    if(t==-1)\n                        return -1;\n                }\n                else\n                    return -1;\n            }\n            else\n            {\n                low++;\n                high--;\n            }\n        }\n        return ans;\n    }\n    \n    static int palindromeIndex(String s) {\n        if(checkPalindrome(s)==1)\n            return -1;\n        else\n        {\n            char [] test = s.toCharArray();\n            return countPalindrome(test,0,test.length-1,0,0);\n        }\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int q = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int qItr = 0; qItr \u003c q; qItr++) {\n            String s = scanner.nextLine();\n\n            int result = palindromeIndex(s);\n\n            bufferedWriter.write(String.valueOf(result));\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.619,"language":"java8"},{"contest":"Master","challenge":"Palindrome Index","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the palindromeIndex function below.\n    static int checkPalindrome(String s)\n    {\n        char [] testArray = s.toCharArray();\n        int low =0;\n        int high = s.length()-1;\n        while(low\u003chigh)\n        {\n            if(testArray[low]!=testArray[high])\n                return 0;\n            else\n            {\n                low++;\n                high--;\n            }\n        }\n        return 1;\n    }\n    static int countPalindrome(char [] test,int low,int high, int delete,int ans)\n    {\n        while(low\u003chigh)\n        {\n            if(test[low]!=test[high])\n            {\n                if(delete\u003c2)\n                {\n                    delete++;\n                    ans = low;        \n                    int t = countPalindrome(test,++low,high,delete,ans);\n                    if(t==-1)\n                    {\n                        ans = high;\n                       low--;\n                        \n                        t = countPalindrome(test,low,--high,delete,ans);\n                        \n                    }   \n                    if(t==-1)\n                    {\n                        high++;\n                        return -1;   \n                    }\n                }\n                else\n                    return -1;\n            }\n            else\n            {\n                low++;\n                high--;\n            }\n        }\n        return ans;\n    }\n    \n    static int palindromeIndex(String s) {\n        if(checkPalindrome(s)==1)\n            return -1;\n        else\n        {\n            char [] test = s.toCharArray();\n            return countPalindrome(test,0,test.length-1,0,0);\n        }\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int q = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int qItr = 0; qItr \u003c q; qItr++) {\n            String s = scanner.nextLine();\n\n            int result = palindromeIndex(s);\n\n            bufferedWriter.write(String.valueOf(result));\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Insert a Node at the Tail of a Linked List","code":"    // Complete the insertNodeAtTail function below.\n\n    /*\n     * For your reference:\n     *\n     * SinglyLinkedListNode {\n     *     int data;\n     *     SinglyLinkedListNode next;\n     * }\n     *\n     */\n    static SinglyLinkedListNode insertNodeAtTail(SinglyLinkedListNode head, int data) {\n        SinglyLinkedListNode temp = new SinglyLinkedListNode(data);\n        if(head == null)\n        {\n            head = temp;\n            return head;\n        }\n        else\n        {\n            SinglyLinkedListNode current = head;\n            while(current.next != null)\n                current = current.next;\n            current.next = temp;\n            return head;\n        }\n       \n    }","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Insert a node at the head of a linked list","code":"    // Complete the insertNodeAtHead function below.\n\n    /*\n     * For your reference:\n     *\n     * SinglyLinkedListNode {\n     *     int data;\n     *     SinglyLinkedListNode next;\n     * }\n     *\n     */\n    static SinglyLinkedListNode insertNodeAtHead(SinglyLinkedListNode llist, int data) {\n        SinglyLinkedListNode temp = new SinglyLinkedListNode(data);\n        temp.next = llist;\n        return temp;\n\n    }","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Insert a node at a specific position in a linked list","code":"    // Complete the insertNodeAtPosition function below.\n\n    /*\n     * For your reference:\n     *\n     * SinglyLinkedListNode {\n     *     int data;\n     *     SinglyLinkedListNode next;\n     * }\n     *\n     */\n    static SinglyLinkedListNode insertNodeAtPosition(SinglyLinkedListNode head, int data, int position) {\n            SinglyLinkedListNode temp = new SinglyLinkedListNode(data);\n            SinglyLinkedListNode current = head;\n            for(int i = 0;i\u003cposition-1;i++)\n                current = current.next;\n            temp.next = current.next;\n            current.next = temp;\n            return head;\n\n    }","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Delete a Node","code":"    // Complete the deleteNode function below.\n\n    /*\n     * For your reference:\n     *\n     * SinglyLinkedListNode {\n     *     int data;\n     *     SinglyLinkedListNode next;\n     * }\n     *\n     */\n    static SinglyLinkedListNode deleteNode(SinglyLinkedListNode head, int position)\n    {\n        SinglyLinkedListNode current = head;\n        for(int i = 0 ; i\u003c position-1; i++)\n            current = current.next;\n        current.next = current.next.next;\n        return head;\n    }","score":0.857142857143,"language":"java8"},{"contest":"Master","challenge":"Delete a Node","code":"    // Complete the deleteNode function below.\n\n    /*\n     * For your reference:\n     *\n     * SinglyLinkedListNode {\n     *     int data;\n     *     SinglyLinkedListNode next;\n     * }\n     *\n     */\n    static SinglyLinkedListNode deleteNode(SinglyLinkedListNode head, int position)\n    {\n        SinglyLinkedListNode current = head;\n        if(position == 0)\n            head = current.next;\n        else\n        {\n            for(int i = 0 ; i\u003c position-1; i++)\n                current = current.next;\n            current.next = current.next.next;\n        }\n        return head;\n    }","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Print in Reverse","code":"    // Complete the reversePrint function below.\n\n    /*\n     * For your reference:\n     *\n     * SinglyLinkedListNode {\n     *     int data;\n     *     SinglyLinkedListNode next;\n     * }\n     *\n     */\n    static void reversePrint(SinglyLinkedListNode head) {\n        int count = 0;\n        SinglyLinkedListNode current = head;\n        while(current.next != null)\n        {    \n            current = current.next;\n            count++;\n        }\n        count++;\n        current = head;\n        int [] arr = new int [count];\n        for(int i = 0;i\u003ccount;i++)\n        {\n            arr[count - i-1] = current.data;\n            current = current.next; \n        }\n        for(int i = 0;i\u003ccount;i++)\n            System.out.println(arr[i]);\n\n    }","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Print in Reverse","code":"    // Complete the reversePrint function below.\n\n    /*\n     * For your reference:\n     *\n     * SinglyLinkedListNode {\n     *     int data;\n     *     SinglyLinkedListNode next;\n     * }\n     *\n     */\n    static void reversePrint(SinglyLinkedListNode head) {\n        if(head.next == null)\n            System.out.println(head.data);\n        else\n        {\n            reversePrint(head.next);\n            System.out.println(head.data);\n        }\n\n    }","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Reverse a linked list","code":"    // Complete the reverse function below.\n\n    /*\n     * For your reference:\n     *\n     * SinglyLinkedListNode {\n     *     int data;\n     *     SinglyLinkedListNode next;\n     * }\n     *\n     */\n    static SinglyLinkedListNode reverse(SinglyLinkedListNode head) \n    {\n        SinglyLinkedListNode current = head;\n        SinglyLinkedListNode prev = null;\n        SinglyLinkedListNode next = null;\n        while(current != null)\n        {\n            next = current.next;\n            current.next = prev;\n            prev = current;\n            current = next;\n        }\n        return prev;\n    }","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Compare two linked lists","code":"    // Complete the compareLists function below.\n\n    /*\n     * For your reference:\n     *\n     * SinglyLinkedListNode {\n     *     int data;\n     *     SinglyLinkedListNode next;\n     * }\n     *\n     */\n    static boolean compareLists(SinglyLinkedListNode head1, SinglyLinkedListNode head2) {\n        while(head1 == null || head2 == null)\n        {            \n            if(head1.data!= head2.data)\n                return false;\n            head1 = head1.next;\n            head2 = head2.next;\n        }\n        if(head1!= null || head2!=null)\n            return false;\n        else\n            return true;\n    }","score":0.0,"language":"java8"},{"contest":"Master","challenge":"Compare two linked lists","code":"    // Complete the compareLists function below.\n\n    /*\n     * For your reference:\n     *\n     * SinglyLinkedListNode {\n     *     int data;\n     *     SinglyLinkedListNode next;\n     * }\n     *\n     */\n    static boolean compareLists(SinglyLinkedListNode h1, SinglyLinkedListNode h2) {\n        SinglyLinkedListNode head1 = h1;\n        SinglyLinkedListNode head2 = h2;\n        while(head1 != null || head2 != null)\n        {            \n            if(head1.data!= head2.data)\n                return false;\n            head1 = head1.next;\n            head2 = head2.next;\n        }\n        if(head1!= null || head2!=null)\n            return false;\n        else\n            return true;\n    }","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Almost Sorted","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the almostSorted function below.\n    static void almostSorted(int[] arr) {\n        int i,length,stretch = 0,start = -1,finish = 0;\n        length = arr.length - 1; \n        int [] testArray = arr.clone();\n        Arrays.sort(testArray);\n        if(Arrays.equals(arr,testArray))\n        {\n            System.out.println(\"yes\");\n            return;\n        }\n        else\n        {\n            for(i = 0; i \u003c= length; i++ )\n            {\n                if(testArray[i] != arr[i])\n                {\n                \n                    if(finish ==1)\n                    {\n                        System.out.println(\"no\");\n                        return;\n                    }\n                    else if(stretch == 0)\n                    {\n                        start = i;\n                        stretch++;\n                    }\n                    else if(stretch \u003e 0 \u0026\u0026 finish == 0)\n                    {\n                        stretch++;\n                       \n                    }\n                        \n                }\n                else if(testArray[i] == arr[i] \u0026\u0026 stretch\u003e0)\n                {\n                    finish = 1;\n                }\n            }\n            if(stretch == 2)\n            {\n                System.out.println(\"yes\");\n                System.out.println(\"swap \" + (start+1) + \" \" + (start+stretch));\n            }\n            else if(stretch \u003e 2){\n                int [] test = new int [stretch];\n                int check = 0;\n                System.arraycopy(arr, start, test, 0, stretch);\n                for(i=0;i\u003cstretch-1;i++)\n                {\n                    if(test[i] \u003c test[i+1])\n                    {\n                        check = 1;\n                        break;\n                    }\n                }\n                if(check == 0)\n                {\n                    System.out.println(\"yes\");\n                    System.out.println(\"reverse \" + (start+1) + \" \" + (start+stretch));\n                    return;\n                        \n                }\n                else\n                {\n                    System.out.println(\"no\");\n                    return;\n                }\n                    \n            }\n            \n        }\n\n\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        int[] arr = new int[n];\n\n        String[] arrItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c n; i++) {\n            int arrItem = Integer.parseInt(arrItems[i]);\n            arr[i] = arrItem;\n        }\n\n        almostSorted(arr);\n\n        scanner.close();\n    }\n}\n","score":0.409090909091,"language":"java8"},{"contest":"Master","challenge":"Almost Sorted","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the almostSorted function below.\n    static void almostSorted(int[] arr) {\n        int i,length,stretch = 0,start = -1,finish = 0;\n        length = arr.length - 1; \n        int [] testArray = arr.clone();\n        Arrays.sort(testArray);\n        if(Arrays.equals(arr,testArray))\n        {\n            System.out.println(\"yes\");\n            return;\n        }\n        else\n        {\n            for(i = 0; i \u003c= length; i++ )\n            {\n                if(testArray[i] != arr[i])\n                {\n                \n                    if(finish ==1)\n                    {\n                        System.out.println(\"no\");\n                        return;\n                    }\n                    else if(stretch == 0)\n                    {\n                        start = i;\n                        stretch++;\n                    }\n                    else if(stretch \u003e 0 \u0026\u0026 finish == 0)\n                    {\n                        stretch++;\n                       \n                    }\n                        \n                }\n                else if(testArray[i] == arr[i] \u0026\u0026 stretch\u003e0)\n                {\n                    finish = 1;\n                }\n            }\n            if(stretch == 2)\n            {\n                System.out.println(\"yes\");\n                System.out.println(\"swap \" + (start+1) + \" \" + (start+stretch));\n            }\n            else if(stretch \u003e 2){\n                int [] test = new int [stretch];\n                int check = 0;\n                System.arraycopy(arr, start, test, 0, stretch);\n                for(i=0;i\u003cstretch-1;i++)\n                {\n                    if(test[i] \u003c test[i+1])\n                    {\n                        check = 1;\n                        break;\n                    }\n                }\n                if(check == 0)\n                {\n                    System.out.println(\"yes\");\n                    System.out.println(\"reverse \" + (start+1) + \" \" + (start+stretch));\n                    return;\n                        \n                }\n                else\n                {\n                    System.out.println(\"no\");\n                    return;\n                }\n                    \n            }\n            \n        }\n\n\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        int[] arr = new int[n];\n\n        String[] arrItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c n; i++) {\n            int arrItem = Integer.parseInt(arrItems[i]);\n            arr[i] = arrItem;\n        }\n\n        almostSorted(arr);\n\n        scanner.close();\n    }\n}\n","score":0.409090909091,"language":"java8"},{"contest":"Master","challenge":"Almost Sorted","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the almostSorted function below.\n    static void almostSorted(int[] arr) {\n        int i,length,stretch = 0,start = -1,finish = 0;\n        length = arr.length - 1; \n        int [] testArray = arr.clone();\n        Arrays.sort(testArray);\n        if(Arrays.equals(arr,testArray))\n        {\n            System.out.println(\"yes\");\n            return;\n        }\n        else\n        {\n            for(i = 0; i \u003c= length; i++ )\n            {\n                if(testArray[i] != arr[i])\n                {\n                \n                    if(finish ==1)\n                    {\n                        System.out.println(\"no\");\n                        return;\n                    }\n                    else if(stretch == 0)\n                    {\n                        start = i;\n                        stretch++;\n                    }\n                    else if(stretch \u003e 0 \u0026\u0026 finish == 0)\n                    {\n                        stretch++;\n                       \n                    }\n                        \n                }\n                else if(testArray[i] == arr[i] \u0026\u0026 stretch\u003e0)\n                {\n                    finish = 1;\n                }\n            }\n            if(stretch == 2)\n            {\n                System.out.println(\"yes\");\n                System.out.println(\"swap \" + (start+1) + \" \" + (start+stretch));\n            }\n            else if(stretch \u003e 2){\n                int [] test = new int [stretch];\n                int check = 0;\n                System.arraycopy(arr, start, test, 0, stretch);\n                for(i=0;i\u003cstretch-1;i++)\n                {\n                    if(test[i] \u003c test[i+1])\n                    {\n                        check = 1;\n                        break;\n                    }\n                }\n                if(check == 0)\n                {\n                    System.out.println(\"yes\");\n                    System.out.println(\"reverse \" + (start+1) + \" \" + (start+stretch));\n                    return;\n                        \n                }\n                else\n                {\n                    System.out.println(\"no\");\n                    return;\n                }\n                    \n            }\n            \n        }\n\n\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        int[] arr = new int[n];\n\n        String[] arrItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c n; i++) {\n            int arrItem = Integer.parseInt(arrItems[i]);\n            arr[i] = arrItem;\n        }\n\n        almostSorted(arr);\n\n        scanner.close();\n    }\n}\n","score":0.409090909091,"language":"java8"},{"contest":"Master","challenge":"Almost Sorted","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the almostSorted function below.\n    static void almostSorted(int[] arr) {\n        int i,length,stretch = 0,start = -1,finish = 0;\n        length = arr.length - 1; \n        int [] testArray = arr.clone();\n        Arrays.sort(testArray);\n        if(Arrays.equals(arr,testArray))\n        {\n            System.out.println(\"yes\");\n            return;\n        }\n        else\n        {\n            for(i = 0; i \u003c= length; i++ )\n            {\n                if(testArray[i] != arr[i])\n                {\n                \n                    if(stretch == 0)\n                    {\n                        start = i;\n                        stretch++;\n                    }\n                    else if(stretch \u003e 0)\n                    {\n                        if(finish ==0)\n                            stretch++;\n                        else\n                            stretch = i;\n                       \n                    }\n                        \n                }\n                else if(testArray[i] == arr[i] \u0026\u0026 stretch\u003e0)\n                {\n                    finish = 1;\n                }\n            }\n            \n             \n            stretch = stretch+1- start;\n            if(finish == 1)\n            {\n                int temp = arr[start];\n                arr[start] = arr[start+stretch-1];\n                arr[start+stretch-1] = temp;\n\n                if(Arrays.equals(arr,testArray))\n                {\n                    System.out.println(\"yes\");\n                    System.out.println(\"swap \" + (start+1) + \" \" + (start+stretch));\n                }\n                else\n                    System.out.println(\"no\");\n            }\n            else if(finish == 0)\n            {\n                int [] test = new int [stretch];\n                int check = 0;\n                System.arraycopy(arr, start, test, 0, stretch);\n                for(i=0;i\u003cstretch-1;i++)\n                {\n                    if(test[i] \u003c test[i+1])\n                    {\n                        check = 1;\n                        break;\n                    }\n                }\n                if(check == 0)\n                {\n                    System.out.println(\"yes\");\n                    System.out.println(\"reverse \" + (start+1) + \" \" + (start+stretch));\n                    return;\n                        \n                }\n                else\n                {\n                    System.out.println(\"no\");\n                    return;\n                }\n                    \n            }\n            \n        }\n\n\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        int[] arr = new int[n];\n\n        String[] arrItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c n; i++) {\n            int arrItem = Integer.parseInt(arrItems[i]);\n            arr[i] = arrItem;\n        }\n\n        almostSorted(arr);\n\n        scanner.close();\n    }\n}\n\n\n\n","score":0.545454545455,"language":"java8"},{"contest":"Master","challenge":"Almost Sorted","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the almostSorted function below.\n    static void almostSorted(int[] arr) {\n        int i,length,stretch = 0,start = -1,finish = 0;\n        length = arr.length - 1; \n        int [] testArray = arr.clone();\n        Arrays.sort(testArray);\n        if(Arrays.equals(arr,testArray))\n        {\n            System.out.println(\"yes\");\n            return;\n        }\n        else\n        {\n            for(i = 0; i \u003c= length; i++ )\n            {\n                if(testArray[i] != arr[i])\n                {\n                \n                    if(stretch == 0)\n                    {\n                        start = i;\n                        stretch++;\n                    }\n                    else if(stretch \u003e 0)\n                    {\n                        if(finish ==0)\n                            stretch++;\n                        else\n                            stretch = i;\n                       \n                    }\n                        \n                }\n                else if(testArray[i] == arr[i] \u0026\u0026 stretch\u003e0)\n                {\n                    finish = 1;\n                }\n            }\n            \n             \n            stretch = stretch+1- start;\n            if(finish == 1)\n            {\n                int temp = arr[start];\n                arr[start] = arr[start+stretch-1];\n                arr[start+stretch-1] = temp;\n\n                if(Arrays.equals(arr,testArray))\n                {\n                    System.out.println(\"yes\");\n                    System.out.println(\"swap \" + (start+1) + \" \" + (start+stretch));\n                    return;\n                }\n                else\n                    System.out.println(\"no\");\n                    return;\n            }\n            else if(finish == 0)\n            {\n                int [] test = new int [stretch];\n                int check = 0;\n                System.arraycopy(arr, start, test, 0, stretch-1);\n                for(i=0;i\u003cstretch-1;i++)\n                {\n                    if(test[i] \u003c test[i+1])\n                    {\n                        check = 1;\n                        break;\n                    }\n                }\n                if(check == 0)\n                {\n                    System.out.println(\"yes\");\n                    System.out.println(\"reverse \" + (start+1) + \" \" + (start+stretch-1));\n                    return;\n                        \n                }\n                else\n                {\n                    System.out.println(\"no\");\n                    return;\n                }\n                    \n            }\n            \n        }\n\n\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        int[] arr = new int[n];\n\n        String[] arrItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c n; i++) {\n            int arrItem = Integer.parseInt(arrItems[i]);\n            arr[i] = arrItem;\n        }\n\n        almostSorted(arr);\n\n        scanner.close();\n    }\n}\n\n\n\n","score":0.545454545455,"language":"java8"},{"contest":"Master","challenge":"Almost Sorted","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the almostSorted function below.\n    static void almostSorted(int[] arr) {\n        int i,length,stretch = 0,start = -1,finish = 0;\n        length = arr.length - 1; \n        int [] testArray = arr.clone();\n        Arrays.sort(testArray);\n        if(Arrays.equals(arr,testArray))\n        {\n            System.out.println(\"yes\");\n            return;\n        }\n        else\n        {\n            for(i = 0; i \u003c= length; i++ )\n            {\n                if(testArray[i] != arr[i])\n                {\n                \n                    if(stretch == 0)\n                    {\n                        start = i;\n                        stretch++;\n                    }\n                    else if(stretch \u003e 0)\n                    {\n                        if(finish ==0)\n                            stretch++;\n                        else\n                            stretch = i;\n                       \n                    }\n                        \n                }\n                else if(testArray[i] == arr[i] \u0026\u0026 stretch\u003e0)\n                {\n                    finish = 1;\n                }\n            }\n            \n             \n            stretch = stretch+1- start;\n            if(finish == 1)\n            {\n                int temp = arr[start];\n                arr[start] = arr[start+stretch-1];\n                arr[start+stretch-1] = temp;\n\n                if(Arrays.equals(arr,testArray))\n                {\n                    System.out.println(\"yes\");\n                    System.out.println(\"swap \" + (start+1) + \" \" + (start+stretch));\n                    return;\n                }\n                else\n                    System.out.println(\"no\");\n                    return;\n            }\n            else if(finish == 0)\n            {\n                int [] test = new int [stretch];\n                int check = 0;\n                System.arraycopy(arr, start, test, 0, stretch-1);\n                for(i=0;i\u003cstretch-1;i++)\n                {\n                    if(test[i] \u003c test[i+1])\n                    {\n                        check = 1;\n                        break;\n                    }\n                }\n                if(check == 0)\n                {\n                    System.out.println(\"yes\");\n                    String str;\n                    if(stretch-1 == 2)\n                        str = \"swap\";\n                    else\n                        str = \"reverse\";\n                    System.out.println(str+\" \" + (start+1) + \" \" + (start+stretch-1));\n                    return;\n                        \n                }\n                else\n                {\n                    System.out.println(\"no\");\n                    return;\n                }\n                    \n            }\n            \n        }\n\n\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        int[] arr = new int[n];\n\n        String[] arrItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c n; i++) {\n            int arrItem = Integer.parseInt(arrItems[i]);\n            arr[i] = arrItem;\n        }\n\n        almostSorted(arr);\n\n        scanner.close();\n    }\n}\n\n\n\n","score":0.545454545455,"language":"java8"},{"contest":"Master","challenge":"Almost Sorted","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the almostSorted function below.\n    static void almostSorted(int[] arr) {\n        int i,length,stretch = 0,start = -1,finish = 0;\n        length = arr.length - 1; \n        int [] testArray = arr.clone();\n        Arrays.sort(testArray);\n        if(Arrays.equals(arr,testArray))\n        {\n            System.out.println(\"yes\");\n            return;\n        }\n        else\n        {\n            for(i = 0; i \u003c= length; i++ )\n            {\n                if(testArray[i] != arr[i])\n                {\n                \n                    if(stretch == 0)\n                    {\n                        start = i;\n                        stretch++;\n                    }\n                    else if(stretch \u003e 0)\n                    {\n                        if(finish ==0)\n                            stretch++;\n                        else\n                            stretch = start+1-i;\n                       \n                    }\n                        \n                }\n                else if(testArray[i] == arr[i] \u0026\u0026 stretch\u003e0)\n                {\n                    finish = 1;\n                }\n            }\n            \n            if(finish == 1)\n            {\n                int temp = arr[start];\n                arr[start] = arr[start+stretch-1];\n                arr[start+stretch-1] = temp;\n\n                if(Arrays.equals(arr,testArray))\n                {\n                    System.out.println(\"yes\");\n                    System.out.println(\"swap \" + (start+1) + \" \" + (start+stretch));\n                    return;\n                }\n                else\n                    System.out.println(\"This no\" + \" \"+ (start+1) + \" \" + (stretch));\n                    return;\n            }\n            else if(finish == 0)\n            {\n                int [] test = new int [stretch];\n                int check = 0;\n                System.arraycopy(arr, start, test, 0, stretch-1);\n                for(i=0;i\u003cstretch-1;i++)\n                {\n                    if(test[i] \u003c test[i+1])\n                    {\n                        check = 1;\n                        break;\n                    }\n                }\n                if(check == 0)\n                {\n                    System.out.println(\"yes\");\n                    String str;\n                    if(stretch-1 == 2)\n                        str = \"swap\";\n                    else\n                        str = \"reverse\";\n                    System.out.println(str+\" \" + (start+1) + \" \" + (start+stretch-1));\n                    return;\n                        \n                }\n                else\n                {\n                    System.out.println(\"no\");\n                    return;\n                }\n                    \n            }\n            \n        }\n\n\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        int[] arr = new int[n];\n\n        String[] arrItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c n; i++) {\n            int arrItem = Integer.parseInt(arrItems[i]);\n            arr[i] = arrItem;\n        }\n\n        almostSorted(arr);\n\n        scanner.close();\n    }\n}\n\n\n\n","score":0.090909090909,"language":"java8"},{"contest":"Master","challenge":"Almost Sorted","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the almostSorted function below.\n    static void almostSorted(int[] arr) {\n        int i,length,stretch = 0,start = -1,finish = 0;\n        length = arr.length - 1; \n        int [] testArray = arr.clone();\n        Arrays.sort(testArray);\n        if(Arrays.equals(arr,testArray))\n        {\n            System.out.println(\"yes\");\n            return;\n        }\n        else\n        {\n            for(i = 0; i \u003c= length; i++ )\n            {\n                if(testArray[i] != arr[i])\n                {\n                \n                    if(stretch == 0)\n                    {\n                        start = i;\n                        stretch++;\n                    }\n                    else if(stretch \u003e 0)\n                    {\n                        if(finish ==0)\n                            stretch++;\n                        else\n                            stretch = start+1-i;\n                       \n                    }\n                        \n                }\n                else if(testArray[i] == arr[i] \u0026\u0026 stretch\u003e0)\n                {\n                    finish = 1;\n                }\n            }\n            \n            if(finish == 1)\n            {\n                int temp = arr[start];\n                arr[start] = arr[start+stretch-1];\n                arr[start+stretch-1] = temp;\n\n                if(Arrays.equals(arr,testArray))\n                {\n                    System.out.println(\"yes\");\n                    System.out.println(\"swap \" + (start+1) + \" \" + (start+stretch));\n                    return;\n                }\n                else\n                    System.out.println(\"This no\" + \" \"+ (start+1) + \" \" + (stretch));\n                    return;\n            }\n            else if(finish == 0)\n            {\n                int [] test = new int [stretch];\n                int check = 0;\n                System.arraycopy(arr, start, test, 0, stretch-1);\n                for(i=0;i\u003cstretch-1;i++)\n                {\n                    if(test[i] \u003c test[i+1])\n                    {\n                        check = 1;\n                        break;\n                    }\n                }\n                if(check == 0)\n                {\n                    System.out.println(\"yes\");\n                    String str;\n                    if(stretch == 2)\n                        str = \"swap\";\n                    else\n                        str = \"reverse\";\n                    System.out.println(str+\" \" + (start+1) + \" \" + (start+stretch));\n                    return;\n                        \n                }\n                else\n                {\n                    System.out.println(\"no\");\n                    return;\n                }\n                    \n            }\n            \n        }\n\n\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        int[] arr = new int[n];\n\n        String[] arrItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c n; i++) {\n            int arrItem = Integer.parseInt(arrItems[i]);\n            arr[i] = arrItem;\n        }\n\n        almostSorted(arr);\n\n        scanner.close();\n    }\n}\n\n\n\n","score":0.090909090909,"language":"java8"},{"contest":"Master","challenge":"Almost Sorted","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the almostSorted function below.\n    static void almostSorted(int[] arr) {\n        int i,length,stretch = 0,start = -1,finish = 0;\n        length = arr.length - 1; \n        int [] testArray = arr.clone();\n        Arrays.sort(testArray);\n        if(Arrays.equals(arr,testArray))\n        {\n            System.out.println(\"yes\");\n            return;\n        }\n        else\n        {\n            for(i = 0; i \u003c= length; i++ )\n            {\n                if(testArray[i] != arr[i])\n                {\n                    finish++;\n                    if(stretch == 0)\n                    {\n                        start = i;\n                        stretch++;\n                    }\n                    else if(stretch \u003e 0)\n                    {\n                        if(finish ==0)\n                            stretch++;\n                        else\n                            stretch = i-start+1;\n                       \n                    }\n                        \n                }\n            }\n         \n            if(finish == 2)\n            {\n                int temp = arr[start];\n                arr[start] = arr[start+stretch-1];\n                arr[start+stretch-1] = temp;\n\n                if(Arrays.equals(arr,testArray))\n                {\n                    System.out.println(\"yes\");\n                    System.out.println(\"swap \" + (start+1) + \" \" + (start+stretch));\n                    return;\n                }\n                else\n                    System.out.println(\"no\");\n                    return;\n            }\n            else if(finish \u003e 0)\n            {\n                int [] test = new int [stretch];\n                int check = 0;\n                System.arraycopy(arr, start, test, 0, stretch);\n                for(i=0;i\u003cstretch-1;i++)\n                {\n                    if(test[i] \u003c test[i+1])\n                    {\n                        check = 1;\n                        break;\n                    }\n                }\n                if(check == 0)\n                {\n                    System.out.println(\"yes\");\n                    String str;\n                    if(stretch == 2)\n                        str = \"swap\";\n                    else\n                        str = \"reverse\";\n                    System.out.println(str+\" \" + (start+1) + \" \" + (start+stretch));\n                    return;\n                        \n                }\n                else\n                {\n                    System.out.println(\"no\");\n                    return;\n                }\n                    \n            }\n            \n        }\n\n\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        int[] arr = new int[n];\n\n        String[] arrItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c n; i++) {\n            int arrItem = Integer.parseInt(arrItems[i]);\n            arr[i] = arrItem;\n        }\n\n        almostSorted(arr);\n\n        scanner.close();\n    }\n}\n\n\n\n","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Maximum Subarray Sum","code":"#include \u003cassert.h\u003e\n#include \u003climits.h\u003e\n#include \u003cmath.h\u003e\n#include \u003cstdbool.h\u003e\n#include \u003cstddef.h\u003e\n#include \u003cstdint.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n\nchar* readline();\nchar** split_string(char*);\n\n// Complete the maximumSum function below.\nlong maximumSum(int a_count, long* a, long m,int n) {\n    long max = 0;\n    long sum = 0;\n    for(int i = 0;i\u003cn;i++)\n    {\n        \n        sum = (sum + a[i]%m)%m;\n        if(sum\u003emax)\n            max = sum;\n        else if(sum\u003c=0)\n        {\n            sum = 0;\n            i--;\n        }\n            \n    }\n    return max;\n}\n\nint main()\n{\n    FILE* fptr = fopen(getenv(\"OUTPUT_PATH\"), \"w\");\n\n    char* q_endptr;\n    char* q_str = readline();\n    int q = strtol(q_str, \u0026q_endptr, 10);\n\n    if (q_endptr == q_str || *q_endptr != '\\0') { exit(EXIT_FAILURE); }\n\n    for (int q_itr = 0; q_itr \u003c q; q_itr++) {\n        char** nm = split_string(readline());\n\n        char* n_endptr;\n        char* n_str = nm[0];\n        int n = strtol(n_str, \u0026n_endptr, 10);\n\n        if (n_endptr == n_str || *n_endptr != '\\0') { exit(EXIT_FAILURE); }\n\n        char* m_endptr;\n        char* m_str = nm[1];\n        long m = strtol(m_str, \u0026m_endptr, 10);\n\n        if (m_endptr == m_str || *m_endptr != '\\0') { exit(EXIT_FAILURE); }\n\n        char** a_temp = split_string(readline());\n\n        long* a = malloc(n * sizeof(long));\n\n        for (int i = 0; i \u003c n; i++) {\n            char* a_item_endptr;\n            char* a_item_str = *(a_temp + i);\n            long a_item = strtol(a_item_str, \u0026a_item_endptr, 10);\n\n            if (a_item_endptr == a_item_str || *a_item_endptr != '\\0') { exit(EXIT_FAILURE); }\n\n            *(a + i) = a_item;\n        }\n\n        int a_count = n;\n\n        long result = maximumSum(a_count, a, m,n);\n\n        fprintf(fptr, \"%ld\\n\", result);\n    }\n\n    fclose(fptr);\n\n    return 0;\n}\n\nchar* readline() {\n    size_t alloc_length = 1024;\n    size_t data_length = 0;\n    char* data = malloc(alloc_length);\n\n    while (true) {\n        char* cursor = data + data_length;\n        char* line = fgets(cursor, alloc_length - data_length, stdin);\n\n        if (!line) { break; }\n\n        data_length += strlen(cursor);\n\n        if (data_length \u003c alloc_length - 1 || data[data_length - 1] == '\\n') { break; }\n\n        size_t new_length = alloc_length \u003c\u003c 1;\n        data = realloc(data, new_length);\n\n        if (!data) { break; }\n\n        alloc_length = new_length;\n    }\n\n    if (data[data_length - 1] == '\\n') {\n        data[data_length - 1] = '\\0';\n    }\n\n    data = realloc(data, data_length);\n\n    return data;\n}\n\nchar** split_string(char* str) {\n    char** splits = NULL;\n    char* token = strtok(str, \" \");\n\n    int spaces = 0;\n\n    while (token) {\n        splits = realloc(splits, sizeof(char*) * ++spaces);\n        if (!splits) {\n            return splits;\n        }\n\n        splits[spaces - 1] = token;\n\n        token = strtok(NULL, \" \");\n    }\n\n    return splits;\n}\n","score":0.0,"language":"c"},{"contest":"Master","challenge":"Maximum Subarray Sum","code":"#include \u003cassert.h\u003e\n#include \u003climits.h\u003e\n#include \u003cmath.h\u003e\n#include \u003cstdbool.h\u003e\n#include \u003cstddef.h\u003e\n#include \u003cstdint.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n\nchar* readline();\nchar** split_string(char*);\n\n// Complete the maximumSum function below.\nlong maximumSum(int a_count, long* a, long m,int n) {\n    long max = 0;\n    long sum = 0;\n    for(int i = 0;i\u003cn;i++)\n    {\n        \n        sum = (sum + a[i]%m)%m;\n        if(sum\u003emax)\n            max = sum;\n        else if(sum\u003c=0)\n        {\n            sum = 0;\n            i--;\n        }\n            \n    }\n    return max;\n}\n\nint main()\n{\n    FILE* fptr = fopen(getenv(\"OUTPUT_PATH\"), \"w\");\n\n    char* q_endptr;\n    char* q_str = readline();\n    int q = strtol(q_str, \u0026q_endptr, 10);\n\n    if (q_endptr == q_str || *q_endptr != '\\0') { exit(EXIT_FAILURE); }\n\n    for (int q_itr = 0; q_itr \u003c q; q_itr++) {\n        char** nm = split_string(readline());\n\n        char* n_endptr;\n        char* n_str = nm[0];\n        int n = strtol(n_str, \u0026n_endptr, 10);\n\n        if (n_endptr == n_str || *n_endptr != '\\0') { exit(EXIT_FAILURE); }\n\n        char* m_endptr;\n        char* m_str = nm[1];\n        long m = strtol(m_str, \u0026m_endptr, 10);\n\n        if (m_endptr == m_str || *m_endptr != '\\0') { exit(EXIT_FAILURE); }\n\n        char** a_temp = split_string(readline());\n\n        long* a = malloc(n * sizeof(long));\n\n        for (int i = 0; i \u003c n; i++) {\n            char* a_item_endptr;\n            char* a_item_str = *(a_temp + i);\n            long a_item = strtol(a_item_str, \u0026a_item_endptr, 10);\n\n            if (a_item_endptr == a_item_str || *a_item_endptr != '\\0') { exit(EXIT_FAILURE); }\n\n            *(a + i) = a_item;\n        }\n\n        int a_count = n;\n\n        long result = maximumSum(a_count, a, m,n);\n\n        fprintf(fptr, \"%ld\\n\", result);\n    }\n\n    fclose(fptr);\n\n    return 0;\n}\n\nchar* readline() {\n    size_t alloc_length = 1024;\n    size_t data_length = 0;\n    char* data = malloc(alloc_length);\n\n    while (true) {\n        char* cursor = data + data_length;\n        char* line = fgets(cursor, alloc_length - data_length, stdin);\n\n        if (!line) { break; }\n\n        data_length += strlen(cursor);\n\n        if (data_length \u003c alloc_length - 1 || data[data_length - 1] == '\\n') { break; }\n\n        size_t new_length = alloc_length \u003c\u003c 1;\n        data = realloc(data, new_length);\n\n        if (!data) { break; }\n\n        alloc_length = new_length;\n    }\n\n    if (data[data_length - 1] == '\\n') {\n        data[data_length - 1] = '\\0';\n    }\n\n    data = realloc(data, data_length);\n\n    return data;\n}\n\nchar** split_string(char* str) {\n    char** splits = NULL;\n    char* token = strtok(str, \" \");\n\n    int spaces = 0;\n\n    while (token) {\n        splits = realloc(splits, sizeof(char*) * ++spaces);\n        if (!splits) {\n            return splits;\n        }\n\n        splits[spaces - 1] = token;\n\n        token = strtok(NULL, \" \");\n    }\n\n    return splits;\n}\n","score":0.0,"language":"c"},{"contest":"Master","challenge":"Maximum Subarray Sum","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    static long maximumSum(long[] a, long m)\n    {\n        BigInteger max = BigInteger.valueOf(0);\n        BigInteger sum = BigInteger.valueOf(0);\n        for(int i = 0;i\u003ca.length;i++)\n        {\n            sum = sum.add(BigInteger.valueOf(a[i]).remainder(BigInteger.valueOf(m))).remainder(BigInteger.valueOf(m));\n            if(max.compareTo(sum) \u003c 0)\n                max = sum;\n            else if(sum.compareTo(BigInteger.valueOf(0)) \u003c= 0)\n            {\n                sum = BigInteger.valueOf(0);\n                i--;\n            }\n        }\n        return max.longValue();\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int q = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int qItr = 0; qItr \u003c q; qItr++) {\n            String[] nm = scanner.nextLine().split(\" \");\n\n            int n = Integer.parseInt(nm[0]);\n\n            long m = Long.parseLong(nm[1]);\n\n            long[] a = new long[n];\n\n            String[] aItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int i = 0; i \u003c n; i++) {\n                long aItem = Long.parseLong(aItems[i]);\n                a[i] = aItem;\n            }\n\n            long result = maximumSum(a, m);\n\n            bufferedWriter.write(String.valueOf(result));\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java8"},{"contest":"Master","challenge":"Maximum Subarray Sum","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    static long maximumSum(long[] a, long m)\n    {\n        BigInteger max = BigInteger.valueOf(0);\n        BigInteger sum = BigInteger.valueOf(0);\n        for(int i = 0;i\u003ca.length;i++)\n        {\n            sum = sum.add(BigInteger.valueOf(a[i]).remainder(BigInteger.valueOf(m))).remainder(BigInteger.valueOf(m));\n            if(max.compareTo(sum) \u003c 0)\n                max = sum;\n            else if(sum.compareTo(BigInteger.valueOf(0)) \u003c= 0)\n            {\n                sum = BigInteger.valueOf(0);\n                i--;\n            }\n        }\n        return max.longValue();\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int q = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int qItr = 0; qItr \u003c q; qItr++) {\n            String[] nm = scanner.nextLine().split(\" \");\n\n            int n = Integer.parseInt(nm[0]);\n\n            long m = Long.parseLong(nm[1]);\n\n            long[] a = new long[n];\n\n            String[] aItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int i = 0; i \u003c n; i++) {\n                long aItem = Long.parseLong(aItems[i]);\n                a[i] = aItem;\n            }\n\n            long result = maximumSum(a, m);\n\n            bufferedWriter.write(String.valueOf(result));\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java8"},{"contest":"Master","challenge":"Maximum Subarray Sum","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    static long maximumSum(long[] a, long m)\n    {\n        BigInteger max = BigInteger.valueOf(0);\n        BigInteger sum = BigInteger.valueOf(0);\n        BigInteger checksum = BigInteger.valueOf(0);\n        for(int i = 0;i\u003ca.length;i++)\n        {\n           // System.out.println(max.intValue());\n            sum = sum.add(BigInteger.valueOf(a[i]).remainder(BigInteger.valueOf(m))).remainder(BigInteger.valueOf(m));\n            checksum = BigInteger.valueOf(a[i]).remainder(BigInteger.valueOf(m));\n            if(checksum.compareTo(sum) \u003e 0)\n               sum = checksum;                                           \n            \n            if(max.compareTo(sum) \u003c 0)\n                max = sum;\n            else if(sum.compareTo(BigInteger.valueOf(0)) \u003c= 0)\n            {\n                sum = BigInteger.valueOf(0);\n                i--;\n            }\n        }\n        return max.longValue();\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int q = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int qItr = 0; qItr \u003c q; qItr++) {\n            String[] nm = scanner.nextLine().split(\" \");\n\n            int n = Integer.parseInt(nm[0]);\n\n            long m = Long.parseLong(nm[1]);\n\n            long[] a = new long[n];\n\n            String[] aItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int i = 0; i \u003c n; i++) {\n                long aItem = Long.parseLong(aItems[i]);\n                a[i] = aItem;\n            }\n\n            long result = maximumSum(a, m);\n\n            bufferedWriter.write(String.valueOf(result));\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java8"},{"contest":"Master","challenge":"Maximum Subarray Sum","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    static long maximumSum(long[] a, long m)\n    {\n        BigInteger max = BigInteger.valueOf(0);\n        BigInteger sum = BigInteger.valueOf(0);\n        BigInteger checksum = BigInteger.valueOf(0);\n        for(int i = 0;i\u003ca.length;i++)\n        {\n            System.out.println(sum.intValue());\n            System.out.println(checksum.intValue());\n            sum = sum.add(BigInteger.valueOf(a[i]).remainder(BigInteger.valueOf(m))).remainder(BigInteger.valueOf(m));\n            checksum = BigInteger.valueOf(a[i]).remainder(BigInteger.valueOf(m));\n            if(checksum.compareTo(max) \u003e 0)\n               max = checksum;                                           \n            \n            if(max.compareTo(sum) \u003c 0)\n                max = sum;\n        }\n        return max.longValue();\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int q = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int qItr = 0; qItr \u003c q; qItr++) {\n            String[] nm = scanner.nextLine().split(\" \");\n\n            int n = Integer.parseInt(nm[0]);\n\n            long m = Long.parseLong(nm[1]);\n\n            long[] a = new long[n];\n\n            String[] aItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int i = 0; i \u003c n; i++) {\n                long aItem = Long.parseLong(aItems[i]);\n                a[i] = aItem;\n            }\n\n            long result = maximumSum(a, m);\n\n            bufferedWriter.write(String.valueOf(result));\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java8"},{"contest":"Master","challenge":"Maximum Subarray Sum","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    static long maximumSum(long[] a, long m)\n    {\n        BigInteger max = BigInteger.valueOf(0);\n        BigInteger sum = BigInteger.valueOf(0);\n        BigInteger checksum = BigInteger.valueOf(0);\n        for(int i = 0;i\u003ca.length;i++)\n        {\n            System.out.println(sum.intValue());\n            System.out.println(checksum.intValue());\n            sum = sum.add(BigInteger.valueOf(a[i]).remainder(BigInteger.valueOf(m))).remainder(BigInteger.valueOf(m));\n            checksum = BigInteger.valueOf(a[i]).remainder(BigInteger.valueOf(m));\n            if(checksum.compareTo(max) \u003e 0)\n               max = checksum;                                           \n            \n            if(max.compareTo(sum) \u003c 0)\n                max = sum;\n             if(sum.compareTo(BigInteger.valueOf(0)) \u003c= 0)\n            {\n                System.out.println(\"Special: \" + a[i]);\n                sum = BigInteger.valueOf(0);\n                i--;\n            }\n        }\n        return max.longValue();\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int q = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int qItr = 0; qItr \u003c q; qItr++) {\n            String[] nm = scanner.nextLine().split(\" \");\n\n            int n = Integer.parseInt(nm[0]);\n\n            long m = Long.parseLong(nm[1]);\n\n            long[] a = new long[n];\n\n            String[] aItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int i = 0; i \u003c n; i++) {\n                long aItem = Long.parseLong(aItems[i]);\n                a[i] = aItem;\n            }\n\n            long result = maximumSum(a, m);\n\n            bufferedWriter.write(String.valueOf(result));\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java8"},{"contest":"Master","challenge":"Maximum Subarray Sum","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    static long maximumSum(long[] a, long m)\n    {\n        BigInteger max = BigInteger.valueOf(0);\n        BigInteger sum = BigInteger.valueOf(0);\n        BigInteger checksum = BigInteger.valueOf(0);\n        for(int i = 0;i\u003ca.length;i++)\n        {\n           // System.out.println(max.intValue());\n            sum = sum.add(BigInteger.valueOf(a[i]).remainder(BigInteger.valueOf(m))).remainder(BigInteger.valueOf(m));\n            checksum = BigInteger.valueOf(a[i]).remainder(BigInteger.valueOf(m));\n            if(checksum.compareTo(max) \u003e 0)\n               max = checksum;                                           \n            \n            if(max.compareTo(sum) \u003c 0)\n                max = sum;\n            else if(sum.compareTo(BigInteger.valueOf(0)) \u003c= 0)\n            {\n                sum = BigInteger.valueOf(0);\n                i--;\n            }\n        }\n        return max.longValue();\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int q = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int qItr = 0; qItr \u003c q; qItr++) {\n            String[] nm = scanner.nextLine().split(\" \");\n\n            int n = Integer.parseInt(nm[0]);\n\n            long m = Long.parseLong(nm[1]);\n\n            long[] a = new long[n];\n\n            String[] aItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int i = 0; i \u003c n; i++) {\n                long aItem = Long.parseLong(aItems[i]);\n                a[i] = aItem;\n            }\n\n            long result = maximumSum(a, m);\n\n            bufferedWriter.write(String.valueOf(result));\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java8"},{"contest":"Master","challenge":"Linked Lists: Detect a Cycle","code":"/*\nDetect a cycle in a linked list. Note that the head pointer may be 'null' if the list is empty.\n\nA Node is defined as: \n    class Node {\n        int data;\n        Node next;\n    }\n*/\n\nboolean hasCycle(Node head) {\n    HashMap\u003cInteger,Integer\u003e map = new HashMap\u003cInteger,Integer\u003e;\n    Node temp = head;\n    while(temp.next!=NULL)\n          {\n              if(map.containsKey(temp.data))\n                return 1;\n              else\n              {\n                  map.put(node.data,1);\n                  temp = temp.next;\n              }\n        \n          }\n}","score":0.0,"language":"java"},{"contest":"Master","challenge":"Linked Lists: Detect a Cycle","code":"/*\nDetect a cycle in a linked list. Note that the head pointer may be 'null' if the list is empty.\n\nA Node is defined as: \n    class Node {\n        int data;\n        Node next;\n    }\n*/\n\nboolean hasCycle(Node head) {\n    HashMap\u003cNode,Integer\u003e map = new HashMap\u003cNode,Integer\u003e();\n    Node temp = head;\n    while(temp!= null)\n          {\n              if(map.containsKey(temp))\n                return true;\n              else\n              {\n                  map.put(temp,1);\n                  temp = temp.next;\n              }\n        \n          }\n    return false;\n}","score":1.0,"language":"java"},{"contest":"Master","challenge":"Ice Cream Parlor","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the icecreamParlor function below.\n    static int[] icecreamParlor(int m, int[] arr) \n    {\n        int [] sortedArr = new int[arr.length];\n        int flag = 0;\n        int value = -1;\n        sortedArr = arr.clone();\n        Arrays.sort(sortedArr);\n        for(int i = 0; i\u003carr.length; i++)\n        {\n            int index = Arrays.binarySearch(sortedArr,m-sortedArr[i]);\n            if(index\u003e=0 \u0026\u0026 index!=i)\n            {\n                value = sortedArr[i];\n                flag = 1;\n                break;\n            }\n        }\n        int [] result = new int[2];\n        int count = 0;\n       // System.out.println(\"Value: \" + value);\n        if(flag == 1)\n        {\n            for(int i =0 ; i\u003c arr.length; i++)\n            {\n                if(arr[i] == value)\n                {  \n                    //System.out.println(i);\n                    result[count++] = i+1;\n                    arr[i] = -1;\n                    value = m - value;\n                 }\n            }\n        }\n        //Arrays.sort(result);\n        return result;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int t = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int tItr = 0; tItr \u003c t; tItr++) {\n            int m = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            int n = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            int[] arr = new int[n];\n\n            String[] arrItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int i = 0; i \u003c n; i++) {\n                int arrItem = Integer.parseInt(arrItems[i]);\n                arr[i] = arrItem;\n            }\n\n            int[] result = icecreamParlor(m, arr);\n\n            for (int i = 0; i \u003c result.length; i++) {\n                bufferedWriter.write(String.valueOf(result[i]));\n\n                if (i != result.length - 1) {\n                    bufferedWriter.write(\" \");\n                }\n            }\n\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java"},{"contest":"Master","challenge":"Ice Cream Parlor","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the icecreamParlor function below.\n    static int[] icecreamParlor(int m, int[] arr) \n    {\n        int [] sortedArr = new int[arr.length];\n        int flag = 0;\n        int value = -1;\n        sortedArr = arr.clone();\n        Arrays.sort(sortedArr);\n        for(int i = 0; i\u003carr.length; i++)\n        {\n            int index = Arrays.binarySearch(sortedArr,m-sortedArr[i]);\n            if(index\u003e=0 \u0026\u0026 index!=i)\n            {\n                value = sortedArr[i];\n                flag = 1;\n                break;\n            }\n        }\n        int [] result = new int[2];\n        int count = 0;\n       // System.out.println(\"Value: \" + value);\n        if(flag == 1)\n        {\n            for(int i =0 ; i\u003c arr.length; i++)\n            {\n                if(arr[i] == value)\n                {  \n                    //System.out.println(i);\n                    result[count++] = i+1;\n                    arr[i] = -1;\n                    value = m - value;\n                    break;\n                 }\n            }\n            for(int i =0 ; i\u003c arr.length; i++)\n            {\n                if(arr[i] == value)\n                {  \n                    //System.out.println(i);\n                    result[count++] = i+1;\n                    arr[i] = -1;\n                    value = m - value;\n                    break;\n                 }\n            }\n        }\n        //Arrays.sort(result);\n        return result;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int t = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int tItr = 0; tItr \u003c t; tItr++) {\n            int m = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            int n = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            int[] arr = new int[n];\n\n            String[] arrItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int i = 0; i \u003c n; i++) {\n                int arrItem = Integer.parseInt(arrItems[i]);\n                arr[i] = arrItem;\n            }\n\n            int[] result = icecreamParlor(m, arr);\n\n            for (int i = 0; i \u003c result.length; i++) {\n                bufferedWriter.write(String.valueOf(result[i]));\n\n                if (i != result.length - 1) {\n                    bufferedWriter.write(\" \");\n                }\n            }\n\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java"},{"contest":"Master","challenge":"Ice Cream Parlor","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the icecreamParlor function below.\n    static int[] icecreamParlor(int m, int[] arr) \n    {\n        int [] sortedArr = new int[arr.length];\n        int flag = 0;\n        int value = -1;\n        sortedArr = arr.clone();\n        Arrays.sort(sortedArr);\n        for(int i = 0; i\u003carr.length; i++)\n        {\n            int index = Arrays.binarySearch(sortedArr,m-sortedArr[i]);\n            if(index\u003e=0 \u0026\u0026 index!=i)\n            {\n                value = sortedArr[i];\n                flag = 1;\n                break;\n            }\n        }\n        int [] result = new int[2];\n        int count = 0;\n       // System.out.println(\"Value: \" + value);\n        if(flag == 1)\n        {\n            for(int i =0 ; i\u003c arr.length; i++)\n            {\n                if(arr[i] == value)\n                {  \n                    //System.out.println(i);\n                    result[count++] = i+1;\n                    arr[i] = -1;\n                    value = m - value;\n                    break;\n                 }\n            }\n            for(int i =0 ; i\u003c arr.length; i++)\n            {\n                if(arr[i] == value)\n                {  \n                    //System.out.println(i);\n                    result[count++] = i+1;\n                    arr[i] = -1;\n                    value = m - value;\n                    break;\n                 }\n            }\n        }\n        Arrays.sort(result);\n        return result;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int t = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int tItr = 0; tItr \u003c t; tItr++) {\n            int m = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            int n = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            int[] arr = new int[n];\n\n            String[] arrItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int i = 0; i \u003c n; i++) {\n                int arrItem = Integer.parseInt(arrItems[i]);\n                arr[i] = arrItem;\n            }\n\n            int[] result = icecreamParlor(m, arr);\n\n            for (int i = 0; i \u003c result.length; i++) {\n                bufferedWriter.write(String.valueOf(result[i]));\n\n                if (i != result.length - 1) {\n                    bufferedWriter.write(\" \");\n                }\n            }\n\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":1.0,"language":"java"},{"contest":"Master","challenge":"Sherlock and Array","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the balancedSums function below.\n    static int leftSum(Integer []arr,int index)\n    {\n        int sum = 0; \n        for(int i = 0 ;i \u003c index ; i++)\n            sum = sum + arr[i];\n        return sum;\n    }\n    static int rightSum(Integer []arr,int index)\n    {\n        int sum = 0; \n        for(int i = index+1 ;i \u003c arr.length ; i++)\n            sum = sum + arr[i];\n        return sum;\n    }\n    static int modifiedBinary(Integer []arr,int firstIndex,int lastIndex)\n    {\n        int x = -1;\n        if(lastIndex\u003e=firstIndex)\n        {\n            int mid = (firstIndex + lastIndex)/2;\n            int left = leftSum(arr,mid);\n            int right = rightSum(arr,mid);\n            if(left == right)\n                return mid;\n            else if (left\u003eright)\n                x = modifiedBinary(arr,firstIndex,mid-1);\n            else\n                \n                x = modifiedBinary(arr,mid+1,lastIndex);\n        }\n        if(x==-1)\n            return -1;\n        else\n            return x;\n    }\n    static String balancedSums(List\u003cInteger\u003e arr)\n    {\n        Integer [] input = new Integer[arr.size()];\n        input = arr.toArray(input);\n        int x = modifiedBinary(input,0,input.length-1);\n        if(x\u003e-1)\n            return \"YES\";\n        else\n            return \"NO\";\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int T = Integer.parseInt(bufferedReader.readLine().trim());\n\n        for (int TItr = 0; TItr \u003c T; TItr++) {\n            int n = Integer.parseInt(bufferedReader.readLine().trim());\n\n            String[] arrItems = bufferedReader.readLine().replaceAll(\"\\\\s+$\", \"\").split(\" \");\n\n            List\u003cInteger\u003e arr = new ArrayList\u003c\u003e();\n\n            for (int i = 0; i \u003c n; i++) {\n                int arrItem = Integer.parseInt(arrItems[i]);\n                arr.add(arrItem);\n            }\n\n            String result = balancedSums(arr);\n\n            bufferedWriter.write(result);\n            bufferedWriter.newLine();\n        }\n\n        bufferedReader.close();\n        bufferedWriter.close();\n    }\n}\n","score":1.0,"language":"java"},{"contest":"Master","challenge":"The Coin Change Problem","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the getWays function below.\n    static long getWays(long n, long[] c) {\n      Integer [][] state = new Integer[(int)n+1][c.length+1];\n        for(int i = 0; i\u003c= n ; i++)\n        {\n            state[i][0] = 0;\n            state[i][1] = 1;\n        }\n        for(int j =0 ; j\u003cc.length+1; j++)\n            state[0][j] = 0;\n        for(int i = 0; i \u003c= n ; i++)\n        {\n            for(int j = 1 ; j\u003c c.length+1 ; j++)\n            {\n                if(i\u003e=c[j-1])\n                       state[i][j] = state[i-(int)c[j-1]][j] + state[i][j-1];\n                else\n                    state[i][j] = state[i][j-1];\n            }\n        }\n        for(int i = 0 ; i\u003c=n ; i++)\n        {\n            for(int j= 0 ; j\u003c c.length+1 ; j++)\n                System.out.print(state[i][j] + \" \");\n            System.out.println();\n        }\n        //System.out.println(state[(int)n][c.length]);\n        return (state[(int)n][c.length]);\n\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        String[] nm = scanner.nextLine().split(\" \");\n\n        int n = Integer.parseInt(nm[0]);\n\n        int m = Integer.parseInt(nm[1]);\n\n        long[] c = new long[m];\n\n        String[] cItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c m; i++) {\n            long cItem = Long.parseLong(cItems[i]);\n            c[i] = cItem;\n        }\n\n        // Print the number of ways of making change for 'n' units using coins having the values given by 'c'\n\n        long ways = getWays(n, c);\n        bufferedWriter.write(String.valueOf(ways));\n        bufferedWriter.newLine();\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.066666666667,"language":"java"},{"contest":"Master","challenge":"The Coin Change Problem","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the getWays function below.\n    static long getWays(long n, long[] c) {\n      Integer [][] state = new Integer [(int)n+1][c.length+1];\n        for(Integer i = 0; i\u003c= n ; i++)\n        {\n            state[i][0] = 0;\n            if(i%c[0] == 0)\n                state[i][1] = 1;\n            else\n                state[i][1] = 0;\n        }\n        for(Integer j =0 ; j\u003cc.length+1; j++)\n            state[0][j] = 1;\n        for(Integer i = 1; i \u003c= n ; i++)\n        {\n            for(Integer j = 2 ; j\u003c c.length+1 ; j++)\n            {\n                if(i\u003e=c[j-1])\n                       state[i][j] = state[i-(int)c[j-1]][j] + state[i][j-1];\n                else\n                    state[i][j] = state[i][j-1];\n            }\n        }\n        return (state[(int)n][c.length]);\n\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        String[] nm = scanner.nextLine().split(\" \");\n\n        int n = Integer.parseInt(nm[0]);\n\n        int m = Integer.parseInt(nm[1]);\n\n        long[] c = new long[m];\n\n        String[] cItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c m; i++) {\n            long cItem = Long.parseLong(cItems[i]);\n            c[i] = cItem;\n        }\n\n        // Print the number of ways of making change for 'n' units using coins having the values given by 'c'\n\n        long ways = getWays(n, c);\n        bufferedWriter.write(String.valueOf(ways));\n        bufferedWriter.newLine();\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.8,"language":"java"},{"contest":"Master","challenge":"The Coin Change Problem","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the getWays function below.\n    static long getWays(long n, long[] c) {\n      Long [][] state = new Long [(int)n+1][c.length+1];\n        for(Integer i = 0; i\u003c= n ; i++)\n        {\n            state[i][0] = 0L;\n            if(i%c[0] == 0)\n                state[i][1] = 1L;\n            else\n                state[i][1] = 0L;\n        }\n        for(Integer j =0 ; j\u003cc.length+1; j++)\n            state[0][j] = 1L;\n        for(Integer i = 1; i \u003c= n ; i++)\n        {\n            for(Integer j = 2 ; j\u003c c.length+1 ; j++)\n            {\n                if(i\u003e=c[j-1])\n                       state[i][j] = state[i-(int)c[j-1]][j] + state[i][j-1];\n                else\n                    state[i][j] = state[i][j-1];\n            }\n        }\n        return (state[(int)n][c.length]);\n\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        String[] nm = scanner.nextLine().split(\" \");\n\n        int n = Integer.parseInt(nm[0]);\n\n        int m = Integer.parseInt(nm[1]);\n\n        long[] c = new long[m];\n\n        String[] cItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c m; i++) {\n            long cItem = Long.parseLong(cItems[i]);\n            c[i] = cItem;\n        }\n\n        // Print the number of ways of making change for 'n' units using coins having the values given by 'c'\n\n        long ways = getWays(n, c);\n        bufferedWriter.write(String.valueOf(ways));\n        bufferedWriter.newLine();\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":1.0,"language":"java"},{"contest":"Master","challenge":"Simple Array Sum","code":"import java.io.*;\nimport java.math.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    /*\n     * Complete the simpleArraySum function below.\n     */\n    static int simpleArraySum(int[] ar) {\n        int sum =0 ;\n        for(int i = 0; i\u003c ar.length ; i++)\n            sum += ar[i];\n        return sum;\n\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int arCount = Integer.parseInt(scanner.nextLine().trim());\n\n        int[] ar = new int[arCount];\n\n        String[] arItems = scanner.nextLine().split(\" \");\n\n        for (int arItr = 0; arItr \u003c arCount; arItr++) {\n            int arItem = Integer.parseInt(arItems[arItr].trim());\n            ar[arItr] = arItem;\n        }\n\n        int result = simpleArraySum(ar);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n    }\n}\n","score":1.0,"language":"java"},{"contest":"Master","challenge":"Tree: Preorder Traversal","code":"/* you only have to complete the function given below.  \nNode is defined as  \n\nclass Node {\n    int data;\n    Node left;\n    Node right;\n}\n\n*/\n\n    public static void preOrder(Node root)\n    {\n        if(root!=null)\n        {  \n            System.out.print(root.data + \" \");\n            preOrder(root.left);\n            preOrder(root.right);\n        }\n    }","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Tree: Postorder Traversal","code":"/* you only have to complete the function given below.  \nNode is defined as  \n\nclass Node {\n    int data;\n    Node left;\n    Node right;\n}\n\n*/\n\n    public static void postOrder(Node root) \n    {\n        if(root!=null)\n        {  \n            postOrder(root.left);\n            postOrder(root.right);\n            System.out.print(root.data + \" \");\n        }\n    }","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Tree: Inorder Traversal","code":"/* you only have to complete the function given below.  \nNode is defined as  \n\nclass Node {\n    int data;\n    Node left;\n    Node right;\n}\n\n*/\n\n    public static void inOrder(Node root) \n    {\n        if(root!=null)\n        {\n            inOrder(root.left);\n            System.out.print(root.data + \" \");\n            inOrder(root.right);\n        }\n    }","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Tree: Height of a Binary Tree","code":"\t/*\n    class Node \n    \tint data;\n    \tNode left;\n    \tNode right;\n\t*/\n\tpublic static int height(Node root) \n    {\n      \tint left = 0;\n        int right = 0;\n        if(root.left!=null)\n             left  = 1+height(root.left);\n        if(root.right!= null)\n             right = 1 + height(root.right);\n        if(right \u003e left)\n            return right;\n        else\n            return left;\n    }","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Tree : Top View","code":"\t/* \n    \n    class Node \n    \tint data;\n    \tNode left;\n    \tNode right;\n\t*/\n\tpublic static void topView(Node root) \n    {\n        if(root!=null)\n        {\n            if(root.left!=null)\n            {\n                topView(root.left);\n                System.out.print(root.data + \" \");\n            }\n        }\n        while(root!=null)\n        {\n            System.out.print(root.data + \" \");\n            root = root.right;\n        }\n            \n      \n    }","score":0.0,"language":"java8"},{"contest":"Master","challenge":"Tree : Top View","code":"\t/* \n    \n    class Node \n    \tint data;\n    \tNode left;\n    \tNode right;\n\t*/\n\tpublic static void topView(Node root) \n    {\n        topLeft(root);\n        topRight(root);\n    }\n    public static void topLeft(Node root)\n    {\n        if(root!=null)\n        {\n            if(root.left!=null)\n            {\n                topLeft(root.left);\n                System.out.print(root.data + \" \");\n            }\n        }\n    }\n    public static void topRight(Node root)\n    {\n        while(root!=null)\n        {\n            System.out.print(root.data + \" \");\n            root = root.right;\n        } \n    }","score":0.0,"language":"java8"},{"contest":"Master","challenge":"Tree : Top View","code":"\t/* \n    \n    class Node \n    \tint data;\n    \tNode left;\n    \tNode right;\n\t*/\n\tpublic static void topView(Node root) \n    {\n        Node temp = root;\n        topLeft(root);\n        topRight(temp);\n    }\n    public static void topLeft(Node root)\n    {\n        if(root!=null)\n        {\n            topLeft(root.left);\n            System.out.print(root.data + \" \");\n        }\n    }\n    public static void topRight(Node root)\n    {\n       root = root.right;\n        while(root!=null)\n        {\n            System.out.print(root.data + \" \");\n            root = root.right;\n        } \n    }","score":0.0,"language":"java8"},{"contest":"Master","challenge":"The Longest Common Subsequence","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\nimport java.lang.*;\n\npublic class Solution {\n\n    // Complete the longestCommonSubsequence function below.\n    static int[] longestCommonSubsequence(int[] a, int[] b)\n    {\n        Integer [][] LCS = new Integer[a.length][b.length];\n        \n        for(int i = 0; i\u003ca.length; i++)\n        {\n            if(Arrays.binarySearch(a,b[0]) \u003e= 0)\n                LCS[i][0] = 1;\n            else\n                LCS[i][0] = 0;\n        }\n        \n        for(int j = 0; j\u003cb.length; j++)\n        {\n            if(Arrays.binarySearch(b,a[0]) \u003e= 0)\n                LCS[0][j] = 1;\n            else\n                LCS[0][j] = 0;\n        }\n        \n        for(int i = 1; i\u003ca.length; i++)\n        {\n            for(int j = 1; j\u003cb.length; j++)\n            {\n                if(a[i] == b[j])\n                    LCS[i][j] = 1 + LCS[i-1][j-1];\n                else\n                    LCS[i][j] = Math.max(LCS[i-1][j],LCS[i][j-1]);\n            }\n        }\n       // System.out.println(LCS[a.length-1][b.length-1]);\n        int n = LCS[a.length-1][b.length-1];\n        int [] output = new int[n];\n        \n        //Backtrack\n        \n        int i = a.length-1; \n        int j = b.length-1;\n        int count = output.length-1;\n        while(i\u003e0 \u0026\u0026 j\u003e0)\n        {\n            if(a[i] == b[j])\n            {\n                output[count--] = a[i];\n                i--;\n                j--;\n            }\n            else if(LCS[i-1][j] \u003c= LCS[i][j-1])\n                j--;\n            else\n                i--;\n        }\n        if(i == 0)\n        {\n            if(Arrays.binarySearch(b,a[i]) \u003e= 0)\n                output[count--] = a[i];\n        }\n        else if(j == 0)\n        {\n            if(Arrays.binarySearch(a,b[j]) \u003e= 0)\n                output[count--] = b[j];\n        }\n        return output;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        String[] nm = scanner.nextLine().split(\" \");\n\n        int n = Integer.parseInt(nm[0]);\n\n        int m = Integer.parseInt(nm[1]);\n\n        int[] a = new int[n];\n\n        String[] aItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c n; i++) {\n            int aItem = Integer.parseInt(aItems[i]);\n            a[i] = aItem;\n        }\n\n        int[] b = new int[m];\n\n        String[] bItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c m; i++) {\n            int bItem = Integer.parseInt(bItems[i]);\n            b[i] = bItem;\n        }\n\n        int[] result = longestCommonSubsequence(a, b);\n\n        for (int i = 0; i \u003c result.length; i++) {\n            bufferedWriter.write(String.valueOf(result[i]));\n\n            if (i != result.length - 1) {\n                bufferedWriter.write(\" \");\n            }\n        }\n\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java"},{"contest":"Master","challenge":"The Longest Common Subsequence","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\nimport java.lang.*;\n\npublic class Solution {\n\n    // Complete the longestCommonSubsequence function below.\n    static int[] longestCommonSubsequence(int[] a, int[] b)\n    {\n        Integer [][] LCS = new Integer[a.length][b.length];\n        \n        for(int i = 0; i\u003ca.length; i++)\n        {\n            if(Arrays.binarySearch(a,b[0]) \u003e= 0)\n                LCS[i][0] = 1;\n            else\n                LCS[i][0] = 0;\n        }\n        \n        for(int j = 0; j\u003cb.length; j++)\n        {\n            if(Arrays.binarySearch(b,a[0]) \u003e= 0)\n                LCS[0][j] = 1;\n            else\n                LCS[0][j] = 0;\n        }\n        \n        for(int i = 1; i\u003ca.length; i++)\n        {\n            for(int j = 1; j\u003cb.length; j++)\n            {\n                if(a[i] == b[j])\n                    LCS[i][j] = 1 + LCS[i-1][j-1];\n                else\n                    LCS[i][j] = Math.max(LCS[i-1][j],LCS[i][j-1]);\n            }\n        }\n       // System.out.println(LCS[a.length-1][b.length-1]);\n        int n = LCS[a.length-1][b.length-1];\n        int [] output = new int[n];\n        \n        //Backtrack\n        \n        int i = a.length-1; \n        int j = b.length-1;\n        int count = output.length-1;\n        while(i\u003e0 \u0026\u0026 j\u003e0)\n        {\n            if(a[i] == b[j])\n            {\n                output[count--] = a[i];\n                i--;\n                j--;\n            }\n            else if(LCS[i-1][j] \u003c= LCS[i][j-1])\n                j--;\n            else\n                i--;\n        }\n        if(count\u003e=0)\n        {    \n            if(i == 0)\n            {\n                if(Arrays.binarySearch(b,a[i]) \u003e= 0)\n                    output[count--] = a[i];\n            }   \n            else if(j == 0)\n            {\n                if(Arrays.binarySearch(a,b[j]) \u003e= 0)\n                    output[count--] = b[j];\n            }\n        }\n        return output;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        String[] nm = scanner.nextLine().split(\" \");\n\n        int n = Integer.parseInt(nm[0]);\n\n        int m = Integer.parseInt(nm[1]);\n\n        int[] a = new int[n];\n\n        String[] aItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c n; i++) {\n            int aItem = Integer.parseInt(aItems[i]);\n            a[i] = aItem;\n        }\n\n        int[] b = new int[m];\n\n        String[] bItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c m; i++) {\n            int bItem = Integer.parseInt(bItems[i]);\n            b[i] = bItem;\n        }\n\n        int[] result = longestCommonSubsequence(a, b);\n\n        for (int i = 0; i \u003c result.length; i++) {\n            bufferedWriter.write(String.valueOf(result[i]));\n\n            if (i != result.length - 1) {\n                bufferedWriter.write(\" \");\n            }\n        }\n\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java"},{"contest":"Master","challenge":"The Longest Common Subsequence","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\nimport java.lang.*;\n\npublic class Solution {\n\n    // Complete the longestCommonSubsequence function below.\n    static int[] longestCommonSubsequence(int[] a, int[] b)\n    {\n        Integer [][] LCS = new Integer[a.length][b.length];\n        \n        for(int i = 0; i\u003ca.length; i++)\n        {\n            if(Arrays.binarySearch(a,b[0]) \u003e= 0)\n                LCS[i][0] = 1;\n            else\n                LCS[i][0] = 0;\n        }\n        \n        for(int j = 0; j\u003cb.length; j++)\n        {\n            if(Arrays.binarySearch(b,a[0]) \u003e= 0)\n                LCS[0][j] = 1;\n            else\n                LCS[0][j] = 0;\n        }\n        \n        for(int i = 1; i\u003ca.length; i++)\n        {\n            for(int j = 1; j\u003cb.length; j++)\n            {\n                if(a[i] == b[j])\n                    LCS[i][j] = 1 + LCS[i-1][j-1];\n                else\n                    LCS[i][j] = Math.max(LCS[i-1][j],LCS[i][j-1]);\n            }\n        }\n       // System.out.println(LCS[a.length-1][b.length-1]);\n        int n = LCS[a.length-1][b.length-1];\n        int [] output = new int[n];\n        \n        //Backtrack\n        \n        int i = a.length-1; \n        int j = b.length-1;\n        int count = output.length-1;\n        while(i\u003e0 \u0026\u0026 j\u003e0)\n        {\n            if(a[i] == b[j])\n            {\n                output[count--] = a[i];\n                i--;\n                j--;\n            }\n            else if(LCS[i-1][j] \u003c= LCS[i][j-1])\n                j--;\n            else\n                i--;\n        }\n        if(count\u003e0)\n        {    \n            if(i == 0)\n            {\n                if(Arrays.binarySearch(b,a[i]) \u003e= 0)\n                    output[count--] = a[i];\n            }   \n            else if(j == 0)\n            {\n                if(Arrays.binarySearch(a,b[j]) \u003e= 0)\n                    output[count--] = b[j];\n            }\n        }\n        return output;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        String[] nm = scanner.nextLine().split(\" \");\n\n        int n = Integer.parseInt(nm[0]);\n\n        int m = Integer.parseInt(nm[1]);\n\n        int[] a = new int[n];\n\n        String[] aItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c n; i++) {\n            int aItem = Integer.parseInt(aItems[i]);\n            a[i] = aItem;\n        }\n\n        int[] b = new int[m];\n\n        String[] bItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c m; i++) {\n            int bItem = Integer.parseInt(bItems[i]);\n            b[i] = bItem;\n        }\n\n        int[] result = longestCommonSubsequence(a, b);\n\n        for (int i = 0; i \u003c result.length; i++) {\n            bufferedWriter.write(String.valueOf(result[i]));\n\n            if (i != result.length - 1) {\n                bufferedWriter.write(\" \");\n            }\n        }\n\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java"},{"contest":"Master","challenge":"The Longest Common Subsequence","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\nimport java.lang.*;\n\npublic class Solution {\n\n    // Complete the longestCommonSubsequence function below.\n    static int[] longestCommonSubsequence(int[] a, int[] b)\n    {\n        Integer [][] LCS = new Integer[a.length][b.length];\n        \n        for(int i = 0; i\u003ca.length; i++)\n        {\n            if(Arrays.binarySearch(a,b[0]) \u003e= 0)\n                LCS[i][0] = 1;\n            else\n                LCS[i][0] = 0;\n        }\n        \n        for(int j = 0; j\u003cb.length; j++)\n        {\n            if(Arrays.binarySearch(b,a[0]) \u003e= 0)\n                LCS[0][j] = 1;\n            else\n                LCS[0][j] = 0;\n        }\n        \n        for(int i = 1; i\u003ca.length; i++)\n        {\n            for(int j = 1; j\u003cb.length; j++)\n            {\n                if(a[i] == b[j])\n                    LCS[i][j] = 1 + LCS[i-1][j-1];\n                else\n                    LCS[i][j] = Math.max(LCS[i-1][j],LCS[i][j-1]);\n            }\n        }\n       // System.out.println(LCS[a.length-1][b.length-1]);\n        int n = LCS[a.length-1][b.length-1];\n        int [] output = new int[n];\n        \n        //Backtrack\n        \n        int i = a.length-1; \n        int j = b.length-1;\n        int count = output.length-1;\n        while(i\u003e0 \u0026\u0026 j\u003e0)\n        {\n            if(a[i] == b[j])\n            {\n                output[count--] = a[i];\n                i--;\n                j--;\n            }\n            else if(LCS[i-1][j] \u003c= LCS[i][j-1])\n                j--;\n            else\n                i--;\n        }\n        if(count\u003e=0)\n        {    \n            if(i == 0)\n            {\n                if(Arrays.binarySearch(b,a[i]) \u003e= 0)\n                    output[count--] = a[i];\n            }   \n            else if(j == 0)\n            {\n                if(Arrays.binarySearch(a,b[j]) \u003e= 0)\n                    output[count--] = b[j];\n            }\n        }\n        return output;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        String[] nm = scanner.nextLine().split(\" \");\n\n        int n = Integer.parseInt(nm[0]);\n\n        int m = Integer.parseInt(nm[1]);\n\n        int[] a = new int[n];\n\n        String[] aItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c n; i++) {\n            int aItem = Integer.parseInt(aItems[i]);\n            a[i] = aItem;\n        }\n\n        int[] b = new int[m];\n\n        String[] bItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c m; i++) {\n            int bItem = Integer.parseInt(bItems[i]);\n            b[i] = bItem;\n        }\n\n        int[] result = longestCommonSubsequence(a, b);\n\n        for (int i = 0; i \u003c result.length; i++) {\n            bufferedWriter.write(String.valueOf(result[i]));\n\n            if (i != result.length - 1) {\n                bufferedWriter.write(\" \");\n            }\n        }\n\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java"},{"contest":"Master","challenge":"The Longest Common Subsequence","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\nimport java.lang.*;\n\npublic class Solution {\n\n    // Complete the longestCommonSubsequence function below.\n    static int[] longestCommonSubsequence(int[] a, int[] b)\n    {\n        Integer [][] LCS = new Integer[a.length][b.length];\n        \n        for(int i = 0; i\u003ca.length; i++)\n        {\n            if(Arrays.binarySearch(a,b[0]) \u003e= 0)\n                LCS[i][0] = 1;\n            else\n                LCS[i][0] = 0;\n        }\n        \n        for(int j = 0; j\u003cb.length; j++)\n        {\n            if(Arrays.binarySearch(b,a[0]) \u003e= 0)\n                LCS[0][j] = 1;\n            else\n                LCS[0][j] = 0;\n        }\n        \n        for(int i = 1; i\u003ca.length; i++)\n        {\n            for(int j = 1; j\u003cb.length; j++)\n            {\n                if(a[i] == b[j])\n                    LCS[i][j] = 1 + LCS[i-1][j-1];\n                else\n                    LCS[i][j] = Math.max(LCS[i-1][j],LCS[i][j-1]);\n            }\n        }\n       // System.out.println(LCS[a.length-1][b.length-1]);\n        int n = LCS[a.length-1][b.length-1];\n        int [] output = new int[n];\n        \n        //Backtrack\n        \n        int i = a.length-1; \n        int j = b.length-1;\n        int count = output.length-1;\n        while(i\u003e0 \u0026\u0026 j\u003e0)\n        {\n            if(a[i] == b[j])\n            {\n                output[count--] = a[i];\n                i--;\n                j--;\n            }\n            else if(LCS[i-1][j] \u003c= LCS[i][j-1])\n                j--;\n            else\n                i--;\n        }\n        if(count\u003e=0)\n        {    \n            if(i == 0)\n            {\n                if(Arrays.binarySearch(b,a[i]) \u003e= 0)\n                    output[count--] = a[i];\n            }   \n            else if(j == 0)\n            {\n                if(Arrays.binarySearch(a,b[j]) \u003e= 0)\n                    output[count--] = b[j];\n            }\n        }\n        return output;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        String[] nm = scanner.nextLine().split(\" \");\n\n        int n = Integer.parseInt(nm[0]);\n\n        int m = Integer.parseInt(nm[1]);\n\n        int[] a = new int[n];\n\n        String[] aItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c n; i++) {\n            int aItem = Integer.parseInt(aItems[i]);\n            a[i] = aItem;\n        }\n\n        int[] b = new int[m];\n\n        String[] bItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c m; i++) {\n            int bItem = Integer.parseInt(bItems[i]);\n            b[i] = bItem;\n        }\n\n        int[] result = longestCommonSubsequence(a, b);\n\n        for (int i = 0; i \u003c result.length; i++) {\n            bufferedWriter.write(String.valueOf(result[i]));\n\n            if (i != result.length - 1) {\n                bufferedWriter.write(\" \");\n            }\n        }\n\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java"},{"contest":"Master","challenge":"The Longest Common Subsequence","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\nimport java.lang.*;\n\npublic class Solution {\n\n    // Complete the longestCommonSubsequence function below.\n    static int[] longestCommonSubsequence(int[] a, int[] b)\n    {\n        Integer [][] LCS = new Integer[a.length][b.length];\n        int flag = 0 ;\n        for(int i = 0; i\u003ca.length; i++)\n        {\n            if(flag == 1)\n                LCS[i][0] = 1;\n            else if(a[i] == b[0])\n            {\n                flag = 1;\n                LCS[i][0] = 1;\n            }\n            else\n                LCS[i][0] = 0;\n        }\n        \n        for(int j = 0; j\u003cb.length; j++)\n        {\n            if(flag == 1)\n                LCS[0][j] = 1;\n            else if(b[j] == a[0])\n            {\n                flag = 1;\n                LCS[0][j] = 1;\n            }\n            else\n                LCS[0][j] = 0;\n        }\n        \n        for(int i = 1; i\u003ca.length; i++)\n        {\n            for(int j = 1; j\u003cb.length; j++)\n            {\n                if(a[i] == b[j])\n                    LCS[i][j] = 1 + LCS[i-1][j-1];\n                else\n                    LCS[i][j] = Math.max(LCS[i-1][j],LCS[i][j-1]);\n            }\n        }\n        \n        //System.out.println(LCS[a.length-1][b.length-1]);\n        int n = LCS[a.length-1][b.length-1];\n        int [] output = new int[n];\n        \n        //Backtrack\n        \n        int i = a.length-1; \n        int j = b.length-1;\n        int count = output.length-1;\n        while(i\u003e0 \u0026\u0026 j\u003e0)\n        {\n            if(a[i] == b[j])\n            {\n                output[count--] = a[i];\n                i--;\n                j--;\n            }\n            else if(LCS[i-1][j] \u003c= LCS[i][j-1])\n                j--;\n            else\n                i--;\n        }\n        if(count\u003e=0)\n        {    \n          \n            if(i == 0)\n            {\n                Arrays.sort(b);\n                if(Arrays.binarySearch(b,a[i]) \u003e= 0)\n                {\n                    \n                    output[count--] = a[i];\n                }\n            }   \n            else if(j == 0)\n            {\n                Arrays.sort(a);\n                if(Arrays.binarySearch(a,b[j]) \u003e= 0)\n                {\n                   // System.out.println(b[j]);\n                    output[count--] = b[j];\n                }\n            }\n        }\n        return output;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        String[] nm = scanner.nextLine().split(\" \");\n\n        int n = Integer.parseInt(nm[0]);\n\n        int m = Integer.parseInt(nm[1]);\n\n        int[] a = new int[n];\n\n        String[] aItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c n; i++) {\n            int aItem = Integer.parseInt(aItems[i]);\n            a[i] = aItem;\n        }\n\n        int[] b = new int[m];\n\n        String[] bItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c m; i++) {\n            int bItem = Integer.parseInt(bItems[i]);\n            b[i] = bItem;\n        }\n\n        int[] result = longestCommonSubsequence(a, b);\n\n        for (int i = 0; i \u003c result.length; i++) {\n            bufferedWriter.write(String.valueOf(result[i]));\n\n            if (i != result.length - 1) {\n                bufferedWriter.write(\" \");\n            }\n        }\n\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":1.0,"language":"java"},{"contest":"Master","challenge":"The Longest Increasing Subsequence","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the longestIncreasingSubsequence function below.\n    static int longestIncreasingSubsequence(int[] arr) \n    {\n        Integer [] LIS = new Integer[arr.length];\n        Arrays.fill(LIS, -1);\n        LIS[0] = 1;\n        int max = LIS[0];\n        for(int i = 1; i\u003c arr.length ; i++)\n        {\n            for(int j = 0; j \u003ci ; j++)\n            {\n                if(arr[j] \u003c arr[i] \u0026\u0026 LIS[j]+1 \u003e LIS[i])\n                {\n                    LIS[i] = LIS[j] + 1;\n                    if(LIS[i] \u003e max)\n                        max = LIS[i];\n                }\n            }\n        }\n        return max;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        int[] arr = new int[n];\n\n        for (int i = 0; i \u003c n; i++) {\n            int arrItem = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n            arr[i] = arrItem;\n        }\n\n        int result = longestIncreasingSubsequence(arr);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.0,"language":"java"},{"contest":"Master","challenge":"The Longest Increasing Subsequence","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the longestIncreasingSubsequence function below.\n    static int longestIncreasingSubsequence(int[] arr) \n    {\n        Integer [] LIS = new Integer[arr.length];\n        Arrays.fill(LIS, 1);\n        LIS[0] = 1;\n        int max = LIS[0];\n        for(int i = 1; i\u003c arr.length ; i++)\n        {\n            for(int j = 0; j \u003ci ; j++)\n            {\n                if(arr[j] \u003c arr[i] \u0026\u0026 LIS[j]+1 \u003e LIS[i])\n                {\n                    LIS[i] = LIS[j] + 1;\n                    if(LIS[i] \u003e max)\n                        max = LIS[i];\n                }\n            }\n        }\n        return max;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        int[] arr = new int[n];\n\n        for (int i = 0; i \u003c n; i++) {\n            int arrItem = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n            arr[i] = arrItem;\n        }\n\n        int result = longestIncreasingSubsequence(arr);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.444444444444,"language":"java"},{"contest":"Master","challenge":"The Longest Increasing Subsequence","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the longestIncreasingSubsequence function below.\n    static int longestIncreasingSubsequence(int[] arr) \n    {\n        List\u003cInteger\u003e LIS = new ArrayList\u003c\u003e();\n        LIS.add(arr[0]);\n        for(int i  = 1; i\u003carr.length; i++)\n        {\n            if(LIS.get(LIS.size()-1) \u003c arr[i])\n                LIS.add(arr[i]);\n            else\n            {\n                int x = Collections.binarySearch(LIS,arr[i]);\n                x = Math.abs(x);\n                LIS.set(x-1,arr[i]);\n            }\n        }\n        return LIS.size();\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        int[] arr = new int[n];\n\n        for (int i = 0; i \u003c n; i++) {\n            int arrItem = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n            arr[i] = arrItem;\n        }\n\n        int result = longestIncreasingSubsequence(arr);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.333333333333,"language":"java"},{"contest":"Master","challenge":"The Longest Increasing Subsequence","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the longestIncreasingSubsequence function below.\n    static int longestIncreasingSubsequence(int[] arr) \n    {\n        List\u003cInteger\u003e LIS = new ArrayList\u003c\u003e();\n        LIS.add(arr[0]);\n        for(int i  = 1; i\u003carr.length; i++)\n        {\n            if(LIS.get(LIS.size()-1) \u003c arr[i])\n                LIS.add(arr[i]);\n            else\n            {\n                int x = Collections.binarySearch(LIS,arr[i]);\n                x = Math.abs(x);\n                LIS.set(x-1,arr[i]);\n            }\n        }\n        return LIS.size();\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        int[] arr = new int[n];\n\n        for (int i = 0; i \u003c n; i++) {\n            int arrItem = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n            arr[i] = arrItem;\n        }\n\n        int result = longestIncreasingSubsequence(arr);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.333333333333,"language":"java"},{"contest":"Master","challenge":"The Longest Increasing Subsequence","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the longestIncreasingSubsequence function below.\n    static int longestIncreasingSubsequence(int[] arr) \n    {\n        Integer [] LIS = new Integer[arr.length];\n        int count = 0;\n        LIS[count++] = arr[0];\n        for(int i  = 1; i\u003carr.length; i++)\n        {\n            if(LIS[count-1] \u003c arr[i])\n                LIS[count++] = arr[i];\n            else\n            {\n                int x = Arrays.binarySearch(LIS,0,count-1,arr[i]);\n                x = Math.abs(x);\n                LIS[x-1] = arr[i];\n            }\n        }\n        return count;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        int[] arr = new int[n];\n\n        for (int i = 0; i \u003c n; i++) {\n            int arrItem = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n            arr[i] = arrItem;\n        }\n\n        int result = longestIncreasingSubsequence(arr);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.333333333333,"language":"java"},{"contest":"Master","challenge":"The Longest Increasing Subsequence","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the longestIncreasingSubsequence function below.\n    static int longestIncreasingSubsequence(int[] arr) \n   {\n        Integer [] LIS = new Integer[arr.length];\n        int count = 0;\n        LIS[count++] = arr[0];\n        for(int i  = 1; i\u003carr.length; i++)\n        {\n            if(LIS[count-1] \u003c arr[i])\n                LIS[count++] = arr[i];\n            else\n            {\n                int x = Arrays.binarySearch(LIS,0,count-1,arr[i]);\n                x = Math.abs(x);\n                if(x!=0)\n                    x = x-1;\n                LIS[x] = arr[i];\n                //count++;\n            }\n        }\n        return count;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        int[] arr = new int[n];\n\n        for (int i = 0; i \u003c n; i++) {\n            int arrItem = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n            arr[i] = arrItem;\n        }\n\n        int result = longestIncreasingSubsequence(arr);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.333333333333,"language":"java"},{"contest":"Master","challenge":"The Longest Increasing Subsequence","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the longestIncreasingSubsequence function below.\n    static int longestIncreasingSubsequence(int[] arr) \n   {\n        Integer [] LIS = new Integer[arr.length];\n        int count = 0;\n        LIS[count++] = arr[0];\n        for(int i  = 1; i\u003carr.length; i++)\n        {\n            if(LIS[count-1] \u003c arr[i])\n                LIS[count++] = arr[i];\n            else\n            {\n                int x = Arrays.binarySearch(LIS,0,count,arr[i]);\n                x = Math.abs(x);\n                if(x!=0)\n                    x = x-1;\n                LIS[x] = arr[i];\n                //count++;\n            }\n        }\n        return count;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        int[] arr = new int[n];\n\n        for (int i = 0; i \u003c n; i++) {\n            int arrItem = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n            arr[i] = arrItem;\n        }\n\n        int result = longestIncreasingSubsequence(arr);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.333333333333,"language":"java"},{"contest":"Master","challenge":"The Longest Increasing Subsequence","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the longestIncreasingSubsequence function below.\n     static int longestIncreasingSubsequence(int[] arr) \n    {\n        Integer [] LIS = new Integer[arr.length];\n        int count = 0;\n        LIS[count++] = arr[0];\n        int manage = 0;\n        for(int i  = 1; i\u003carr.length; i++)\n        {\n            if(LIS[count-1] \u003c arr[i])\n                LIS[count++] = arr[i];\n            else\n            {\n                int x = Arrays.binarySearch(LIS,0,count-1,arr[i]);\n                x = Math.abs(x);\n                if(x != 0)\n                {\n                    x = x-1;\n                    LIS[x] = arr[i];\n                }\n                else\n                {\n                    //count = 0;\n                    manage++;\n                    LIS[0] = arr[i];\n                    //System.out.println(\"Hello\");\n                }\n                \n                //count++;\n            }\n        }\n        return count+manage;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        int[] arr = new int[n];\n\n        for (int i = 0; i \u003c n; i++) {\n            int arrItem = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n            arr[i] = arrItem;\n        }\n\n        int result = longestIncreasingSubsequence(arr);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.444444444444,"language":"java"},{"contest":"Master","challenge":"The Longest Increasing Subsequence","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the longestIncreasingSubsequence function below.\n     static int CeilIndex(Integer A[], int l, int r, int key) \n    { \n        while (r - l \u003e 1) \n        { \n            int m = l + (r - l)/2; \n            if (A[m]\u003e=key) \n                r = m; \n            else\n                l = m; \n        } \n  \n        return r; \n    } \n\n    // Complete the longestIncreasingSubsequence function below.\n    static int longestIncreasingSubsequence(int[] arr) \n    {\n        Integer [] LIS = new Integer[arr.length];\n        int count = 0;\n        LIS[count++] = arr[0];\n        int manage = 0;\n        for(int i  = 1; i\u003carr.length; i++)\n        {\n            if(LIS[count-1] \u003c arr[i])\n                LIS[count++] = arr[i];\n            else\n            {\n                \n                if(arr[i] \u003c LIS[0])\n                {\n                    \n                    LIS[0] = arr[i];\n                }\n                else\n                {\n                    int x = CeilIndex(LIS,-1,count-1,arr[i]);\n                    LIS[x] = arr[i];\n                }\n                \n            }\n        }\n        return count;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        int[] arr = new int[n];\n\n        for (int i = 0; i \u003c n; i++) {\n            int arrItem = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n            arr[i] = arrItem;\n        }\n\n        int result = longestIncreasingSubsequence(arr);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":1.0,"language":"java"},{"contest":"Master","challenge":"Play with words","code":"import java.io.*;\nimport java.math.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    /*\n     * Complete the playWithWords function below.\n     */\n    static int playWithWords(String s) \n    {\n        Integer [][] LPS = new Integer[s.length()][s.length()];\n        for(int i =0 ; i\u003cs.length(); i++)\n            LPS[i][i] = 1;\n        int n = s.length();\n        for(int length = 1; length\u003cs.length(); length++)\n        {\n            for(int i = 0; i\u003cs.length() - length; i++)\n            {\n                int j = i + length;\n                if(s.charAt(i) == s.charAt(j) \u0026\u0026 length == 1)\n                    LPS[i][j] = 2;\n                else if(s.charAt(i) == s.charAt(j))\n                    LPS[i][j] = 2 + LPS[i+1][j-1];\n                else\n                    LPS[i][j] = Math.max(LPS[i][j-1], LPS[i+1][j]);\n            }\n        }\n        int maxResult = 0;\n      \n        for(int length = 0; length\u003cs.length(); length++)\n        {\n            for(int i = 0; i\u003cs.length() - length-1; i++)\n            {\n                int j = i + length;\n                int result = LPS[i][j] * LPS[j+1][n-1];\n                if(result\u003e maxResult)\n                    maxResult = result;\n            }\n        }\n       /* for(int i =0 ;i\u003cs.length();i++)\n        {\n            for(int j =0; j\u003cs.length(); j++)\n                System.out.print(LPS[i][j] + \" \");\n            System.out.println(\" \");\n        }*/\n        return maxResult;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        String s = scanner.nextLine();\n\n        int result = playWithWords(s);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n    }\n}\n","score":1.0,"language":"java"},{"contest":"Master","challenge":"Fibonacci Modified","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\nimport java.math.BigInteger; \n\npublic class Solution {\n\n    // Complete the fibonacciModified function below.\n    static String fibonacciModified(int t1, int t2, int n) \n    {\n        BigInteger answer = new BigInteger(\"0\");\n        BigInteger a1,a2;\n        a1 = (BigInteger.valueOf(t1));\n        a2 = (BigInteger.valueOf(t2));\n        for(int i = 2; i\u003cn; i++)\n        {\n            answer = a1.add(a2.multiply(a2));\n            a1 = a2;\n            a2 = answer;\n        }\n        return answer.toString();\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        String[] t1T2n = scanner.nextLine().split(\" \");\n\n        int t1 = Integer.parseInt(t1T2n[0]);\n\n        int t2 = Integer.parseInt(t1T2n[1]);\n\n        int n = Integer.parseInt(t1T2n[2]);\n\n        String result = fibonacciModified(t1, t2, n);\n\n        bufferedWriter.write((result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Bear and Steady Gene","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n    \n    static int checker(int []more,int[]less)\n    {\n        if(more[0]\u003e=less[0])\n        if(more[1]\u003e=less[1])\n        if(more[2]\u003e=less[2])\n        if(more[3]\u003e=less[3])\n            return 1;\n        return 0;\n    }\n    // Complete the steadyGene function below.\n    static int steadyGene(String gene) \n    {\n        char[] geneArr = gene.toCharArray();\n        int n=geneArr.length;\n        int minReplace=500000;\n        int counts[] = new int[4];\n        // 0=a 1=c 2=g 3=t\n        for(int i=0;i\u003cn;i++)\n        {\n            if(geneArr[i]=='A')\n                counts[0]++;\n            if(geneArr[i]=='C')\n                counts[1]++;\n            if(geneArr[i]=='G')\n                counts[2]++;\n            if(geneArr[i]=='T')\n                counts[3]++;\n        }\n        counts[0]=counts[0]-(n/4);\n        counts[1]=counts[1]-(n/4);\n        counts[2]=counts[2]-(n/4);\n        counts[3]=counts[3]-(n/4);\n        int [] checkerArr= new int[4];\n        if(counts[0]\u003c0)\n            counts[0]=0;\n        if(counts[1]\u003c0)\n            counts[1]=0;\n        if(counts[2]\u003c0)\n            counts[2]=0;\n        if(counts[3]\u003c0)\n            counts[3]=0;\n        // System.out.println(counts[0]+\" \"+counts[1]+\" \"+counts[2]+\" \"+counts[3]+\" \");\n        int j=0;\n        for(int i=0;i\u003cn;i++)\n        {\n            if(geneArr[i]=='A')\n                checkerArr[0]++;\n            if(geneArr[i]=='C')\n                checkerArr[1]++;\n            if(geneArr[i]=='G')\n                checkerArr[2]++;\n            if(geneArr[i]=='T')\n                checkerArr[3]++;\n                \n            if(checker(checkerArr,counts)==1)\n            {\n                // System.out.println(checkerArr[0]+\" \"+checkerArr[1]+\" \"+checkerArr[2]+\" \"+checkerArr[3]+\" \");\n                if(minReplace\u003ei-j+1)\n                {\n                    minReplace=i-j+1;\n\n                }\n        // System.out.println(\"found min Replace : \"+minReplace+\" between \"+i+\" and \"+j);\n        if(j\u003cn){\n            if(geneArr[j]=='A')\n                checkerArr[0]--;\n            if(geneArr[j]=='C')\n                checkerArr[1]--;\n            if(geneArr[j]=='G')\n                checkerArr[2]--;\n            if(geneArr[j]=='T')\n                checkerArr[3]--;\n                j++;\n            }\n            while(checker(checkerArr,counts)!=0\u0026\u0026j\u003ci)\n            {\n                if(minReplace\u003ei-j+1)\n                minReplace=i-j+1;\n            if(geneArr[j]=='A')\n                checkerArr[0]--;\n            if(geneArr[j]=='C')\n                checkerArr[1]--;\n            if(geneArr[j]=='G')\n                checkerArr[2]--;\n            if(geneArr[j]=='T')\n                checkerArr[3]--;\n                j++;\n            }\n            }\n        }\n        // System.out.println(\"final minReplace is \"+minReplace);\n        return minReplace;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        String gene = scanner.nextLine();\n\n        int result = steadyGene(gene);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":0.9,"language":"java8"},{"contest":"Master","challenge":"Bear and Steady Gene","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n    \n    static int checker(int []more,int[]less)\n    {\n        if(more[0]\u003e=less[0])\n        if(more[1]\u003e=less[1])\n        if(more[2]\u003e=less[2])\n        if(more[3]\u003e=less[3])\n            return 1;\n        return 0;\n    }\n    // Complete the steadyGene function below.\n    static int steadyGene(String gene) \n    {\n        char[] geneArr = gene.toCharArray();\n        int n=geneArr.length;\n        int minReplace=500000;\n        int counts[] = new int[4];\n        // 0=a 1=c 2=g 3=t\n        for(int i=0;i\u003cn;i++)\n        {\n            if(geneArr[i]=='A')\n                counts[0]++;\n            if(geneArr[i]=='C')\n                counts[1]++;\n            if(geneArr[i]=='G')\n                counts[2]++;\n            if(geneArr[i]=='T')\n                counts[3]++;\n        }\n        counts[0]=counts[0]-(n/4);\n        counts[1]=counts[1]-(n/4);\n        counts[2]=counts[2]-(n/4);\n        counts[3]=counts[3]-(n/4);\n        int [] checkerArr= new int[4];\n        if(counts[0]\u003c0)\n            counts[0]=0;\n        if(counts[1]\u003c0)\n            counts[1]=0;\n        if(counts[2]\u003c0)\n            counts[2]=0;\n        if(counts[3]\u003c0)\n            counts[3]=0;\n        if(counts[0]==0\u0026\u0026counts[1]==0\u0026\u0026counts[2]==0\u0026\u0026counts[3]==0)\n            return 0;\n        // System.out.println(counts[0]+\" \"+counts[1]+\" \"+counts[2]+\" \"+counts[3]+\" \");\n        int j=0;\n        for(int i=0;i\u003cn;i++)\n        {\n            if(geneArr[i]=='A')\n                checkerArr[0]++;\n            if(geneArr[i]=='C')\n                checkerArr[1]++;\n            if(geneArr[i]=='G')\n                checkerArr[2]++;\n            if(geneArr[i]=='T')\n                checkerArr[3]++;\n                \n            if(checker(checkerArr,counts)==1)\n            {\n                // System.out.println(checkerArr[0]+\" \"+checkerArr[1]+\" \"+checkerArr[2]+\" \"+checkerArr[3]+\" \");\n                if(minReplace\u003ei-j+1)\n                {\n                    minReplace=i-j+1;\n\n                }\n        // System.out.println(\"found min Replace : \"+minReplace+\" between \"+i+\" and \"+j);\n        if(j\u003cn){\n            if(geneArr[j]=='A')\n                checkerArr[0]--;\n            if(geneArr[j]=='C')\n                checkerArr[1]--;\n            if(geneArr[j]=='G')\n                checkerArr[2]--;\n            if(geneArr[j]=='T')\n                checkerArr[3]--;\n                j++;\n            }\n            while(checker(checkerArr,counts)!=0\u0026\u0026j\u003ci)\n            {\n                if(minReplace\u003ei-j+1)\n                minReplace=i-j+1;\n            if(geneArr[j]=='A')\n                checkerArr[0]--;\n            if(geneArr[j]=='C')\n                checkerArr[1]--;\n            if(geneArr[j]=='G')\n                checkerArr[2]--;\n            if(geneArr[j]=='T')\n                checkerArr[3]--;\n                j++;\n            }\n            }\n        }\n        // System.out.println(\"final minReplace is \"+minReplace);\n        return minReplace;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        String gene = scanner.nextLine();\n\n        int result = steadyGene(gene);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":1.0,"language":"java8"},{"contest":"Master","challenge":"The Maximum Subarray","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the maxSubarray function below.\n    static int[] maxSubarray(int[] arr) \n    {\n        int [] result = new int[2];\n        int maxhere = arr[0] ;\n        int maxtillnow = arr[0] ;\n        for(int i  = 1; i\u003carr.length ; i++)\n        {\n            maxhere  = Math.max(arr[i] , maxhere + arr[i]);\n            maxtillnow = Math.max(maxhere , maxtillnow);\n        }\n        result[0] = maxtillnow;\n    \n        int max = arr[0];\n        \n        for(int i  = 1; i\u003carr.length; i++)\n        {\n            max = Math.max(Math.max(max , max + arr[i]), arr[i]);\n        }\n        result[1] = max; \n        return result;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int t = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int tItr = 0; tItr \u003c t; tItr++) {\n            int n = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            int[] arr = new int[n];\n\n            String[] arrItems = scanner.nextLine().split(\" \");\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n            for (int i = 0; i \u003c n; i++) {\n                int arrItem = Integer.parseInt(arrItems[i]);\n                arr[i] = arrItem;\n            }\n\n            int[] result = maxSubarray(arr);\n\n            for (int i = 0; i \u003c result.length; i++) {\n                bufferedWriter.write(String.valueOf(result[i]));\n\n                if (i != result.length - 1) {\n                    bufferedWriter.write(\" \");\n                }\n            }\n\n            bufferedWriter.newLine();\n        }\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Jumping on the Clouds","code":"import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.text.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    // Complete the jumpingOnClouds function below.\n    static int jumpingOnClouds(int[] c) \n    {\n        int turns = 0;\n        int i = 0;\n        int n = c.length;\n        while(i \u003c n)\n        {\n            if(i \u003c (n-2))\n            {\n                if(c[i+2] == 0)\n                    i = i + 2;\n                else\n                    i++;\n            }    \n            else\n                i++;\n            turns ++;\n        }\n        return turns-1;\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\n\n        int n = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        int[] c = new int[n];\n\n        String[] cItems = scanner.nextLine().split(\" \");\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        for (int i = 0; i \u003c n; i++) {\n            int cItem = Integer.parseInt(cItems[i]);\n            c[i] = cItem;\n        }\n\n        int result = jumpingOnClouds(c);\n\n        bufferedWriter.write(String.valueOf(result));\n        bufferedWriter.newLine();\n\n        bufferedWriter.close();\n\n        scanner.close();\n    }\n}\n","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Prim's (MST) : Special Subtree","code":"import java.util.*;\nimport java.io.*;\npublic class problemset2_1 {\n    static class Node {\n        int id;\n        int color;\n        int priority;\n    }\n    static class Edge {\n        int sourceId;\n        int destinationId;\n        int weight;\n    }\n    static class comparator implements Comparator\u003cNode\u003e\n    {\n        @Override\n        public int compare (Node n1 ,Node n2)\n        {\n            return n1.priority - n2.priority;\n        }\n    }\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader br = new BufferedReader(new InputStreamReader (System.in));\n        \n        String [] input = br.readLine().split(\" \");\n        int V = Integer.parseInt(input[0]);\n        int E = Integer.parseInt(input[1]);\n        List\u003cEdge\u003e edgeList = new ArrayList\u003cEdge\u003e();\n        for(int i = 0 ; i \u003c E; i++)\n        {\n            Edge e = new Edge();\n            String[] in = br.readLine().split(\" \");\n            e.sourceId = Integer.parseInt(in[0]) - 1;\n            e.destinationId = Integer.parseInt(in[1]) - 1;\n            e.weight = Integer.parseInt(in[2]);\n            edgeList.add(e);\n        }\n        int x = Integer.parseInt(br.readLine());\n        Node nodeList [] =new Node[V];\n        for(int i = 0 ; i \u003c V ; i++)\n        {\n            Node n = new Node();\n            n.id = i; \n            n.priority = Integer.MAX_VALUE;\n            n.color = 0; // RED  = 0 // BLUE = 1 // GREEN = 2\n            nodeList[i] = n;\n        }\n        PriorityQueue\u003cNode\u003e queue = new PriorityQueue\u003c\u003e(V, new comparator());\n        \n        \n        //Prims Chalu//\n        nodeList[0].priority = 0;\n        queue.add(nodeList[0]);\n        nodeList[0].color = 1;\n        int count = 0;\n        while(!queue.isEmpty())\n        {\n            Node u = queue.poll();\n            nodeList[u.id].color = 2; // GREEN\n            for(int i = 0 ;i \u003cE ;i ++)\n            {\n                Edge e  = edgeList.get(i);\n                if(e.sourceId == u.id || e.destinationId == u.id)\n                {\n                    int source,dest;\n                    if(u.id == e.sourceId)\n                    {\n                        source = e.sourceId;\n                        dest = e.destinationId;\n                    }\n                    else\n                    {\n                        source = e.destinationId;\n                        dest = e.sourceId; \n                    }\n                    if(nodeList[dest].color == 0) // RED\n                    {\n                        nodeList[dest].priority = e.weight;\n                        queue.add(nodeList[dest]);\n                        nodeList[dest].color = 1; // BLUE\n                    }\n                    else if (nodeList[dest].color == 1 \u0026\u0026 nodeList[dest].priority \u003e e.weight)\n                    {\n                        nodeList[dest].priority = e.weight;\n                    }\n                }\n            }\n         }\n        int minWeight = 0;\n        for(int i = 0 ; i \u003c V ; i++)\n        {\n            minWeight += nodeList[i].priority;\n        }\n        System.out.println(minWeight);\n    }\n\n}\n","score":0.411764705882,"language":"java8"},{"contest":"Master","challenge":"Prim's (MST) : Special Subtree","code":"import java.util.*;\nimport java.io.*;\npublic class problemset2_1 {\n    static class Node {\n        int id;\n        int color;\n        int priority;\n    }\n    static class Edge {\n        int sourceId;\n        int destinationId;\n        int weight;\n    }\n    static class comparator implements Comparator\u003cNode\u003e\n    {\n        @Override\n        public int compare (Node n1 ,Node n2)\n        {\n            return n1.priority - n2.priority;\n        }\n    }\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader br = new BufferedReader(new InputStreamReader (System.in));\n        \n        String [] input = br.readLine().split(\" \");\n        int V = Integer.parseInt(input[0]);\n        int E = Integer.parseInt(input[1]);\n        List\u003cEdge\u003e edgeList = new ArrayList\u003cEdge\u003e();\n        for(int i = 0 ; i \u003c E; i++)\n        {\n            Edge e = new Edge();\n            String[] in = br.readLine().split(\" \");\n            e.sourceId = Integer.parseInt(in[0]) - 1;\n            e.destinationId = Integer.parseInt(in[1]) - 1;\n            e.weight = Integer.parseInt(in[2]);\n            edgeList.add(e);\n        }\n        int x = Integer.parseInt(br.readLine());\n        Node nodeList [] =new Node[V];\n        for(int i = 0 ; i \u003c V ; i++)\n        {\n            Node n = new Node();\n            n.id = i; \n            n.priority = -1;\n            n.color = 0; // RED  = 0 // BLUE = 1 // GREEN = 2\n            nodeList[i] = n;\n        }\n        PriorityQueue\u003cNode\u003e queue = new PriorityQueue\u003c\u003e(V, new comparator());\n        \n        \n        //Prims Chalu//\n        nodeList[0].priority = 0;\n        queue.add(nodeList[0]);\n        nodeList[0].color = 1;\n        int count = 0;\n        while(!queue.isEmpty())\n        {\n            Node u = queue.poll();\n            nodeList[u.id].color = 2; // GREEN\n            for(int i = 0 ;i \u003cE ;i ++)\n            {\n                Edge e  = edgeList.get(i);\n                if(e.sourceId == u.id || e.destinationId == u.id)\n                {\n                    int source,dest;\n                    if(u.id == e.sourceId)\n                    {\n                        source = e.sourceId;\n                        dest = e.destinationId;\n                    }\n                    else\n                    {\n                        source = e.destinationId;\n                        dest = e.sourceId; \n                    }\n                    if(nodeList[dest].color == 0) // RED\n                    {\n                        nodeList[dest].priority = e.weight;\n                        queue.add(nodeList[dest]);\n                        nodeList[dest].color = 1; // BLUE\n                    }\n                    else if (nodeList[dest].color == 1 \u0026\u0026 nodeList[dest].priority \u003e e.weight)\n                    {\n                        nodeList[dest].priority = e.weight;\n                    }\n                }\n            }\n         }\n        int minWeight = 0;\n        for(int i = 0 ; i \u003c V ; i++)\n        {\n            minWeight += nodeList[i].priority;\n        }\n        System.out.println(minWeight);\n    }\n\n}\n","score":0.411764705882,"language":"java8"},{"contest":"Master","challenge":"Prim's (MST) : Special Subtree","code":"import java.util.*;\nimport java.io.*;\npublic class problemset2_1 {\n    static class Node {\n        int id;\n        int color;\n        int priority;\n    }\n    static class Edge {\n        int sourceId;\n        int destinationId;\n        int weight;\n    }\n    static class comparator implements Comparator\u003cNode\u003e\n    {\n        @Override\n        public int compare (Node n1 ,Node n2)\n        {\n            return n1.priority - n2.priority;\n        }\n    }\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader br = new BufferedReader(new InputStreamReader (System.in));\n        \n        String [] input = br.readLine().split(\" \");\n        int V = Integer.parseInt(input[0]);\n        int E = Integer.parseInt(input[1]);\n        List\u003cEdge\u003e edgeList = new ArrayList\u003cEdge\u003e();\n        for(int i = 0 ; i \u003c E; i++)\n        {\n            Edge e = new Edge();\n            String[] in = br.readLine().split(\" \");\n            e.sourceId = Integer.parseInt(in[0]) - 1;\n            e.destinationId = Integer.parseInt(in[1]) - 1;\n            e.weight = Integer.parseInt(in[2]);\n            edgeList.add(e);\n        }\n        int x = Integer.parseInt(br.readLine());\n        Node nodeList [] =new Node[V];\n        for(int i = 0 ; i \u003c V ; i++)\n        {\n            Node n = new Node();\n            n.id = i; \n            n.priority = -1;\n            n.color = 0; // RED  = 0 // BLUE = 1 // GREEN = 2\n            nodeList[i] = n;\n        }\n        PriorityQueue\u003cNode\u003e queue = new PriorityQueue\u003c\u003e(V, new comparator());\n        \n        \n        //Prims Chalu//\n        nodeList[0].priority = 0;\n        queue.add(nodeList[0]);\n        nodeList[0].color = 1;\n        int count = 0;\n        while(!queue.isEmpty())\n        {\n            Node u = queue.poll();\n            nodeList[u.id].color = 2; // GREEN\n            for(int i = 0 ;i \u003cE ;i ++)\n            {\n                Edge e  = edgeList.get(i);\n                if(e.sourceId == u.id || e.destinationId == u.id)\n                {\n                    int source,dest;\n                    if(u.id == e.sourceId)\n                    {\n                        source = e.sourceId;\n                        dest = e.destinationId;\n                    }\n                    else\n                    {\n                        source = e.destinationId;\n                        dest = e.sourceId; \n                    }\n                    if(nodeList[dest].color == 0) // RED\n                    {\n                        nodeList[dest].priority = e.weight;\n                        queue.add(nodeList[dest]);\n                        nodeList[dest].color = 1; // BLUE\n                    }\n                    else if (nodeList[dest].color == 1 \u0026\u0026 nodeList[dest].priority \u003e e.weight)\n                    {\n                        nodeList[dest].priority = e.weight;\n                    }\n                }\n            }\n         }\n        int minWeight = 0;\n        for(int i = 0 ; i \u003c V ; i++)\n        {\n            minWeight += nodeList[i].priority;\n        }\n        System.out.println(minWeight);\n    }\n\n}\n","score":0.411764705882,"language":"java8"},{"contest":"Master","challenge":"Prim's (MST) : Special Subtree","code":"import java.util.*;\nimport java.io.*;\npublic class problemset2_1 {\n    static class Node {\n        int id;\n        int color;\n        int priority;\n    }\n    static class Edge {\n        int sourceId;\n        int destinationId;\n        int weight;\n    }\n    static class comparator implements Comparator\u003cNode\u003e\n    {\n        @Override\n        public int compare (Node n1 ,Node n2)\n        {\n            return n1.priority - n2.priority;\n        }\n    }\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader br = new BufferedReader(new InputStreamReader (System.in));\n        \n        String [] input = br.readLine().split(\" \");\n        int V = Integer.parseInt(input[0]);\n        int E = Integer.parseInt(input[1]);\n        List\u003cEdge\u003e edgeList = new ArrayList\u003cEdge\u003e();\n        for(int i = 0 ; i \u003c E; i++)\n        {\n            Edge e = new Edge();\n            String[] in = br.readLine().split(\" \");\n            e.sourceId = Integer.parseInt(in[0]) - 1;\n            e.destinationId = Integer.parseInt(in[1]) - 1;\n            e.weight = Integer.parseInt(in[2]);\n            edgeList.add(e);\n        }\n        int x = Integer.parseInt(br.readLine()) - 1;\n        Node nodeList [] =new Node[V];\n        for(int i = 0 ; i \u003c V ; i++)\n        {\n            Node n = new Node();\n            n.id = i; \n            n.priority = -1;\n            n.color = 0; // RED  = 0 // BLUE = 1 // GREEN = 2\n            nodeList[i] = n;\n        }\n        PriorityQueue\u003cNode\u003e queue = new PriorityQueue\u003c\u003e(V, new comparator());\n        \n        \n        //Prims Chalu//\n        nodeList[x].priority = 0;\n        queue.add(nodeList[x]);\n        nodeList[x].color = 1;\n        int count = 0;\n        while(!queue.isEmpty())\n        {\n            Node u = queue.poll();\n            nodeList[u.id].color = 2; // GREEN\n            for(int i = 0 ;i \u003cE ;i ++)\n            {\n                Edge e  = edgeList.get(i);\n                if(e.sourceId == u.id || e.destinationId == u.id)\n                {\n                    int source,dest;\n                    if(u.id == e.sourceId)\n                    {\n                        source = e.sourceId;\n                        dest = e.destinationId;\n                    }\n                    else\n                    {\n                        source = e.destinationId;\n                        dest = e.sourceId; \n                    }\n                    if(nodeList[dest].color == 0) // RED\n                    {\n                        nodeList[dest].priority = e.weight;\n                        queue.add(nodeList[dest]);\n                        nodeList[dest].color = 1; // BLUE\n                    }\n                    else if (nodeList[dest].color == 1 \u0026\u0026 nodeList[dest].priority \u003e e.weight)\n                    {\n                        nodeList[dest].priority = e.weight;\n                    }\n                }\n            }\n         }\n        int minWeight = 0;\n        for(int i = 0 ; i \u003c V ; i++)\n        {\n            minWeight += nodeList[i].priority;\n        }\n        System.out.println(minWeight);\n    }\n\n}\n","score":0.411764705882,"language":"java8"},{"contest":"Master","challenge":"Prim's (MST) : Special Subtree","code":"// Java program for Prim's MST for \n// adjacency list representation of graph \nimport java.util.LinkedList; \nimport java.util.PriorityQueue; \nimport java.util.Comparator; \nimport java.io.*;\npublic class prims { \n    class node1 { \n\n        // Stores destination vertex in adjacency list \n        int dest; \n\n        // Stores weight of a vertex in adjacency list \n        int weight; \n\n        // Constructor \n        node1(int a, int b) \n        { \n            dest = a; \n            weight = b; \n        } \n    } \n    static class Graph { \n\n        // Number of vertices in the graph \n        int V; \n\n        // List of adjacent nodes of a given vertex \n        LinkedList\u003cnode1\u003e[] adj; \n\n        // Constructor \n        Graph(int e) \n        { \n            V = e; \n            adj = new LinkedList[V]; \n            for (int o = 0; o \u003c V; o++) \n                adj[o] = new LinkedList\u003c\u003e(); \n        } \n    } \n\n    // class to represent a node in PriorityQueue \n    // Stores a vertex and its corresponding \n    // key value \n    class node { \n        int vertex; \n        int key; \n    } \n\n    // Comparator class created for PriorityQueue \n    // returns 1 if node0.key \u003e node1.key \n    // returns 0 if node0.key \u003c node1.key and \n    // returns -1 otherwise \n    class comparator implements Comparator\u003cnode\u003e { \n\n        @Override\n        public int compare(node node0, node node1) \n        { \n            return node0.key - node1.key; \n        } \n    } \n\n    // method to add an edge \n    // between two vertices \n    void addEdge(Graph graph, int src, int dest, int weight) \n    { \n\n        node1 node0 = new node1(dest, weight); \n        node1 node = new node1(src, weight); \n        graph.adj[src].addLast(node0); \n        graph.adj[dest].addLast(node); \n    } \n\n    // method used to find the mst \n    void prims_mst(Graph graph) \n    { \n\n        // Whether a vertex is in PriorityQueue or not \n        Boolean[] mstset = new Boolean[graph.V]; \n        node[] e = new node[graph.V]; \n\n        // Stores the parents of a vertex \n        int[] parent = new int[graph.V]; \n\n        for (int o = 0; o \u003c graph.V; o++) \n            e[o] = new node(); \n\n        for (int o = 0; o \u003c graph.V; o++) { \n\n            // Initialize to false \n            mstset[o] = false; \n\n            // Initialize key values to infinity \n            e[o].key = Integer.MAX_VALUE; \n            e[o].vertex = o; \n            parent[o] = -1; \n        } \n\n        // Include the source vertex in mstset \n        mstset[0] = true; \n\n        // Set key value to 0 \n        // so that it is extracted first \n        // out of PriorityQueue \n        e[0].key = 0; \n\n        // PriorityQueue \n        PriorityQueue\u003cnode\u003e queue = new PriorityQueue\u003c\u003e(graph.V, new comparator()); \n\n        for (int o = 0; o \u003c graph.V; o++) \n            queue.add(e[o]); \n\n        // Loops until the PriorityQueue is not empty \n        while (!queue.isEmpty()) { \n\n            // Extracts a node with min key value \n            node node0 = queue.poll(); \n\n            // Include that node into mstset \n            mstset[node0.vertex] = true; \n\n            // For all adjacent vertex of the extracted vertex V \n            for (node1 iterator : graph.adj[node0.vertex]) { \n\n                // If V is in PriorityQueue \n                if (mstset[iterator.dest] == false) { \n                    // If the key value of the adjacent vertex is \n                    // more than the extracted key \n                    // update the key value of adjacent vertex \n                    // to update first remove and add the updated vertex \n                    if (e[iterator.dest].key \u003e iterator.weight) { \n                        queue.remove(e[iterator.dest]); \n                        e[iterator.dest].key = iterator.weight; \n                        queue.add(e[iterator.dest]); \n                        parent[iterator.dest] = node0.vertex; \n                    } \n                } \n            } \n        }\n        int wmst = 0;\n        for(int i = 0 ; i\u003c graph.V ; i++)\n        {\n            wmst = wmst + e[i].key;\n        }\n        System.out.println(wmst); \n    } \n\n    public static void main(String[] args) throws IOException\n    { \n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String [] input = br.readLine().split(\" \");\n        int V = Integer.parseInt(input[0]);\n        int E = Integer.parseInt(input[1]);\n        Graph graph = new Graph(V); \n\n        prims e = new prims(); \n        for(int i = 0 ; i\u003cE ; i++)\n        {\n            String [] str = br.readLine().split(\" \");\n            int s = Integer.parseInt(str[0]) - 1;\n            int d = Integer.parseInt(str[1]) - 1;\n            int w = Integer.parseInt(str[2]);\n            e.addEdge(graph,s,d,w);\n        }\n        // Method invoked \n        e.prims_mst(graph); \n    } \n} \n// This code is contributed by Vikash Kumar Dubey \n","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Prim's (MST) : Special Subtree","code":"import java.util.*;\nimport java.io.*;\npublic class problemset2_1 {\n    static class Node {\n        int id;\n        int color;\n        int priority;\n    }\n    static class Edge {\n        int sourceId;\n        int destinationId;\n        int weight;\n    }\n    static class comparator implements Comparator\u003cNode\u003e\n    {\n        @Override\n        public int compare (Node n1 ,Node n2)\n        {\n            return n1.priority - n2.priority;\n        }\n    }\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader br = new BufferedReader(new InputStreamReader (System.in));\n        \n        String [] input = br.readLine().split(\" \");\n        int V = Integer.parseInt(input[0]);\n        int E = Integer.parseInt(input[1]);\n        List\u003cEdge\u003e edgeList = new ArrayList\u003cEdge\u003e();\n        for(int i = 0 ; i \u003c E; i++)\n        {\n            Edge e = new Edge();\n            String[] in = br.readLine().split(\" \");\n            e.sourceId = Integer.parseInt(in[0]) - 1;\n            e.destinationId = Integer.parseInt(in[1]) - 1;\n            e.weight = Integer.parseInt(in[2]);\n            edgeList.add(e);\n        }\n        Node nodeList [] =new Node[V];\n        for(int i = 0 ; i \u003c V ; i++)\n        {\n            Node n = new Node();\n            n.id = i; \n            n.priority = Integer.MAX_VALUE;\n            n.color = 0; // RED  = 0 // BLUE = 1 // GREEN = 2\n            nodeList[i] = n;\n        }\n        PriorityQueue\u003cNode\u003e queue = new PriorityQueue\u003c\u003e(V, new comparator());\n        \n        \n        Integer parent [] = new Integer[V];\n        \n        //Prims Chalu//\n        nodeList[0].priority = 0;\n        queue.add(nodeList[0]);\n        nodeList[0].color = 1;\n        parent[0] = 0;\n        while(!queue.isEmpty())\n        {\n            Node u = queue.poll();\n            nodeList[u.id].color = 2; // GREEN\n            for(int i = 0 ;i \u003cE ;i ++)\n            {\n                Edge e  = edgeList.get(i);\n                    if((e.sourceId == u.id) || (e.destinationId == u.id))\n                    {\n                        int source = -1,dest =-1;\n                        if(u.id == e.sourceId)\n                        {\n                            source = e.sourceId;\n                            dest = e.destinationId;\n                        }\n                        else if(u.id == e.destinationId)\n                        {\n                            source = e.destinationId;\n                            dest = e.sourceId; \n                        }\n                        if(nodeList[dest].color == 0) // RED\n                        {\n                            nodeList[dest].priority = e.weight;\n                            queue.add(nodeList[dest]);\n                            parent[dest] = source;\n                            nodeList[dest].color = 1; // BLUE\n                        }\n                        else if (nodeList[dest].color == 1 \u0026\u0026 e.weight \u003c nodeList[dest].priority)\n                        {\n                            queue.remove(nodeList[dest]);\n                            nodeList[dest].priority = e.weight;\n                            queue.add(nodeList[dest]);\n                            parent[dest] = source;\n                        }\n                    }\n                }\n            }\n        int minWeight = 0;\n        for(int i = 1 ; i \u003c V ; i++)\n        {\n//            System.out.print((nodeList[i].priority) + \" \");\n            minWeight += nodeList[i].priority;\n        }\n        //System.out.println();\n        /*for(int i = 1 ; i \u003c V ; i++)\n        {\n            System.out.println((i+1) +  \"--\" + (parent[i]+1));\n        }*/\n        System.out.println(minWeight);\n    }\n\n}\n","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Dijkstra: Shortest Reach 2","code":"import java.util.*;\nimport java.io.*;\npublic class Djikstra \n{\n    static class Node {\n        int id;\n        int color;\n        int priority;\n    }\n    static class Edge {\n        int sourceId;\n        int destinationId;\n        int weight;\n    }\n    static class comparator implements Comparator\u003cNode\u003e\n    {\n        @Override\n        public int compare (Node n1 ,Node n2)\n        {\n            return n1.priority - n2.priority;\n        }\n    }\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader br = new BufferedReader(new InputStreamReader (System.in));\n        int T = Integer.parseInt(br.readLine());\n        while(T!= 0)\n        {\n            String [] input = br.readLine().split(\" \");\n            int V = Integer.parseInt(input[0]);\n            int E = Integer.parseInt(input[1]);\n            List\u003cEdge\u003e edgeList = new ArrayList\u003cEdge\u003e();\n            for(int i = 0 ; i \u003c E; i++)\n            {\n                Edge e = new Edge();\n                String[] in = br.readLine().split(\" \");\n                e.sourceId = Integer.parseInt(in[0]) - 1;\n                e.destinationId = Integer.parseInt(in[1]) - 1;\n                e.weight = Integer.parseInt(in[2]);\n                edgeList.add(e);\n            }\n            Node nodeList [] =new Node[V];\n            for(int i = 0 ; i \u003c V ; i++)\n            {\n                Node n = new Node();\n                n.id = i; \n                n.priority = Integer.MAX_VALUE;\n                n.color = 0; // RED  = 0 // BLUE = 1 // GREEN = 2\n                nodeList[i] = n;\n            }\n            PriorityQueue\u003cNode\u003e queue = new PriorityQueue\u003c\u003e(V, new comparator());\n            \n            \n            Integer parent [] = new Integer[V];\n            \n            //Djikstra Chalu....\n            \n            int start = Integer.parseInt(br.readLine()) - 1;\n            nodeList[start].priority = 0;\n            queue.add(nodeList[start]);\n            nodeList[start].color = 1;\n            parent[start] = 0;\n            while(!queue.isEmpty())\n            {\n                Node u = queue.poll();\n                nodeList[u.id].color = 2; // GREEN\n                for(int i = 0 ;i \u003cE ;i ++)\n                {\n                    Edge e  = edgeList.get(i);\n                        if((e.sourceId == u.id) || (e.destinationId == u.id))\n                        {\n                            int source = -1,dest =-1;\n                            if(u.id == e.sourceId)\n                            {\n                                source = e.sourceId;\n                                dest = e.destinationId;\n                            }\n                            else if(u.id == e.destinationId)\n                            {\n                                source = e.destinationId;\n                                dest = e.sourceId; \n                            }\n                            if(nodeList[dest].color == 0) // RED\n                            {\n                                nodeList[dest].priority = u.priority + e.weight;\n                                queue.add(nodeList[dest]);\n                                parent[dest] = source;\n                                nodeList[dest].color = 1; // BLUE\n                            }\n                            else if (nodeList[dest].color == 1 \u0026\u0026 ((u.priority + e.weight) \u003c nodeList[dest].priority))\n                            {\n                                queue.remove(nodeList[dest]);\n                                nodeList[dest].priority = u.priority + e.weight;\n                                queue.add(nodeList[dest]);\n                                parent[dest] = source;\n                            }\n                        }\n                    }\n                }\n            for(int i = 0 ; i \u003c V ; i++)\n            {\n                if(i != start)\n                {\n                    if(nodeList[i].priority == Integer.MAX_VALUE)\n                        System.out.print(\"-1\" + \" \");\n                    else\n                        System.out.print((nodeList[i].priority) + \" \");\n                    //minWeight += nodeList[i].priority;\n                }    \n                \n            }\n            T--;\n        }\n        \n        \n        \n\n    }\n\n}\n","score":0.045454545455,"language":"java8"},{"contest":"Master","challenge":"Dijkstra: Shortest Reach 2","code":"import java.util.*;\nimport java.io.*;\npublic class Djikstra \n{\n    static class Node {\n        int id;\n        int color;\n        int priority;\n    }\n    static class Edge {\n        int sourceId;\n        int destinationId;\n        int weight;\n    }\n    static class comparator implements Comparator\u003cNode\u003e\n    {\n        @Override\n        public int compare (Node n1 ,Node n2)\n        {\n            return n1.priority - n2.priority;\n        }\n    }\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader br = new BufferedReader(new InputStreamReader (System.in));\n        int T = Integer.parseInt(br.readLine());\n        while(T!= 0)\n        {\n            String [] input = br.readLine().split(\" \");\n            int V = Integer.parseInt(input[0]);\n            int E = Integer.parseInt(input[1]);\n            List\u003cEdge\u003e edgeList = new ArrayList\u003cEdge\u003e();\n            for(int i = 0 ; i \u003c E; i++)\n            {\n                Edge e = new Edge();\n                String[] in = br.readLine().split(\" \");\n                e.sourceId = Integer.parseInt(in[0]) - 1;\n                e.destinationId = Integer.parseInt(in[1]) - 1;\n                e.weight = Integer.parseInt(in[2]);\n                edgeList.add(e);\n            }\n            Node nodeList [] =new Node[V];\n            for(int i = 0 ; i \u003c V ; i++)\n            {\n                Node n = new Node();\n                n.id = i; \n                n.priority = Integer.MAX_VALUE;\n                n.color = 0; // RED  = 0 // BLUE = 1 // GREEN = 2\n                nodeList[i] = n;\n            }\n            PriorityQueue\u003cNode\u003e queue = new PriorityQueue\u003c\u003e(V, new comparator());\n            \n            \n            Integer parent [] = new Integer[V];\n            \n            //Djikstra Chalu....\n            \n            int start = Integer.parseInt(br.readLine()) - 1;\n            nodeList[start].priority = 0;\n            queue.add(nodeList[start]);\n            nodeList[start].color = 1;\n            parent[start] = 0;\n            while(!queue.isEmpty())\n            {\n                Node u = queue.poll();\n                nodeList[u.id].color = 2; // GREEN\n                for(int i = 0 ;i \u003cE ;i ++)\n                {\n                    Edge e  = edgeList.get(i);\n                        if((e.sourceId == u.id) || (e.destinationId == u.id))\n                        {\n                            int source = -1,dest =-1;\n                            if(u.id == e.sourceId)\n                            {\n                                source = e.sourceId;\n                                dest = e.destinationId;\n                            }\n                            else if(u.id == e.destinationId)\n                            {\n                                source = e.destinationId;\n                                dest = e.sourceId; \n                            }\n                            if(nodeList[dest].color == 0) // RED\n                            {\n                                nodeList[dest].priority = u.priority + e.weight;\n                                queue.add(nodeList[dest]);\n                                parent[dest] = source;\n                                nodeList[dest].color = 1; // BLUE\n                            }\n                            else if (nodeList[dest].color == 1 \u0026\u0026 ((u.priority + e.weight) \u003c nodeList[dest].priority))\n                            {\n                                queue.remove(nodeList[dest]);\n                                nodeList[dest].priority = u.priority + e.weight;\n                                queue.add(nodeList[dest]);\n                                parent[dest] = source;\n                            }\n                        }\n                    }\n                }\n            for(int i = 0 ; i \u003c V ; i++)\n            {\n                if(i != start)\n                {\n                    if(nodeList[i].priority == Integer.MAX_VALUE)\n                        System.out.print(\"-1\" + \" \");\n                    else\n                        System.out.print((nodeList[i].priority) + \" \");\n                    //minWeight += nodeList[i].priority;\n                }    \n                \n            }\n            System.out.println(\"\");\n            T--;\n        }\n        \n        \n        \n\n    }\n\n}\n","score":0.772727272727,"language":"java8"},{"contest":"Master","challenge":"Dijkstra: Shortest Reach 2","code":"import java.util.*;\nimport java.io.*;\npublic class Djikstra \n{\n    static class Node {\n        int id;\n        int color;\n        int priority;\n    }\n    static class Edge {\n        int sourceId;\n        int destinationId;\n        int weight;\n    }\n    static class comparator implements Comparator\u003cNode\u003e\n    {\n        @Override\n        public int compare (Node n1 ,Node n2)\n        {\n            return n1.priority - n2.priority;\n        }\n    }\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader br = new BufferedReader(new InputStreamReader (System.in));\n        int T = Integer.parseInt(br.readLine());\n        while(T!= 0)\n        {\n            String [] input = br.readLine().split(\" \");\n            int V = Integer.parseInt(input[0]);\n            int E = Integer.parseInt(input[1]);\n            List\u003cEdge\u003e edgeList = new ArrayList\u003cEdge\u003e();\n            for(int i = 0 ; i \u003c E; i++)\n            {\n                Edge e = new Edge();\n                String[] in = br.readLine().split(\" \");\n                e.sourceId = Integer.parseInt(in[0]) - 1;\n                e.destinationId = Integer.parseInt(in[1]) - 1;\n                e.weight = Integer.parseInt(in[2]);\n                int flag = 0;\n                for(int j = 0; j \u003c edgeList.size() ; j++)\n                {\n                    Edge e2 = edgeList.get(j);\n                    if(e.sourceId == e2.sourceId \u0026\u0026 e.destinationId == e.sourceId)\n                    {\n                        flag =1;\n                        if(e.weight \u003c e2.weight)\n                        {\n                            edgeList.remove(e2);\n                            edgeList.add(e);\n                        }\n                        \n                    }\n                }\n                if(flag == 0)\n                    edgeList.add(e);\n            }\n            Node nodeList [] =new Node[V];\n            for(int i = 0 ; i \u003c V ; i++)\n            {\n                Node n = new Node();\n                n.id = i; \n                n.priority = Integer.MAX_VALUE;\n                n.color = 0; // RED  = 0 // BLUE = 1 // GREEN = 2\n                nodeList[i] = n;\n            }\n            PriorityQueue\u003cNode\u003e queue = new PriorityQueue\u003c\u003e(V, new comparator());\n            \n            \n            Integer parent [] = new Integer[V];\n            \n            //Djikstra Chalu....\n            \n            int start = Integer.parseInt(br.readLine()) - 1;\n            nodeList[start].priority = 0;\n            queue.add(nodeList[start]);\n            nodeList[start].color = 1;\n            parent[start] = 0;\n            while(!queue.isEmpty())\n            {\n                Node u = queue.poll();\n                nodeList[u.id].color = 2; // GREEN\n                for(int i = 0 ;i \u003cE ;i ++)\n                {\n                    Edge e  = edgeList.get(i);\n                        if((e.sourceId == u.id) || (e.destinationId == u.id))\n                        {\n                            int source = -1,dest =-1;\n                            if(u.id == e.sourceId)\n                            {\n                                source = e.sourceId;\n                                dest = e.destinationId;\n                            }\n                            else if(u.id == e.destinationId)\n                            {\n                                source = e.destinationId;\n                                dest = e.sourceId; \n                            }\n                            if(nodeList[dest].color == 0) // RED\n                            {\n                                nodeList[dest].priority = u.priority + e.weight;\n                                queue.add(nodeList[dest]);\n                                parent[dest] = source;\n                                nodeList[dest].color = 1; // BLUE\n                            }\n                            else if (nodeList[dest].color == 1 \u0026\u0026 ((u.priority + e.weight) \u003c nodeList[dest].priority))\n                            {\n                                queue.remove(nodeList[dest]);\n                                nodeList[dest].priority = u.priority + e.weight;\n                                queue.add(nodeList[dest]);\n                                parent[dest] = source;\n                            }\n                        }\n                    }\n                }\n            for(int i = 0 ; i \u003c V ; i++)\n            {\n                if(i != start)\n                {\n                    if(nodeList[i].priority == Integer.MAX_VALUE)\n                        System.out.print(\"-1\" + \" \");\n                    else\n                        System.out.print((nodeList[i].priority) + \" \");\n                    //minWeight += nodeList[i].priority;\n                }    \n                \n            }\n            System.out.println(\"\");\n            T--;\n        }\n        \n        \n        \n\n    }\n\n}\n","score":0.545454545455,"language":"java8"},{"contest":"Master","challenge":"Breadth First Search: Shortest Reach","code":"import java.util.*;\nimport java.io.*;\npublic class BFS \n{\n    static class Node\n    {\n        int id;\n        int color;\n        int priority = -1;\n    }\n    static class Edge\n    {\n        int startId;\n        int destinationId;\n    }\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int T = Integer.parseInt(br.readLine());\n        while(T != 0)\n        {\n            String [] input = br.readLine().split(\" \");\n            int V = Integer.parseInt(input[0]);\n            int E = Integer.parseInt(input[1]);\n            \n            Node [] nodeList = new Node[V];\n            \n            for(int i =0 ; i\u003c V ;i++)\n            {\n                Node n = new Node();\n                n.id = i;\n                n.color = 0; // RED\n                nodeList[i] = n;\n            }\n            \n            List\u003cEdge\u003e edgeList = new ArrayList\u003cEdge\u003e();\n            for(int i = 0 ; i \u003c E; i++)\n            {\n                Edge e = new Edge();\n                String [] str = br.readLine().split(\" \");\n                e.startId = Integer.parseInt(str[0]) - 1;\n                e.destinationId = Integer.parseInt(str[1]) - 1;\n                edgeList.add(e);\n            }\n            Queue \u003cNode\u003e queue = new LinkedList\u003cNode\u003e();\n            int start = Integer.parseInt(br.readLine()) - 1;\n\n            //BFS CHALUU\n            nodeList[start].color = 1;\n            nodeList[start].priority = 0;\n            queue.add(nodeList[start]);\n            int count = 1;\n            while(!queue.isEmpty())\n            {\n                Node u = queue.poll();\n                nodeList[u.id].color = 2; // GREEN\n                for(int i = 0 ; i\u003cE; i++)\n                {\n                    Edge e = edgeList.get(i);\n                    if((e.destinationId == u.id) || (e.startId == u.id))\n                    {\n                        int source = -1,dest =-1;\n                        if(u.id == e.startId)\n                        {\n                            source = e.startId;\n                            dest = e.destinationId;\n                        }\n                        else if(u.id == e.destinationId)\n                        {\n                            source = e.destinationId;\n                            dest = e.startId; \n                        }\n                        if(nodeList[dest].color == 0 ) // RED\n                        {\n                            nodeList[dest].color = 1;\n                            nodeList[dest].priority = 6 + u.priority;\n                            queue.add(nodeList[dest]);\n                        }\n                    }\n                }\n                \n            }\n            for(int i = 0 ; i\u003cV ; i++)\n            {\n                if(i!=start)\n                {\n                    System.out.print(nodeList[i].priority + \" \");\n                }\n            }\n            System.out.println(\"\");\n            T--;\n        }\n        \n\n    }\n\n}\n","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Floyd : City of Blinding Lights","code":"import java.io.*;\nimport java.util.Arrays;\npublic class FlyodWarshall {\n\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String [] str = br.readLine().split(\" \");\n        int V = Integer.parseInt(str[0]);\n        int E = Integer.parseInt(str[1]);\n        \n        Integer [][] graph = new Integer[V][V];\n        for(int i = 0 ; i\u003cV ;i ++)\n            for(int j = 0; j \u003cV; j++)\n                graph[i][j] = (-1);\n        \n        Integer [][] parent = new Integer[V][V];\n        for(int i = 0 ; i\u003cV ;i ++)\n            for(int j = 0; j \u003cV; j++)\n                parent[i][j] = -1;\n        \n        \n        for(int i =0; i\u003c E; i++)\n        {\n            String [] input = br.readLine().split(\" \");\n            int x = Integer.parseInt(input[0]) - 1;\n            int y = Integer.parseInt(input[1]) - 1;\n            int w = Integer.parseInt(input[2]);\n            \n            graph[x][y] = w;\n            parent[x][y] = x;\n        }\n        \n        for(int k = 0 ; k\u003c V; k++)\n        {\n            for(int i = 0; i\u003c V ; i++)\n            {\n                for(int j = 0; j \u003c V; j++)\n                {\n                    if(graph[i][k] != -1 \u0026\u0026 graph[k][j] != -1)\n                        if(graph[i][j] == -1)\n                            graph[i][j] = graph[i][k] + graph[k][j];\n                        else if(graph[i][k] + graph[k][j] \u003c graph[i][j])\n                        {\n                            graph[i][j] = graph[i][k] + graph[k][j];\n                            parent[i][j] = k;\n                        }\n                }\n            }\n        }\n        int T = Integer.parseInt(br.readLine());\n        /*for(int i = 0 ; i\u003cV ;i ++)\n        {\n            for(int j = 0; j \u003cV; j++)\n            {\n                System.out.print(graph[i][j] + \" \");\n            }\n            System.out.println(\"\");\n        }*/\n        while(T!=0)\n        {\n            String [] out = br.readLine().split(\" \");\n            int x = Integer.parseInt(out[0]) - 1;\n            int y = Integer.parseInt(out[1]) -1;\n            System.out.println(graph[x][y]);\n            \n            T--;\n        }\n\n    }\n\n}\n","score":0.841176470588,"language":"java8"},{"contest":"Master","challenge":"Floyd : City of Blinding Lights","code":"import java.io.*;\nimport java.util.Arrays;\npublic class FlyodWarshall {\n\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String [] str = br.readLine().split(\" \");\n        int V = Integer.parseInt(str[0]);\n        int E = Integer.parseInt(str[1]);\n        \n        Integer [][] graph = new Integer[V][V];\n        for(int i = 0 ; i\u003cV ;i ++)\n        {\n            for(int j = 0; j \u003cV; j++)\n            {\n                if(i == j)\n                    graph[i][j] = (0);\n                else\n                    graph[i][j] = -1;\n            }\n        }\n                \n        \n        Integer [][] parent = new Integer[V][V];\n        for(int i = 0 ; i\u003cV ;i ++)\n            for(int j = 0; j \u003cV; j++)\n                parent[i][j] = -1;\n        \n        \n        for(int i =0; i\u003c E; i++)\n        {\n            String [] input = br.readLine().split(\" \");\n            int x = Integer.parseInt(input[0]) - 1;\n            int y = Integer.parseInt(input[1]) - 1;\n            int w = Integer.parseInt(input[2]);\n            \n            graph[x][y] = w;\n            parent[x][y] = x;\n        }\n        \n        for(int k = 0 ; k\u003c V; k++)\n        {\n            for(int i = 0; i\u003c V ; i++)\n            {\n                for(int j = 0; j \u003c V; j++)\n                {\n                    if(graph[i][k] != -1 \u0026\u0026 graph[k][j] != -1)\n                        if(graph[i][j] == -1)\n                            graph[i][j] = graph[i][k] + graph[k][j];\n                        else if(graph[i][k] + graph[k][j] \u003c graph[i][j])\n                        {\n                            graph[i][j] = graph[i][k] + graph[k][j];\n                            parent[i][j] = k;\n                        }\n                }\n            }\n        }\n        int T = Integer.parseInt(br.readLine());\n        /*for(int i = 0 ; i\u003cV ;i ++)\n        {\n            for(int j = 0; j \u003cV; j++)\n            {\n                System.out.print(graph[i][j] + \" \");\n            }\n            System.out.println(\"\");\n        }*/\n        while(T!=0)\n        {\n            String [] out = br.readLine().split(\" \");\n            int x = Integer.parseInt(out[0]) - 1;\n            int y = Integer.parseInt(out[1]) -1;\n            System.out.println(graph[x][y]);\n            \n            T--;\n        }\n\n    }\n\n}\n","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Dijkstra: Shortest Reach 2","code":"import java.util.*;\nimport java.io.*;\npublic class Djikstra \n{\n    static class Node {\n        int id;\n        int color;\n        int priority;\n        List\u003cEdge\u003e edgeList = new ArrayList\u003cEdge\u003e();\n    }\n    static class Edge {\n        int sourceId;\n        int destinationId;\n        int weight;\n    }\n    static class comparator implements Comparator\u003cNode\u003e\n    {\n        @Override\n        public int compare (Node n1 ,Node n2)\n        {\n            return n1.priority - n2.priority;\n        }\n    }\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader br = new BufferedReader(new InputStreamReader (System.in));\n        int T = Integer.parseInt(br.readLine());\n        while(T!= 0)\n        {\n            String [] input = br.readLine().split(\" \");\n            int V = Integer.parseInt(input[0]);\n            int E = Integer.parseInt(input[1]);\n            Node nodeList [] =new Node[V];\n            for(int i = 0 ; i \u003c V ; i++)\n            {\n                Node n = new Node();\n                n.id = i; \n                n.priority = Integer.MAX_VALUE;\n                n.color = 0; // RED  = 0 // BLUE = 1 // GREEN = 2\n                nodeList[i] = n;\n            }\n            for(int i = 0 ; i \u003c E; i++)\n            {\n                Edge e = new Edge();\n                String[] in = br.readLine().split(\" \");\n                e.sourceId = Integer.parseInt(in[0]) - 1;\n                e.destinationId = Integer.parseInt(in[1]) - 1;\n                e.weight = Integer.parseInt(in[2]);\n                nodeList[e.sourceId].edgeList.add(e);\n                nodeList[e.destinationId].edgeList.add(e);\n            }\n            \n            PriorityQueue\u003cNode\u003e queue = new PriorityQueue\u003c\u003e(V, new comparator());\n            \n            \n            Integer parent [] = new Integer[V];\n            \n            //Djikstra Chalu....\n            \n            int start = Integer.parseInt(br.readLine()) - 1;\n            nodeList[start].priority = 0;\n            queue.add(nodeList[start]);\n            nodeList[start].color = 1;\n            parent[start] = 0;\n            while(!queue.isEmpty())\n            {\n                Node u = queue.poll();\n                nodeList[u.id].color = 2; // GREEN\n                for(int i = 0 ;i \u003cnodeList[u.id].edgeList.size() ;i ++)\n                {\n                    Edge e  = nodeList[u.id].edgeList.get(i);\n                        if((e.sourceId == u.id) || (e.destinationId == u.id))\n                        {\n                            int source = -1,dest =-1;\n                            if(u.id == e.sourceId)\n                            {\n                                source = e.sourceId;\n                                dest = e.destinationId;\n                            }\n                            else if(u.id == e.destinationId)\n                            {\n                                source = e.destinationId;\n                                dest = e.sourceId; \n                            }\n                            if(nodeList[dest].color == 0) // RED\n                            {\n                                nodeList[dest].priority = u.priority + e.weight;\n                                queue.add(nodeList[dest]);\n                                parent[dest] = source;\n                                nodeList[dest].color = 1; // BLUE\n                            }\n                            else if (nodeList[dest].color == 1 \u0026\u0026 ((u.priority + e.weight) \u003c nodeList[dest].priority))\n                            {\n                                queue.remove(nodeList[dest]);\n                                nodeList[dest].priority = u.priority + e.weight;\n                                queue.add(nodeList[dest]);\n                                parent[dest] = source;\n                            }\n                        }\n                    }\n                }\n            for(int i = 0 ; i \u003c V ; i++)\n            {\n                if(i != start)\n                {\n                    if(nodeList[i].priority == Integer.MAX_VALUE)\n                        System.out.print(\"-1\" + \" \");\n                    else\n                        System.out.print((nodeList[i].priority) + \" \");\n                    //minWeight += nodeList[i].priority;\n                }    \n                \n            }\n            System.out.println(\"\");\n            T--;\n        }\n        \n        \n        \n\n    }\n\n}\n","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Prim's (MST) : Special Subtree","code":"import java.util.*;\nimport java.io.*;\npublic class Prims {\n    static class Node {\n        int id;\n        int color;\n        int priority;\n        List\u003cEdge\u003e edgeList = new ArrayList\u003cEdge\u003e();\n    }\n    static class Edge {\n        int sourceId;\n        int destinationId;\n        int weight;\n    }\n    static class comparator implements Comparator\u003cNode\u003e\n    {\n        @Override\n        public int compare (Node n1 ,Node n2)\n        {\n            return n1.priority - n2.priority;\n        }\n    }\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader br = new BufferedReader(new InputStreamReader (System.in));\n        \n        String [] input = br.readLine().split(\" \");\n        int V = Integer.parseInt(input[0]);\n        int E = Integer.parseInt(input[1]);\n        Node nodeList [] =new Node[V];\n        for(int i = 0 ; i \u003c V ; i++)\n        {\n            Node n = new Node();\n            n.id = i; \n            n.priority = Integer.MAX_VALUE;\n            n.color = 0; // RED  = 0 // BLUE = 1 // GREEN = 2\n            nodeList[i] = n;\n        }\n        for(int i = 0 ; i \u003c E; i++)\n        {\n            Edge e = new Edge();\n            String[] in = br.readLine().split(\" \");\n            e.sourceId = Integer.parseInt(in[0]) - 1;\n            e.destinationId = Integer.parseInt(in[1]) - 1;\n            e.weight = Integer.parseInt(in[2]);\n            nodeList[e.sourceId].edgeList.add(e);\n            nodeList[e.destinationId].edgeList.add(e);\n        }\n        PriorityQueue\u003cNode\u003e queue = new PriorityQueue\u003c\u003e(V, new comparator());\n        \n        \n        Integer parent [] = new Integer[V];\n        \n        //Prims Chalu//\n        nodeList[0].priority = 0;\n        queue.add(nodeList[0]);\n        nodeList[0].color = 1;\n        parent[0] = 0;\n        while(!queue.isEmpty())\n        {\n            Node u = queue.poll();\n            nodeList[u.id].color = 2; // GREEN\n            for(int i = 0 ;i \u003cnodeList[u.id].edgeList.size() ;i ++)\n            {\n                Edge e  = nodeList[u.id].edgeList.get(i);\n                    if((e.sourceId == u.id) || (e.destinationId == u.id))\n                    {\n                        int source = -1,dest =-1;\n                        if(u.id == e.sourceId)\n                        {\n                            source = e.sourceId;\n                            dest = e.destinationId;\n                        }\n                        else if(u.id == e.destinationId)\n                        {\n                            source = e.destinationId;\n                            dest = e.sourceId; \n                        }\n                        if(nodeList[dest].color == 0) // RED\n                        {\n                            nodeList[dest].priority = e.weight;\n                            queue.add(nodeList[dest]);\n                            parent[dest] = source;\n                            nodeList[dest].color = 1; // BLUE\n                        }\n                        else if (nodeList[dest].color == 1 \u0026\u0026 e.weight \u003c nodeList[dest].priority)\n                        {\n                            queue.remove(nodeList[dest]);\n                            nodeList[dest].priority = e.weight;\n                            queue.add(nodeList[dest]);\n                            parent[dest] = source;\n                        }\n                    }\n                }\n            }\n        int minWeight = 0;\n        for(int i = 1 ; i \u003c V ; i++)\n        {\n//            System.out.print((nodeList[i].priority) + \" \");\n            minWeight += nodeList[i].priority;\n        }\n        //System.out.println();\n        /*for(int i = 1 ; i \u003c V ; i++)\n        {\n            System.out.println((i+1) +  \"--\" + (parent[i]+1));\n        }*/\n        System.out.println(minWeight);\n    }\n\n}\n","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Breadth First Search: Shortest Reach","code":"import java.util.*;\nimport java.io.*;\npublic class BFS \n{\n    static class Node\n    {\n        int id;\n        int color;\n        int priority = -1;\n        List\u003cEdge\u003e edgeList = new ArrayList\u003cEdge\u003e();\n    }\n    static class Edge\n    {\n        int startId;\n        int destinationId;\n    }\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int T = Integer.parseInt(br.readLine());\n        while(T != 0)\n        {\n            String [] input = br.readLine().split(\" \");\n            int V = Integer.parseInt(input[0]);\n            int E = Integer.parseInt(input[1]);\n            \n            Node [] nodeList = new Node[V];\n            \n            for(int i =0 ; i\u003c V ;i++)\n            {\n                Node n = new Node();\n                n.id = i;\n                n.color = 0; // RED\n                nodeList[i] = n;\n            }\n            \n            for(int i = 0 ; i \u003c E; i++)\n            {\n                Edge e = new Edge();\n                String[] in = br.readLine().split(\" \");\n                e.startId = Integer.parseInt(in[0]) - 1;\n                e.destinationId = Integer.parseInt(in[1]) - 1;\n                nodeList[e.startId].edgeList.add(e);\n                nodeList[e.destinationId].edgeList.add(e);\n            }\n            Queue \u003cNode\u003e queue = new LinkedList\u003cNode\u003e();\n            int start = Integer.parseInt(br.readLine()) - 1;\n\n            //BFS CHALUU\n            nodeList[start].color = 1;\n            nodeList[start].priority = 0;\n            queue.add(nodeList[start]);\n            int count = 1;\n            while(!queue.isEmpty())\n            {\n                Node u = queue.poll();\n                nodeList[u.id].color = 2; // GREEN\n                for(int i = 0 ;i \u003cnodeList[u.id].edgeList.size() ;i ++)\n                {\n                    Edge e  = nodeList[u.id].edgeList.get(i);\n                    if((e.destinationId == u.id) || (e.startId == u.id))\n                    {\n                        int source = -1,dest =-1;\n                        if(u.id == e.startId)\n                        {\n                            source = e.startId;\n                            dest = e.destinationId;\n                        }\n                        else if(u.id == e.destinationId)\n                        {\n                            source = e.destinationId;\n                            dest = e.startId; \n                        }\n                        if(nodeList[dest].color == 0 ) // RED\n                        {\n                            nodeList[dest].color = 1;\n                            nodeList[dest].priority = 6 + u.priority;\n                            queue.add(nodeList[dest]);\n                        }\n                    }\n                }\n                \n            }\n            for(int i = 0 ; i\u003cV ; i++)\n            {\n                if(i!=start)\n                {\n                    System.out.print(nodeList[i].priority + \" \");\n                }\n            }\n            System.out.println(\"\");\n            T--;\n        }\n        \n\n    }\n\n}\n","score":1.0,"language":"java8"},{"contest":"Master","challenge":"Components in a graph","code":"import java.util.*;\nimport java.io.*;\npublic class CC_Undirected \n{\n    static class Node\n    {\n        int id;\n        int color;\n        List\u003cEdge\u003e edgeList = new ArrayList\u003cEdge\u003e();\n        int discovery;\n        int finish;\n        int parentId;\n    }\n    static class Edge\n    {\n        int startId;\n        int destinationId;\n    }\n    static Node [] nodeList;\n    static int time = 1;\n    public CC_Undirected(int V) \n    {\n        nodeList = new Node[V];\n        for(int i =0 ; i\u003c V ;i++)\n        {\n            Node n = new Node();\n            n.id = i;\n            n.color = 0; // RED\n            nodeList[i] = n;\n        }\n    }\n    public static int DFS_Visit(int i)\n    {\n        nodeList[i].color = 1;\n        nodeList[i].discovery = time++;\n        for(int x = 0; x \u003c nodeList[i].edgeList.size(); x++)\n        {\n            Edge e = nodeList[i].edgeList.get(x);\n            if((e.destinationId == i) || (e.startId == i))\n            {\n                int source = -1,dest =-1;\n                if(i == e.startId)\n                {\n                    source = e.startId;\n                    dest = e.destinationId;\n                }\n                else if(i == e.destinationId)\n                {\n                    source = e.destinationId;\n                    dest = e.startId; \n                }\n                if(nodeList[dest].color == 0 ) // RED\n                {\n                    nodeList[dest].parentId = i;\n                    return 1 +DFS_Visit(dest);\n                }\n            }\n        }\n        nodeList[i].color = 2;\n        nodeList[i].finish = time++;\n        return 0;\n    }\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String [] input = br.readLine().split(\" \");\n        int E = Integer.parseInt(input[0]);\n        int V = 2 * E;\n        CC_Undirected graph = new CC_Undirected(V);\n        for(int i = 0 ; i \u003c E; i++)\n        {\n            Edge e = new Edge();\n            String [] str = br.readLine().split(\" \");\n            e.startId = Integer.parseInt(str[0]) - 1;\n            e.destinationId = Integer.parseInt(str[1]) - 1;\n            nodeList[e.startId].edgeList.add(e);\n            nodeList[e.destinationId].edgeList.add(e);\n        }\n        //DFS CHALUU\n        \n        List\u003cInteger\u003e componentSize = new ArrayList\u003cInteger\u003e();\n        componentSize.add(DFS_Visit(0) + 1);  // start == 0\n        int count = 1;\n        for(int i  = 0 ; i \u003c V ; i++)\n        {\n            if(nodeList[i].color == 0)\n            {\n                componentSize.add(DFS_Visit(i) + 1);\n                count++;\n            }\n        }\n//        System.out.println(\"Number of Connected Component : \" + count);\n        //System.out.println(componentSize);\n        int max = componentSize.get(0);\n        int min = Integer.MAX_VALUE;\n        for(int i = 0 ; i\u003ccomponentSize.size(); i++)\n        {\n            int x = componentSize.get(i);\n            if(x \u003e max)\n                max = x;\n            if(x \u003c min \u0026\u0026 x \u003e= 2)\n                min = x;\n        }\n        //System.out.println(componentSize);\n        System.out.println(min + \" \" + max);\n        \n    }\n\n}\n","score":0.483870967742,"language":"java8"},{"contest":"Master","challenge":"Components in a graph","code":"import java.util.*;\nimport java.io.*;\npublic class CC_Undirected \n{\n    static class Node\n    {\n        int id;\n        int color;\n        List\u003cEdge\u003e edgeList = new ArrayList\u003cEdge\u003e();\n        int discovery;\n        int finish;\n        int parentId;\n    }\n    static class Edge\n    {\n        int startId;\n        int destinationId;\n    }\n    static Node [] nodeList;\n    static int time = 1;\n    public CC_Undirected(int V) \n    {\n        nodeList = new Node[V];\n        for(int i =0 ; i\u003c V ;i++)\n        {\n            Node n = new Node();\n            n.id = i;\n            n.color = 0; // RED\n            nodeList[i] = n;\n        }\n    }\n    public static int DFS_Visit(int i, int depth)\n    {\n        nodeList[i].color = 1;\n        nodeList[i].discovery = time++;\n        for(int x = 0; x \u003c nodeList[i].edgeList.size(); x++)\n        {\n            Edge e = nodeList[i].edgeList.get(x);\n            if((e.destinationId == i) || (e.startId == i))\n            {\n                int source = -1,dest =-1;\n                if(i == e.startId)\n                {\n                    source = e.startId;\n                    dest = e.destinationId;\n                }\n                else if(i == e.destinationId)\n                {\n                    source = e.destinationId;\n                    dest = e.startId; \n                }\n                if(nodeList[dest].color == 0 ) // RED\n                {\n                    nodeList[dest].parentId = i;\n                    depth = 1 + DFS_Visit(dest,depth);\n                }\n            }\n        }\n        nodeList[i].color = 2;\n        nodeList[i].finish = time++;\n        return depth;\n    }\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String [] input = br.readLine().split(\" \");\n        int E = Integer.parseInt(input[0]);\n        int V = 2 * E;\n        CC_Undirected graph = new CC_Undirected(V);\n        for(int i = 0 ; i \u003c E; i++)\n        {\n            Edge e = new Edge();\n            String [] str = br.readLine().split(\" \");\n            e.startId = Integer.parseInt(str[0]) - 1;\n            e.destinationId = Integer.parseInt(str[1]) - 1;\n            nodeList[e.startId].edgeList.add(e);\n            nodeList[e.destinationId].edgeList.add(e);\n        }\n        //DFS CHALUU\n        \n        List\u003cInteger\u003e componentSize = new ArrayList\u003cInteger\u003e();\n        componentSize.add(DFS_Visit(0,1));  // start == 0\n        int count = 1;\n        for(int i  = 0 ; i \u003c V ; i++)\n        {\n            if(nodeList[i].color == 0)\n            {\n                componentSize.add(DFS_Visit(i,1));\n                count++;\n            }\n        }\n//        System.out.println(\"Number of Connected Component : \" + count);\n        //System.out.println(componentSize);\n        int max = componentSize.get(0);\n        int min = Integer.MAX_VALUE;\n        for(int i = 0 ; i\u003ccomponentSize.size(); i++)\n        {\n            int x = componentSize.get(i);\n            if(x \u003e max)\n                max = x;\n            if(x \u003c min \u0026\u0026 x \u003e= 2)\n                min = x;\n        }\n        //System.out.println(componentSize);\n        System.out.println(min + \" \" + max);\n        \n    }\n\n}\n","score":1.0,"language":"java8"}],"teams":[],"contest_participations":[{"jobs_consent":null,"contest":"Master"},{"jobs_consent":null,"contest":"Java_Lab_3"},{"jobs_consent":true,"contest":"CodeAgon"},{"jobs_consent":null,"contest":"CAMPathon"},{"jobs_consent":null,"contest":"CAMPathon"},{"jobs_consent":null,"contest":"GS Quantify 2018"},{"jobs_consent":null,"contest":"Goldman Sachs Women's CodeSprint"},{"jobs_consent":null,"contest":"HourRank 31"},{"jobs_consent":null,"contest":"HourRank 31"}],"forum_comments":[],"all_ratings":[],"contest_medals":[],"survey_results":[],"messages_sent":[],"run_codes":[],"contests_created":[],"job_applications":[]}